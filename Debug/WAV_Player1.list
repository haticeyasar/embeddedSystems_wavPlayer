
WAV_Player1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d91c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800daa4  0800daa4  0001daa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc10  0800dc10  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc10  0800dc10  0001dc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc18  0800dc18  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc18  0800dc18  0001dc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc1c  0800dc1c  0001dc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800dc20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00001f50  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00004000  20001fe0  20001fe0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029b69  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055cc  00000000  00000000  00049c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  0004f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001250  00000000  00000000  00050638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026af8  00000000  00000000  00051888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f963  00000000  00000000  00078380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbaec  00000000  00000000  00097ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001637cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053f4  00000000  00000000  00163824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800da8c 	.word	0x0800da8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800da8c 	.word	0x0800da8c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004d6:	f107 020c 	add.w	r2, r7, #12
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2302      	movs	r3, #2
 80004e0:	2194      	movs	r1, #148	; 0x94
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <write_register+0x30>)
 80004e4:	f003 fe9a 	bl	800421c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	200000ac 	.word	0x200000ac

080004f4 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	4603      	mov	r3, r0
 80004fc:	6039      	str	r1, [r7, #0]
 80004fe:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000504:	f107 020c 	add.w	r2, r7, #12
 8000508:	2364      	movs	r3, #100	; 0x64
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2301      	movs	r3, #1
 800050e:	2194      	movs	r1, #148	; 0x94
 8000510:	4807      	ldr	r0, [pc, #28]	; (8000530 <read_register+0x3c>)
 8000512:	f003 fe83 	bl	800421c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000516:	2364      	movs	r3, #100	; 0x64
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	683a      	ldr	r2, [r7, #0]
 800051e:	2194      	movs	r1, #148	; 0x94
 8000520:	4803      	ldr	r0, [pc, #12]	; (8000530 <read_register+0x3c>)
 8000522:	f003 ff79 	bl	8004418 <HAL_I2C_Master_Receive>
}
 8000526:	bf00      	nop
 8000528:	3710      	adds	r7, #16
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200000ac 	.word	0x200000ac

08000534 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000534:	b084      	sub	sp, #16
 8000536:	b580      	push	{r7, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	af00      	add	r7, sp, #0
 800053c:	f107 0c10 	add.w	ip, r7, #16
 8000540:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000544:	4b7b      	ldr	r3, [pc, #492]	; (8000734 <CS43_Init+0x200>)
 8000546:	2200      	movs	r2, #0
 8000548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800054c:	4b79      	ldr	r3, [pc, #484]	; (8000734 <CS43_Init+0x200>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	69da      	ldr	r2, [r3, #28]
 8000552:	4b78      	ldr	r3, [pc, #480]	; (8000734 <CS43_Init+0x200>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800055a:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	2110      	movs	r1, #16
 8000560:	4875      	ldr	r0, [pc, #468]	; (8000738 <CS43_Init+0x204>)
 8000562:	f001 ff8d 	bl	8002480 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000566:	4b75      	ldr	r3, [pc, #468]	; (800073c <CS43_Init+0x208>)
 8000568:	4618      	mov	r0, r3
 800056a:	f107 0310 	add.w	r3, r7, #16
 800056e:	2254      	movs	r2, #84	; 0x54
 8000570:	4619      	mov	r1, r3
 8000572:	f00d f9ad 	bl	800d8d0 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000576:	2301      	movs	r3, #1
 8000578:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	4619      	mov	r1, r3
 800057e:	2002      	movs	r0, #2
 8000580:	f7ff ff9e 	bl	80004c0 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000588:	797b      	ldrb	r3, [r7, #5]
 800058a:	f043 0320 	orr.w	r3, r3, #32
 800058e:	b2db      	uxtb	r3, r3
 8000590:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000592:	797b      	ldrb	r3, [r7, #5]
 8000594:	f043 030c 	orr.w	r3, r3, #12
 8000598:	b2db      	uxtb	r3, r3
 800059a:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800059c:	797b      	ldrb	r3, [r7, #5]
 800059e:	f043 0303 	orr.w	r3, r3, #3
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	3301      	adds	r3, #1
 80005aa:	4619      	mov	r1, r3
 80005ac:	2004      	movs	r0, #4
 80005ae:	f7ff ff87 	bl	80004c0 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005b2:	2380      	movs	r3, #128	; 0x80
 80005b4:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	3301      	adds	r3, #1
 80005ba:	4619      	mov	r1, r3
 80005bc:	2005      	movs	r0, #5
 80005be:	f7ff ff7f 	bl	80004c0 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4619      	mov	r1, r3
 80005c6:	2006      	movs	r0, #6
 80005c8:	f7ff ff94 	bl	80004f4 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005cc:	797b      	ldrb	r3, [r7, #5]
 80005ce:	f003 0320 	and.w	r3, r3, #32
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005e0:	797b      	ldrb	r3, [r7, #5]
 80005e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80005ea:	797b      	ldrb	r3, [r7, #5]
 80005ec:	f023 0310 	bic.w	r3, r3, #16
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80005f4:	797b      	ldrb	r3, [r7, #5]
 80005f6:	f023 0304 	bic.w	r3, r3, #4
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 80005fe:	797b      	ldrb	r3, [r7, #5]
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	b2db      	uxtb	r3, r3
 8000606:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000608:	797b      	ldrb	r3, [r7, #5]
 800060a:	f043 0303 	orr.w	r3, r3, #3
 800060e:	b2db      	uxtb	r3, r3
 8000610:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	3301      	adds	r3, #1
 8000616:	4619      	mov	r1, r3
 8000618:	2006      	movs	r0, #6
 800061a:	f7ff ff51 	bl	80004c0 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	3301      	adds	r3, #1
 8000622:	4619      	mov	r1, r3
 8000624:	2008      	movs	r0, #8
 8000626:	f7ff ff65 	bl	80004f4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800062a:	797b      	ldrb	r3, [r7, #5]
 800062c:	f023 030f 	bic.w	r3, r3, #15
 8000630:	b2db      	uxtb	r3, r3
 8000632:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000634:	797b      	ldrb	r3, [r7, #5]
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	3301      	adds	r3, #1
 8000642:	4619      	mov	r1, r3
 8000644:	2008      	movs	r0, #8
 8000646:	f7ff ff3b 	bl	80004c0 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	3301      	adds	r3, #1
 800064e:	4619      	mov	r1, r3
 8000650:	2009      	movs	r0, #9
 8000652:	f7ff ff4f 	bl	80004f4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000656:	797b      	ldrb	r3, [r7, #5]
 8000658:	f023 030f 	bic.w	r3, r3, #15
 800065c:	b2db      	uxtb	r3, r3
 800065e:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000660:	797b      	ldrb	r3, [r7, #5]
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	b2db      	uxtb	r3, r3
 8000668:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	3301      	adds	r3, #1
 800066e:	4619      	mov	r1, r3
 8000670:	2009      	movs	r0, #9
 8000672:	f7ff ff25 	bl	80004c0 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	3301      	adds	r3, #1
 800067a:	4619      	mov	r1, r3
 800067c:	200e      	movs	r0, #14
 800067e:	f7ff ff39 	bl	80004f4 <read_register>
	if(outputMode == MODE_ANALOG)
 8000682:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000686:	2b03      	cmp	r3, #3
 8000688:	d119      	bne.n	80006be <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 800068a:	797b      	ldrb	r3, [r7, #5]
 800068c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000690:	b2db      	uxtb	r3, r3
 8000692:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000694:	797b      	ldrb	r3, [r7, #5]
 8000696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069a:	b2db      	uxtb	r3, r3
 800069c:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 800069e:	797b      	ldrb	r3, [r7, #5]
 80006a0:	f023 0320 	bic.w	r3, r3, #32
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006a8:	797b      	ldrb	r3, [r7, #5]
 80006aa:	f023 0310 	bic.w	r3, r3, #16
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006b2:	797b      	ldrb	r3, [r7, #5]
 80006b4:	f023 0308 	bic.w	r3, r3, #8
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	717b      	strb	r3, [r7, #5]
 80006bc:	e005      	b.n	80006ca <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 80006be:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d101      	bne.n	80006ca <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 80006c6:	2302      	movs	r3, #2
 80006c8:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	3301      	adds	r3, #1
 80006ce:	4619      	mov	r1, r3
 80006d0:	200e      	movs	r0, #14
 80006d2:	f7ff fef5 	bl	80004c0 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	3301      	adds	r3, #1
 80006da:	4619      	mov	r1, r3
 80006dc:	200f      	movs	r0, #15
 80006de:	f7ff ff09 	bl	80004f4 <read_register>
	iData[1] = 0x00;
 80006e2:	2300      	movs	r3, #0
 80006e4:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	3301      	adds	r3, #1
 80006ea:	4619      	mov	r1, r3
 80006ec:	200f      	movs	r0, #15
 80006ee:	f7ff fee7 	bl	80004c0 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	3301      	adds	r3, #1
 80006fa:	4619      	mov	r1, r3
 80006fc:	2014      	movs	r0, #20
 80006fe:	f7ff fedf 	bl	80004c0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	3301      	adds	r3, #1
 8000706:	4619      	mov	r1, r3
 8000708:	2015      	movs	r0, #21
 800070a:	f7ff fed9 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	3301      	adds	r3, #1
 8000712:	4619      	mov	r1, r3
 8000714:	201a      	movs	r0, #26
 8000716:	f7ff fed3 	bl	80004c0 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	3301      	adds	r3, #1
 800071e:	4619      	mov	r1, r3
 8000720:	201b      	movs	r0, #27
 8000722:	f7ff fecd 	bl	80004c0 <write_register>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000730:	b004      	add	sp, #16
 8000732:	4770      	bx	lr
 8000734:	20001440 	.word	0x20001440
 8000738:	40020c00 	.word	0x40020c00
 800073c:	200000ac 	.word	0x200000ac

08000740 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b03      	cmp	r3, #3
 800074e:	d82b      	bhi.n	80007a8 <CS43_Enable_RightLeft+0x68>
 8000750:	a201      	add	r2, pc, #4	; (adr r2, 8000758 <CS43_Enable_RightLeft+0x18>)
 8000752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000756:	bf00      	nop
 8000758:	08000769 	.word	0x08000769
 800075c:	08000779 	.word	0x08000779
 8000760:	08000789 	.word	0x08000789
 8000764:	08000799 	.word	0x08000799
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000768:	23c0      	movs	r3, #192	; 0xc0
 800076a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800076c:	7b7b      	ldrb	r3, [r7, #13]
 800076e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000772:	b2db      	uxtb	r3, r3
 8000774:	737b      	strb	r3, [r7, #13]
			break;
 8000776:	e018      	b.n	80007aa <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800077c:	7b7b      	ldrb	r3, [r7, #13]
 800077e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000782:	b2db      	uxtb	r3, r3
 8000784:	737b      	strb	r3, [r7, #13]
			break;
 8000786:	e010      	b.n	80007aa <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000788:	23c0      	movs	r3, #192	; 0xc0
 800078a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800078c:	7b7b      	ldrb	r3, [r7, #13]
 800078e:	f043 0320 	orr.w	r3, r3, #32
 8000792:	b2db      	uxtb	r3, r3
 8000794:	737b      	strb	r3, [r7, #13]
			break;
 8000796:	e008      	b.n	80007aa <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800079c:	7b7b      	ldrb	r3, [r7, #13]
 800079e:	f043 0320 	orr.w	r3, r3, #32
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	737b      	strb	r3, [r7, #13]
			break;
 80007a6:	e000      	b.n	80007aa <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 80007a8:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007aa:	7b7b      	ldrb	r3, [r7, #13]
 80007ac:	f043 030c 	orr.w	r3, r3, #12
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007b4:	7b7b      	ldrb	r3, [r7, #13]
 80007b6:	f043 0303 	orr.w	r3, r3, #3
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2004      	movs	r0, #4
 80007c8:	f7ff fe7a 	bl	80004c0 <write_register>
}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	3319      	adds	r3, #25
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	3301      	adds	r3, #1
 80007ec:	4619      	mov	r1, r3
 80007ee:	2020      	movs	r0, #32
 80007f0:	f7ff fe66 	bl	80004c0 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	3301      	adds	r3, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	2021      	movs	r0, #33	; 0x21
 80007fe:	f7ff fe5f 	bl	80004c0 <write_register>
}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b084      	sub	sp, #16
 800080e:	af00      	add	r7, sp, #0
 8000810:	4603      	mov	r3, r0
 8000812:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d019      	beq.n	800084e <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 800081a:	23ff      	movs	r3, #255	; 0xff
 800081c:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	3301      	adds	r3, #1
 8000824:	4619      	mov	r1, r3
 8000826:	2004      	movs	r0, #4
 8000828:	f7ff fe4a 	bl	80004c0 <write_register>
    iData[1] = 0x01;
 800082c:	2301      	movs	r3, #1
 800082e:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	3301      	adds	r3, #1
 8000836:	4619      	mov	r1, r3
 8000838:	2022      	movs	r0, #34	; 0x22
 800083a:	f7ff fe41 	bl	80004c0 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	3301      	adds	r3, #1
 8000844:	4619      	mov	r1, r3
 8000846:	2023      	movs	r0, #35	; 0x23
 8000848:	f7ff fe3a 	bl	80004c0 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 800084c:	e018      	b.n	8000880 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 800084e:	2300      	movs	r3, #0
 8000850:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	3301      	adds	r3, #1
 8000858:	4619      	mov	r1, r3
 800085a:	2022      	movs	r0, #34	; 0x22
 800085c:	f7ff fe30 	bl	80004c0 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	3301      	adds	r3, #1
 8000866:	4619      	mov	r1, r3
 8000868:	2023      	movs	r0, #35	; 0x23
 800086a:	f7ff fe29 	bl	80004c0 <write_register>
    iData[1] = 0xAF;
 800086e:	23af      	movs	r3, #175	; 0xaf
 8000870:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	3301      	adds	r3, #1
 8000878:	4619      	mov	r1, r3
 800087a:	2004      	movs	r0, #4
 800087c:	f7ff fe20 	bl	80004c0 <write_register>
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffbb 	bl	800080a <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8000894:	2399      	movs	r3, #153	; 0x99
 8000896:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	3301      	adds	r3, #1
 800089c:	4619      	mov	r1, r3
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fe0e 	bl	80004c0 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	3301      	adds	r3, #1
 80008ac:	4619      	mov	r1, r3
 80008ae:	2047      	movs	r0, #71	; 0x47
 80008b0:	f7ff fe06 	bl	80004c0 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	3301      	adds	r3, #1
 80008b8:	4619      	mov	r1, r3
 80008ba:	2032      	movs	r0, #50	; 0x32
 80008bc:	f7ff fe1a 	bl	80004f4 <read_register>
	iData[1] |= 0x80;
 80008c0:	797b      	ldrb	r3, [r7, #5]
 80008c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	3301      	adds	r3, #1
 80008ce:	4619      	mov	r1, r3
 80008d0:	2032      	movs	r0, #50	; 0x32
 80008d2:	f7ff fdf5 	bl	80004c0 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	3301      	adds	r3, #1
 80008da:	4619      	mov	r1, r3
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	f7ff fe09 	bl	80004f4 <read_register>
	iData[1] &= ~(0x80);
 80008e2:	797b      	ldrb	r3, [r7, #5]
 80008e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	3301      	adds	r3, #1
 80008f0:	4619      	mov	r1, r3
 80008f2:	2032      	movs	r0, #50	; 0x32
 80008f4:	f7ff fde4 	bl	80004c0 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80008f8:	2300      	movs	r3, #0
 80008fa:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	3301      	adds	r3, #1
 8000900:	4619      	mov	r1, r3
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff fddc 	bl	80004c0 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000908:	239e      	movs	r3, #158	; 0x9e
 800090a:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	3301      	adds	r3, #1
 8000910:	4619      	mov	r1, r3
 8000912:	2002      	movs	r0, #2
 8000914:	f7ff fdd4 	bl	80004c0 <write_register>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <CS43_Stop>:

void CS43_Stop(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 8000926:	2001      	movs	r0, #1
 8000928:	f7ff ff6f 	bl	800080a <CS43_SetMute>
  iData[1] = 0x04;
 800092c:	2304      	movs	r3, #4
 800092e:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	3301      	adds	r3, #1
 8000934:	4619      	mov	r1, r3
 8000936:	200e      	movs	r0, #14
 8000938:	f7ff fdc2 	bl	80004c0 <write_register>
	iData[1] = 0x9F;
 800093c:	239f      	movs	r3, #159	; 0x9f
 800093e:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	3301      	adds	r3, #1
 8000944:	4619      	mov	r1, r3
 8000946:	2002      	movs	r0, #2
 8000948:	f7ff fdba 	bl	80004c0 <write_register>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 800095c:	2300      	movs	r3, #0
 800095e:	77fb      	strb	r3, [r7, #31]
 8000960:	23ff      	movs	r3, #255	; 0xff
 8000962:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 8000964:	2300      	movs	r3, #0
 8000966:	77fb      	strb	r3, [r7, #31]
 8000968:	e00b      	b.n	8000982 <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 800096a:	7ffb      	ldrb	r3, [r7, #31]
 800096c:	4a1c      	ldr	r2, [pc, #112]	; (80009e0 <audioI2S_pllClockConfig+0x8c>)
 800096e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	d101      	bne.n	800097c <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 8000978:	7ffb      	ldrb	r3, [r7, #31]
 800097a:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 800097c:	7ffb      	ldrb	r3, [r7, #31]
 800097e:	3301      	adds	r3, #1
 8000980:	77fb      	strb	r3, [r7, #31]
 8000982:	7ffb      	ldrb	r3, [r7, #31]
 8000984:	2b07      	cmp	r3, #7
 8000986:	d9f0      	bls.n	800096a <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	4618      	mov	r0, r3
 800098e:	f006 f875 	bl	8006a7c <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000992:	7fbb      	ldrb	r3, [r7, #30]
 8000994:	f003 0307 	and.w	r3, r3, #7
 8000998:	2b00      	cmp	r3, #0
 800099a:	d111      	bne.n	80009c0 <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800099c:	2301      	movs	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80009a0:	7fbb      	ldrb	r3, [r7, #30]
 80009a2:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <audioI2S_pllClockConfig+0x90>)
 80009a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a8:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80009aa:	7fbb      	ldrb	r3, [r7, #30]
 80009ac:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <audioI2S_pllClockConfig+0x94>)
 80009ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b2:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4618      	mov	r0, r3
 80009ba:	f005 ff7d 	bl	80068b8 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80009be:	e00b      	b.n	80009d8 <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009c0:	2301      	movs	r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80009c4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80009c8:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80009ca:	2303      	movs	r3, #3
 80009cc:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4618      	mov	r0, r3
 80009d4:	f005 ff70 	bl	80068b8 <HAL_RCCEx_PeriphCLKConfig>
}
 80009d8:	bf00      	nop
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	0800dafc 	.word	0x0800dafc
 80009e4:	0800db1c 	.word	0x0800db1c
 80009e8:	0800db3c 	.word	0x0800db3c

080009ec <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <I2S3_freqUpdate+0x80>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <I2S3_freqUpdate+0x84>)
 80009fa:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <I2S3_freqUpdate+0x80>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	69da      	ldr	r2, [r3, #28]
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a0e:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a38:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a42:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <I2S3_freqUpdate+0x80>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f004 fa35 	bl	8004ec0 <HAL_I2S_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	e000      	b.n	8000a62 <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000a60:	2301      	movs	r3, #1
  }
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000100 	.word	0x20000100
 8000a70:	40003c00 	.word	0x40003c00

08000a74 <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <audioI2S_setHandle+0x1c>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000100 	.word	0x20000100

08000a94 <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff59 	bl	8000954 <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ffa2 	bl	80009ec <I2S3_freqUpdate>
  return true;
 8000aa8:	2301      	movs	r3, #1
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000abe:	f7ff fee3 	bl	8000888 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <audioI2S_play+0x38>)
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000acc:	d203      	bcs.n	8000ad6 <audioI2S_play+0x22>
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	085b      	lsrs	r3, r3, #1
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	e001      	b.n	8000ada <audioI2S_play+0x26>
 8000ad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ada:	461a      	mov	r2, r3
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	f004 fb2f 	bl	8005140 <HAL_I2S_Transmit_DMA>
  return true;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000100 	.word	0x20000100

08000af0 <audioI2S_pause>:

/**
 * @brief Pause audio out
 */
void audioI2S_pause(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000af4:	f7ff ff14 	bl	8000920 <CS43_Stop>
  HAL_I2S_DMAPause(hAudioI2S);
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <audioI2S_pause+0x18>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f004 fbc7 	bl	8005290 <HAL_I2S_DMAPause>
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000100 	.word	0x20000100

08000b0c <audioI2S_resume>:

/**
 * @brief Resume audio out
 */
void audioI2S_resume(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  CS43_Start();
 8000b10:	f7ff feba 	bl	8000888 <CS43_Start>
  HAL_I2S_DMAResume(hAudioI2S);
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <audioI2S_resume+0x18>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f004 fc1b 	bl	8005354 <HAL_I2S_DMAResume>
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000100 	.word	0x20000100

08000b28 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000b2c:	f7ff fef8 	bl	8000920 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <audioI2S_stop+0x18>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f004 fca1 	bl	800547c <HAL_I2S_DMAStop>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000100 	.word	0x20000100

08000b44 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_I2S_TxCpltCallback+0x20>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d101      	bne.n	8000b5a <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000b56:	f000 f929 	bl	8000dac <audioI2S_fullTransfer_Callback>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40003c00 	.word	0x40003c00

08000b68 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d101      	bne.n	8000b7e <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000b7a:	f000 f90b 	bl	8000d94 <audioI2S_halfTransfer_Callback>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40003c00 	.word	0x40003c00

08000b8c <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <wavPlayer_reset+0x1c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <wavPlayer_reset+0x20>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20001338 	.word	0x20001338
 8000bac:	20001340 	.word	0x20001340

08000bb0 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08e      	sub	sp, #56	; 0x38
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <wavPlayer_fileSelect+0x48>)
 8000bc2:	f00b fd2f 	bl	800c624 <f_open>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <wavPlayer_fileSelect+0x20>
  {
    return false;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e00e      	b.n	8000bee <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	f107 010c 	add.w	r1, r7, #12
 8000bd8:	222c      	movs	r2, #44	; 0x2c
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <wavPlayer_fileSelect+0x48>)
 8000bdc:	f00b fee0 	bl	800c9a0 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <wavPlayer_fileSelect+0x4c>)
 8000be4:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <wavPlayer_fileSelect+0x50>)
 8000bea:	6013      	str	r3, [r2, #0]
  return true;
 8000bec:	2301      	movs	r3, #1
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3738      	adds	r7, #56	; 0x38
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000104 	.word	0x20000104
 8000bfc:	20000334 	.word	0x20000334
 8000c00:	2000133c 	.word	0x2000133c

08000c04 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  isFinished = false;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <wavPlayer_play+0x48>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <wavPlayer_play+0x4c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff3e 	bl	8000a94 <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8000c18:	2100      	movs	r1, #0
 8000c1a:	480e      	ldr	r0, [pc, #56]	; (8000c54 <wavPlayer_play+0x50>)
 8000c1c:	f00c f8a7 	bl	800cd6e <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <wavPlayer_play+0x54>)
 8000c22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c26:	490d      	ldr	r1, [pc, #52]	; (8000c5c <wavPlayer_play+0x58>)
 8000c28:	480a      	ldr	r0, [pc, #40]	; (8000c54 <wavPlayer_play+0x50>)
 8000c2a:	f00b feb9 	bl	800c9a0 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <wavPlayer_play+0x5c>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <wavPlayer_play+0x54>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <wavPlayer_play+0x60>)
 8000c3a:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8000c3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <wavPlayer_play+0x58>)
 8000c42:	f7ff ff37 	bl	8000ab4 <audioI2S_play>
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20001344 	.word	0x20001344
 8000c50:	2000133c 	.word	0x2000133c
 8000c54:	20000104 	.word	0x20000104
 8000c58:	20001340 	.word	0x20001340
 8000c5c:	20000338 	.word	0x20000338
 8000c60:	20000334 	.word	0x20000334
 8000c64:	20001338 	.word	0x20001338

08000c68 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8000c6c:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <wavPlayer_process+0xc8>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d859      	bhi.n	8000d2a <wavPlayer_process+0xc2>
 8000c76:	a201      	add	r2, pc, #4	; (adr r2, 8000c7c <wavPlayer_process+0x14>)
 8000c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7c:	08000d29 	.word	0x08000d29
 8000c80:	08000c8d 	.word	0x08000c8d
 8000c84:	08000ccf 	.word	0x08000ccf
 8000c88:	08000d11 	.word	0x08000d11
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8000c8c:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <wavPlayer_process+0xcc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000c92:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <wavPlayer_process+0xc8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000c98:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <wavPlayer_process+0xcc>)
 8000c9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c9e:	4926      	ldr	r1, [pc, #152]	; (8000d38 <wavPlayer_process+0xd0>)
 8000ca0:	4826      	ldr	r0, [pc, #152]	; (8000d3c <wavPlayer_process+0xd4>)
 8000ca2:	f00b fe7d 	bl	800c9a0 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000ca6:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <wavPlayer_process+0xd8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cae:	d907      	bls.n	8000cc0 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <wavPlayer_process+0xd8>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <wavPlayer_process+0xcc>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <wavPlayer_process+0xd8>)
 8000cbc:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000cbe:	e034      	b.n	8000d2a <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <wavPlayer_process+0xd8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <wavPlayer_process+0xc8>)
 8000cc8:	2203      	movs	r2, #3
 8000cca:	701a      	strb	r2, [r3, #0]
    break;
 8000ccc:	e02d      	b.n	8000d2a <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <wavPlayer_process+0xcc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <wavPlayer_process+0xc8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <wavPlayer_process+0xcc>)
 8000cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ce0:	4918      	ldr	r1, [pc, #96]	; (8000d44 <wavPlayer_process+0xdc>)
 8000ce2:	4816      	ldr	r0, [pc, #88]	; (8000d3c <wavPlayer_process+0xd4>)
 8000ce4:	f00b fe5c 	bl	800c9a0 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <wavPlayer_process+0xd8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cf0:	d907      	bls.n	8000d02 <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <wavPlayer_process+0xd8>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <wavPlayer_process+0xcc>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <wavPlayer_process+0xd8>)
 8000cfe:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000d00:	e013      	b.n	8000d2a <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <wavPlayer_process+0xd8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <wavPlayer_process+0xc8>)
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	701a      	strb	r2, [r3, #0]
    break;
 8000d0e:	e00c      	b.n	8000d2a <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8000d10:	480a      	ldr	r0, [pc, #40]	; (8000d3c <wavPlayer_process+0xd4>)
 8000d12:	f00c f802 	bl	800cd1a <f_close>
    wavPlayer_reset();
 8000d16:	f7ff ff39 	bl	8000b8c <wavPlayer_reset>
    isFinished = true;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <wavPlayer_process+0xe0>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <wavPlayer_process+0xc8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
    break;
 8000d26:	e000      	b.n	8000d2a <wavPlayer_process+0xc2>
    break;
 8000d28:	bf00      	nop
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20001345 	.word	0x20001345
 8000d34:	20001340 	.word	0x20001340
 8000d38:	20000338 	.word	0x20000338
 8000d3c:	20000104 	.word	0x20000104
 8000d40:	20001338 	.word	0x20001338
 8000d44:	20000b38 	.word	0x20000b38
 8000d48:	20001344 	.word	0x20001344

08000d4c <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8000d50:	f7ff feea 	bl	8000b28 <audioI2S_stop>
  isFinished = true;
 8000d54:	4b02      	ldr	r3, [pc, #8]	; (8000d60 <wavPlayer_stop+0x14>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20001344 	.word	0x20001344

08000d64 <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  audioI2S_pause();
 8000d68:	f7ff fec2 	bl	8000af0 <audioI2S_pause>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <wavPlayer_resume>:
void wavPlayer_resume(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  audioI2S_resume();
 8000d74:	f7ff feca 	bl	8000b0c <audioI2S_resume>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return isFinished;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <wavPlayer_isFinished+0x14>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20001344 	.word	0x20001344

08000d94 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <audioI2S_halfTransfer_Callback+0x14>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	20001345 	.word	0x20001345

08000dac <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <audioI2S_fullTransfer_Callback+0x14>)
 8000db2:	2202      	movs	r2, #2
 8000db4:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	20001345 	.word	0x20001345

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b095      	sub	sp, #84	; 0x54
 8000dc8:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dca:	f000 fc1d 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dce:	f000 f8bf 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd2:	f000 f9a3 	bl	800111c <MX_GPIO_Init>
  MX_DMA_Init();
 8000dd6:	f000 f981 	bl	80010dc <MX_DMA_Init>
  MX_I2C1_Init();
 8000dda:	f000 f923 	bl	8001024 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000dde:	f000 f94f 	bl	8001080 <MX_I2S3_Init>
  MX_FATFS_Init();
 8000de2:	f006 fe8d 	bl	8007b00 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000de6:	f00c fa27 	bl	800d238 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1, MODE_I2S );
 8000dea:	4c51      	ldr	r4, [pc, #324]	; (8000f30 <main+0x16c>)
 8000dec:	2300      	movs	r3, #0
 8000dee:	9311      	str	r3, [sp, #68]	; 0x44
 8000df0:	4668      	mov	r0, sp
 8000df2:	f104 0310 	add.w	r3, r4, #16
 8000df6:	2244      	movs	r2, #68	; 0x44
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f00c fd69 	bl	800d8d0 <memcpy>
 8000dfe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e02:	f7ff fb97 	bl	8000534 <CS43_Init>
  CS43_SetVolume(250); //0-255
 8000e06:	20fa      	movs	r0, #250	; 0xfa
 8000e08:	f7ff fce4 	bl	80007d4 <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f7ff fc97 	bl	8000740 <CS43_Enable_RightLeft>

  audioI2S_setHandle(&hi2s3);
 8000e12:	4848      	ldr	r0, [pc, #288]	; (8000f34 <main+0x170>)
 8000e14:	f7ff fe2e 	bl	8000a74 <audioI2S_setHandle>

  bool isSdCardMounted =0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	71fb      	strb	r3, [r7, #7]
  bool pauseResumeToggle =0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	71bb      	strb	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e20:	f00c fa30 	bl	800d284 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state == APPLICATION_START)
 8000e24:	4b44      	ldr	r3, [pc, #272]	; (8000f38 <main+0x174>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d106      	bne.n	8000e3a <main+0x76>
    {
    	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e32:	4842      	ldr	r0, [pc, #264]	; (8000f3c <main+0x178>)
 8000e34:	f001 fb24 	bl	8002480 <HAL_GPIO_WritePin>
 8000e38:	e009      	b.n	8000e4e <main+0x8a>
    }
    else if(Appli_state == APPLICATION_DISCONNECT)
 8000e3a:	4b3f      	ldr	r3, [pc, #252]	; (8000f38 <main+0x174>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d105      	bne.n	8000e4e <main+0x8a>
    {
    	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e48:	483c      	ldr	r0, [pc, #240]	; (8000f3c <main+0x178>)
 8000e4a:	f001 fb19 	bl	8002480 <HAL_GPIO_WritePin>
    }
    if(Appli_state == APPLICATION_READY)
 8000e4e:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <main+0x174>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d1e4      	bne.n	8000e20 <main+0x5c>
    {
    	if(!isSdCardMounted)
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f083 0301 	eor.w	r3, r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d006      	beq.n	8000e70 <main+0xac>
    	{
    		f_mount(&USBHFatFS, (const TCHAR*)USBHPath,0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	4936      	ldr	r1, [pc, #216]	; (8000f40 <main+0x17c>)
 8000e66:	4837      	ldr	r0, [pc, #220]	; (8000f44 <main+0x180>)
 8000e68:	f00b fb96 	bl	800c598 <f_mount>
    		isSdCardMounted = 1;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	71fb      	strb	r3, [r7, #7]
    	}
    	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 8000e70:	2101      	movs	r1, #1
 8000e72:	4835      	ldr	r0, [pc, #212]	; (8000f48 <main+0x184>)
 8000e74:	f001 faec 	bl	8002450 <HAL_GPIO_ReadPin>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d0      	beq.n	8000e20 <main+0x5c>
    	{
    		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e84:	482d      	ldr	r0, [pc, #180]	; (8000f3c <main+0x178>)
 8000e86:	f001 fafb 	bl	8002480 <HAL_GPIO_WritePin>
    		HAL_Delay(500);
 8000e8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e8e:	f000 fc2d 	bl	80016ec <HAL_Delay>
    		wavPlayer_fileSelect(WAV_FILE1);
 8000e92:	482e      	ldr	r0, [pc, #184]	; (8000f4c <main+0x188>)
 8000e94:	f7ff fe8c 	bl	8000bb0 <wavPlayer_fileSelect>
    		wavPlayer_play();
 8000e98:	f7ff feb4 	bl	8000c04 <wavPlayer_play>

    		while(!wavPlayer_isFinished())
 8000e9c:	e035      	b.n	8000f0a <main+0x146>
    		{
    		  wavPlayer_process();
 8000e9e:	f7ff fee3 	bl	8000c68 <wavPlayer_process>
    		  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4828      	ldr	r0, [pc, #160]	; (8000f48 <main+0x184>)
 8000ea6:	f001 fad3 	bl	8002450 <HAL_GPIO_ReadPin>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d02c      	beq.n	8000f0a <main+0x146>
    		  {
    			  pauseResumeToggle^=1;
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	f083 0301 	eor.w	r3, r3, #1
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	bf14      	ite	ne
 8000ebc:	2301      	movne	r3, #1
 8000ebe:	2300      	moveq	r3, #0
 8000ec0:	71bb      	strb	r3, [r7, #6]
    			  if(pauseResumeToggle)
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00b      	beq.n	8000ee0 <main+0x11c>
    			  {
    				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ece:	481b      	ldr	r0, [pc, #108]	; (8000f3c <main+0x178>)
 8000ed0:	f001 fad6 	bl	8002480 <HAL_GPIO_WritePin>
    				  wavPlayer_pause();
 8000ed4:	f7ff ff46 	bl	8000d64 <wavPlayer_pause>
    				  HAL_Delay(200);
 8000ed8:	20c8      	movs	r0, #200	; 0xc8
 8000eda:	f000 fc07 	bl	80016ec <HAL_Delay>
 8000ede:	e014      	b.n	8000f0a <main+0x146>
    			  }
    			  else
    			  {
    				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee6:	4815      	ldr	r0, [pc, #84]	; (8000f3c <main+0x178>)
 8000ee8:	f001 faca 	bl	8002480 <HAL_GPIO_WritePin>
    				HAL_Delay(1000);
 8000eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef0:	f000 fbfc 	bl	80016ec <HAL_Delay>
    				if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4814      	ldr	r0, [pc, #80]	; (8000f48 <main+0x184>)
 8000ef8:	f001 faaa 	bl	8002450 <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <main+0x142>
    				{
    				  wavPlayer_stop();
 8000f02:	f7ff ff23 	bl	8000d4c <wavPlayer_stop>
    				}
    				{
    				  wavPlayer_resume();
 8000f06:	f7ff ff33 	bl	8000d70 <wavPlayer_resume>
    		while(!wavPlayer_isFinished())
 8000f0a:	f7ff ff37 	bl	8000d7c <wavPlayer_isFinished>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	f083 0301 	eor.w	r3, r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1c1      	bne.n	8000e9e <main+0xda>
    				}
    			  }
    		    }
    		  }
    		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f20:	4806      	ldr	r0, [pc, #24]	; (8000f3c <main+0x178>)
 8000f22:	f001 faad 	bl	8002480 <HAL_GPIO_WritePin>
    	    HAL_Delay(1000);
 8000f26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f2a:	f000 fbdf 	bl	80016ec <HAL_Delay>
    MX_USB_HOST_Process();
 8000f2e:	e777      	b.n	8000e20 <main+0x5c>
 8000f30:	2000138c 	.word	0x2000138c
 8000f34:	20001440 	.word	0x20001440
 8000f38:	20001380 	.word	0x20001380
 8000f3c:	40020c00 	.word	0x40020c00
 8000f40:	2000148c 	.word	0x2000148c
 8000f44:	200016c0 	.word	0x200016c0
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	0800daa4 	.word	0x0800daa4

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	; 0x50
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0320 	add.w	r3, r7, #32
 8000f5a:	2230      	movs	r2, #48	; 0x30
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f00c fcc4 	bl	800d8ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	4b28      	ldr	r3, [pc, #160]	; (800101c <SystemClock_Config+0xcc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	4a27      	ldr	r2, [pc, #156]	; (800101c <SystemClock_Config+0xcc>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f82:	6413      	str	r3, [r2, #64]	; 0x40
 8000f84:	4b25      	ldr	r3, [pc, #148]	; (800101c <SystemClock_Config+0xcc>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	4b22      	ldr	r3, [pc, #136]	; (8001020 <SystemClock_Config+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a21      	ldr	r2, [pc, #132]	; (8001020 <SystemClock_Config+0xd0>)
 8000f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <SystemClock_Config+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fac:	2301      	movs	r3, #1
 8000fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fc4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fce:	2307      	movs	r3, #7
 8000fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd2:	f107 0320 	add.w	r3, r7, #32
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f005 f80e 	bl	8005ff8 <HAL_RCC_OscConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fe2:	f000 f92d 	bl	8001240 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fea:	2302      	movs	r3, #2
 8000fec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ff6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2105      	movs	r1, #5
 8001004:	4618      	mov	r0, r3
 8001006:	f005 fa6f 	bl	80064e8 <HAL_RCC_ClockConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001010:	f000 f916 	bl	8001240 <Error_Handler>
  }
}
 8001014:	bf00      	nop
 8001016:	3750      	adds	r7, #80	; 0x50
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	40007000 	.word	0x40007000

08001024 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_I2C1_Init+0x50>)
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <MX_I2C1_Init+0x54>)
 800102c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_I2C1_Init+0x50>)
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <MX_I2C1_Init+0x58>)
 8001032:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_I2C1_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_I2C1_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_I2C1_Init+0x50>)
 8001042:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001046:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <MX_I2C1_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_I2C1_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <MX_I2C1_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_I2C1_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_I2C1_Init+0x50>)
 8001062:	f002 ff97 	bl	8003f94 <HAL_I2C_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800106c:	f000 f8e8 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	2000138c 	.word	0x2000138c
 8001078:	40005400 	.word	0x40005400
 800107c:	000186a0 	.word	0x000186a0

08001080 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_I2S3_Init+0x54>)
 8001086:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <MX_I2S3_Init+0x58>)
 8001088:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2S3_Init+0x54>)
 800108c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001090:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_I2S3_Init+0x54>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_I2S3_Init+0x54>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <MX_I2S3_Init+0x54>)
 80010a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_I2S3_Init+0x54>)
 80010a8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80010ac:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_I2S3_Init+0x54>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_I2S3_Init+0x54>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_I2S3_Init+0x54>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_I2S3_Init+0x54>)
 80010c2:	f003 fefd 	bl	8004ec0 <HAL_I2S_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80010cc:	f000 f8b8 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20001440 	.word	0x20001440
 80010d8:	40003c00 	.word	0x40003c00

080010dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_DMA_Init+0x3c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <MX_DMA_Init+0x3c>)
 80010ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_DMA_Init+0x3c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2010      	movs	r0, #16
 8001104:	f000 fbf1 	bl	80018ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001108:	2010      	movs	r0, #16
 800110a:	f000 fc0a 	bl	8001922 <HAL_NVIC_EnableIRQ>

}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b3e      	ldr	r3, [pc, #248]	; (8001230 <MX_GPIO_Init+0x114>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a3d      	ldr	r2, [pc, #244]	; (8001230 <MX_GPIO_Init+0x114>)
 800113c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <MX_GPIO_Init+0x114>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b37      	ldr	r3, [pc, #220]	; (8001230 <MX_GPIO_Init+0x114>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a36      	ldr	r2, [pc, #216]	; (8001230 <MX_GPIO_Init+0x114>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b34      	ldr	r3, [pc, #208]	; (8001230 <MX_GPIO_Init+0x114>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b30      	ldr	r3, [pc, #192]	; (8001230 <MX_GPIO_Init+0x114>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a2f      	ldr	r2, [pc, #188]	; (8001230 <MX_GPIO_Init+0x114>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <MX_GPIO_Init+0x114>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b29      	ldr	r3, [pc, #164]	; (8001230 <MX_GPIO_Init+0x114>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a28      	ldr	r2, [pc, #160]	; (8001230 <MX_GPIO_Init+0x114>)
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <MX_GPIO_Init+0x114>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <MX_GPIO_Init+0x114>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a21      	ldr	r2, [pc, #132]	; (8001230 <MX_GPIO_Init+0x114>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <MX_GPIO_Init+0x114>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2101      	movs	r1, #1
 80011c2:	481c      	ldr	r0, [pc, #112]	; (8001234 <MX_GPIO_Init+0x118>)
 80011c4:	f001 f95c 	bl	8002480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80011c8:	2200      	movs	r2, #0
 80011ca:	f24f 0110 	movw	r1, #61456	; 0xf010
 80011ce:	481a      	ldr	r0, [pc, #104]	; (8001238 <MX_GPIO_Init+0x11c>)
 80011d0:	f001 f956 	bl	8002480 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d4:	2301      	movs	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	4812      	ldr	r0, [pc, #72]	; (8001234 <MX_GPIO_Init+0x118>)
 80011ec:	f000 ff94 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f0:	2301      	movs	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	480e      	ldr	r0, [pc, #56]	; (800123c <MX_GPIO_Init+0x120>)
 8001204:	f000 ff88 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001208:	f24f 0310 	movw	r3, #61456	; 0xf010
 800120c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_GPIO_Init+0x11c>)
 8001222:	f000 ff79 	bl	8002118 <HAL_GPIO_Init>

}
 8001226:	bf00      	nop
 8001228:	3728      	adds	r7, #40	; 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40020800 	.word	0x40020800
 8001238:	40020c00 	.word	0x40020c00
 800123c:	40020000 	.word	0x40020000

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>
	...

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <HAL_MspInit+0x4c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <HAL_MspInit+0x4c>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_MspInit+0x4c>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_MspInit+0x4c>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800

0800129c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a19      	ldr	r2, [pc, #100]	; (8001320 <HAL_I2C_MspInit+0x84>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d12c      	bne.n	8001318 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_I2C_MspInit+0x88>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a17      	ldr	r2, [pc, #92]	; (8001324 <HAL_I2C_MspInit+0x88>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_I2C_MspInit+0x88>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80012da:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e0:	2312      	movs	r3, #18
 80012e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ec:	2304      	movs	r3, #4
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	480c      	ldr	r0, [pc, #48]	; (8001328 <HAL_I2C_MspInit+0x8c>)
 80012f8:	f000 ff0e 	bl	8002118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_I2C_MspInit+0x88>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_I2C_MspInit+0x88>)
 8001306:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_I2C_MspInit+0x88>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	; 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40005400 	.word	0x40005400
 8001324:	40023800 	.word	0x40023800
 8001328:	40020400 	.word	0x40020400

0800132c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	; 0x38
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a4e      	ldr	r2, [pc, #312]	; (8001490 <HAL_I2S_MspInit+0x164>)
 8001358:	4293      	cmp	r3, r2
 800135a:	f040 8095 	bne.w	8001488 <HAL_I2S_MspInit+0x15c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800135e:	2301      	movs	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 8001362:	f240 130f 	movw	r3, #271	; 0x10f
 8001366:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8001368:	2306      	movs	r3, #6
 800136a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4618      	mov	r0, r3
 8001372:	f005 faa1 	bl	80068b8 <HAL_RCCEx_PeriphCLKConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 800137c:	f7ff ff60 	bl	8001240 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	4b43      	ldr	r3, [pc, #268]	; (8001494 <HAL_I2S_MspInit+0x168>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a42      	ldr	r2, [pc, #264]	; (8001494 <HAL_I2S_MspInit+0x168>)
 800138a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b40      	ldr	r3, [pc, #256]	; (8001494 <HAL_I2S_MspInit+0x168>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	4b3c      	ldr	r3, [pc, #240]	; (8001494 <HAL_I2S_MspInit+0x168>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	4a3b      	ldr	r2, [pc, #236]	; (8001494 <HAL_I2S_MspInit+0x168>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6313      	str	r3, [r2, #48]	; 0x30
 80013ac:	4b39      	ldr	r3, [pc, #228]	; (8001494 <HAL_I2S_MspInit+0x168>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	4b35      	ldr	r3, [pc, #212]	; (8001494 <HAL_I2S_MspInit+0x168>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4a34      	ldr	r2, [pc, #208]	; (8001494 <HAL_I2S_MspInit+0x168>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6313      	str	r3, [r2, #48]	; 0x30
 80013c8:	4b32      	ldr	r3, [pc, #200]	; (8001494 <HAL_I2S_MspInit+0x168>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013d4:	2310      	movs	r3, #16
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013e4:	2306      	movs	r3, #6
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ec:	4619      	mov	r1, r3
 80013ee:	482a      	ldr	r0, [pc, #168]	; (8001498 <HAL_I2S_MspInit+0x16c>)
 80013f0:	f000 fe92 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80013f4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001406:	2306      	movs	r3, #6
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140e:	4619      	mov	r1, r3
 8001410:	4822      	ldr	r0, [pc, #136]	; (800149c <HAL_I2S_MspInit+0x170>)
 8001412:	f000 fe81 	bl	8002118 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001416:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <HAL_I2S_MspInit+0x174>)
 8001418:	4a22      	ldr	r2, [pc, #136]	; (80014a4 <HAL_I2S_MspInit+0x178>)
 800141a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800141c:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <HAL_I2S_MspInit+0x174>)
 800141e:	2200      	movs	r2, #0
 8001420:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001422:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <HAL_I2S_MspInit+0x174>)
 8001424:	2240      	movs	r2, #64	; 0x40
 8001426:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <HAL_I2S_MspInit+0x174>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <HAL_I2S_MspInit+0x174>)
 8001430:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001434:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <HAL_I2S_MspInit+0x174>)
 8001438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800143c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_I2S_MspInit+0x174>)
 8001440:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001444:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <HAL_I2S_MspInit+0x174>)
 8001448:	f44f 7280 	mov.w	r2, #256	; 0x100
 800144c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_I2S_MspInit+0x174>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_I2S_MspInit+0x174>)
 8001456:	2204      	movs	r2, #4
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_I2S_MspInit+0x174>)
 800145c:	2203      	movs	r2, #3
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_I2S_MspInit+0x174>)
 8001462:	2200      	movs	r2, #0
 8001464:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_I2S_MspInit+0x174>)
 8001468:	2200      	movs	r2, #0
 800146a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <HAL_I2S_MspInit+0x174>)
 800146e:	f000 fa73 	bl	8001958 <HAL_DMA_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 8001478:	f7ff fee2 	bl	8001240 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_I2S_MspInit+0x174>)
 8001480:	639a      	str	r2, [r3, #56]	; 0x38
 8001482:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_I2S_MspInit+0x174>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001488:	bf00      	nop
 800148a:	3738      	adds	r7, #56	; 0x38
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40003c00 	.word	0x40003c00
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000
 800149c:	40020800 	.word	0x40020800
 80014a0:	200013e0 	.word	0x200013e0
 80014a4:	40026088 	.word	0x40026088

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <NMI_Handler+0x4>

080014ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <MemManage_Handler+0x4>

080014ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f4:	f000 f8da 	bl	80016ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}

080014fc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <DMA1_Stream5_IRQHandler+0x10>)
 8001502:	f000 fb9f 	bl	8001c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200013e0 	.word	0x200013e0

08001510 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <OTG_FS_IRQHandler+0x10>)
 8001516:	f001 fa37 	bl	8002988 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20001ccc 	.word	0x20001ccc

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f00c f982 	bl	800d85c <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20020000 	.word	0x20020000
 8001584:	00002000 	.word	0x00002000
 8001588:	20001348 	.word	0x20001348
 800158c:	20001fe0 	.word	0x20001fe0

08001590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <SystemInit+0x20>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <SystemInit+0x20>)
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ba:	490e      	ldr	r1, [pc, #56]	; (80015f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015bc:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c0:	e002      	b.n	80015c8 <LoopCopyDataInit>

080015c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c6:	3304      	adds	r3, #4

080015c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015cc:	d3f9      	bcc.n	80015c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ce:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015d0:	4c0b      	ldr	r4, [pc, #44]	; (8001600 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d4:	e001      	b.n	80015da <LoopFillZerobss>

080015d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d8:	3204      	adds	r2, #4

080015da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015dc:	d3fb      	bcc.n	80015d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015de:	f7ff ffd7 	bl	8001590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e2:	f00c f941 	bl	800d868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e6:	f7ff fbed 	bl	8000dc4 <main>
  bx  lr    
 80015ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80015f8:	0800dc20 	.word	0x0800dc20
  ldr r2, =_sbss
 80015fc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001600:	20001fe0 	.word	0x20001fe0

08001604 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC_IRQHandler>
	...

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_Init+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <HAL_Init+0x40>)
 8001612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001616:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_Init+0x40>)
 800161e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001622:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_Init+0x40>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001630:	2003      	movs	r0, #3
 8001632:	f000 f94f 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001636:	200f      	movs	r0, #15
 8001638:	f000 f808 	bl	800164c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800163c:	f7ff fe06 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023c00 	.word	0x40023c00

0800164c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_InitTick+0x54>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_InitTick+0x58>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001662:	fbb3 f3f1 	udiv	r3, r3, r1
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f967 	bl	800193e <HAL_SYSTICK_Config>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e00e      	b.n	8001698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d80a      	bhi.n	8001696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f000 f92f 	bl	80018ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <HAL_InitTick+0x5c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x20>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_IncTick+0x24>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_IncTick+0x24>)
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20001488 	.word	0x20001488

080016d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <HAL_GetTick+0x14>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20001488 	.word	0x20001488

080016ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f4:	f7ff ffee 	bl	80016d4 <HAL_GetTick>
 80016f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001704:	d005      	beq.n	8001712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_Delay+0x44>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4413      	add	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001712:	bf00      	nop
 8001714:	f7ff ffde 	bl	80016d4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	429a      	cmp	r2, r3
 8001722:	d8f7      	bhi.n	8001714 <HAL_Delay+0x28>
  {
  }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008

08001734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001750:	4013      	ands	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800175c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <__NVIC_SetPriorityGrouping+0x44>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <__NVIC_GetPriorityGrouping+0x18>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	0a1b      	lsrs	r3, r3, #8
 8001786:	f003 0307 	and.w	r3, r3, #7
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db0b      	blt.n	80017c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	4907      	ldr	r1, [pc, #28]	; (80017d0 <__NVIC_EnableIRQ+0x38>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	2001      	movs	r0, #1
 80017ba:	fa00 f202 	lsl.w	r2, r0, r2
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100

080017d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	db0a      	blt.n	80017fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	490c      	ldr	r1, [pc, #48]	; (8001820 <__NVIC_SetPriority+0x4c>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	0112      	lsls	r2, r2, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017fc:	e00a      	b.n	8001814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4908      	ldr	r1, [pc, #32]	; (8001824 <__NVIC_SetPriority+0x50>)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	3b04      	subs	r3, #4
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	440b      	add	r3, r1
 8001812:	761a      	strb	r2, [r3, #24]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000e100 	.word	0xe000e100
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f1c3 0307 	rsb	r3, r3, #7
 8001842:	2b04      	cmp	r3, #4
 8001844:	bf28      	it	cs
 8001846:	2304      	movcs	r3, #4
 8001848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3304      	adds	r3, #4
 800184e:	2b06      	cmp	r3, #6
 8001850:	d902      	bls.n	8001858 <NVIC_EncodePriority+0x30>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3b03      	subs	r3, #3
 8001856:	e000      	b.n	800185a <NVIC_EncodePriority+0x32>
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	f04f 32ff 	mov.w	r2, #4294967295
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001870:	f04f 31ff 	mov.w	r1, #4294967295
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43d9      	mvns	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	4313      	orrs	r3, r2
         );
}
 8001882:	4618      	mov	r0, r3
 8001884:	3724      	adds	r7, #36	; 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a0:	d301      	bcc.n	80018a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00f      	b.n	80018c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <SysTick_Config+0x40>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ae:	210f      	movs	r1, #15
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f7ff ff8e 	bl	80017d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <SysTick_Config+0x40>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <SysTick_Config+0x40>)
 80018c0:	2207      	movs	r2, #7
 80018c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	e000e010 	.word	0xe000e010

080018d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff29 	bl	8001734 <__NVIC_SetPriorityGrouping>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff3e 	bl	800177c <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ff8e 	bl	8001828 <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff5d 	bl	80017d4 <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff31 	bl	8001798 <__NVIC_EnableIRQ>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffa2 	bl	8001890 <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff feb6 	bl	80016d4 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e099      	b.n	8001aa8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2202      	movs	r2, #2
 8001978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0201 	bic.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001994:	e00f      	b.n	80019b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001996:	f7ff fe9d 	bl	80016d4 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d908      	bls.n	80019b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2220      	movs	r2, #32
 80019a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2203      	movs	r2, #3
 80019ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e078      	b.n	8001aa8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1e8      	bne.n	8001996 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <HAL_DMA_Init+0x158>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d107      	bne.n	8001a20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f023 0307 	bic.w	r3, r3, #7
 8001a36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d117      	bne.n	8001a7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00e      	beq.n	8001a7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fadf 	bl	8002020 <DMA_CheckFifoParam>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2240      	movs	r2, #64	; 0x40
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a76:	2301      	movs	r3, #1
 8001a78:	e016      	b.n	8001aa8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 fa96 	bl	8001fb4 <DMA_CalcBaseAndBitshift>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	223f      	movs	r2, #63	; 0x3f
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	f010803f 	.word	0xf010803f

08001ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_DMA_Start_IT+0x26>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e040      	b.n	8001b5c <HAL_DMA_Start_IT+0xa8>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d12f      	bne.n	8001b4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2202      	movs	r2, #2
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 fa28 	bl	8001f58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0c:	223f      	movs	r2, #63	; 0x3f
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0216 	orr.w	r2, r2, #22
 8001b22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0208 	orr.w	r2, r2, #8
 8001b3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	e005      	b.n	8001b5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b56:	2302      	movs	r3, #2
 8001b58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b72:	f7ff fdaf 	bl	80016d4 <HAL_GetTick>
 8001b76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d008      	beq.n	8001b96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e052      	b.n	8001c3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0216 	bic.w	r2, r2, #22
 8001ba4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695a      	ldr	r2, [r3, #20]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bb4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d103      	bne.n	8001bc6 <HAL_DMA_Abort+0x62>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0208 	bic.w	r2, r2, #8
 8001bd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0201 	bic.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be6:	e013      	b.n	8001c10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be8:	f7ff fd74 	bl	80016d4 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b05      	cmp	r3, #5
 8001bf4:	d90c      	bls.n	8001c10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2203      	movs	r2, #3
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e015      	b.n	8001c3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1e4      	bne.n	8001be8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c22:	223f      	movs	r2, #63	; 0x3f
 8001c24:	409a      	lsls	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c50:	4b92      	ldr	r3, [pc, #584]	; (8001e9c <HAL_DMA_IRQHandler+0x258>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a92      	ldr	r2, [pc, #584]	; (8001ea0 <HAL_DMA_IRQHandler+0x25c>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	0a9b      	lsrs	r3, r3, #10
 8001c5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	2208      	movs	r2, #8
 8001c70:	409a      	lsls	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d01a      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0204 	bic.w	r2, r2, #4
 8001c96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca8:	f043 0201 	orr.w	r2, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d012      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00b      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cde:	f043 0202 	orr.w	r2, r3, #2
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cea:	2204      	movs	r2, #4
 8001cec:	409a      	lsls	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d012      	beq.n	8001d1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00b      	beq.n	8001d1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d08:	2204      	movs	r2, #4
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d14:	f043 0204 	orr.w	r2, r3, #4
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d20:	2210      	movs	r2, #16
 8001d22:	409a      	lsls	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d043      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d03c      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	2210      	movs	r2, #16
 8001d40:	409a      	lsls	r2, r3
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d018      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d108      	bne.n	8001d74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d024      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	4798      	blx	r3
 8001d72:	e01f      	b.n	8001db4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d01b      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
 8001d84:	e016      	b.n	8001db4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d107      	bne.n	8001da4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0208 	bic.w	r2, r2, #8
 8001da2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db8:	2220      	movs	r2, #32
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 808e 	beq.w	8001ee2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 8086 	beq.w	8001ee2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	2220      	movs	r2, #32
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	d136      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0216 	bic.w	r2, r2, #22
 8001dfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695a      	ldr	r2, [r3, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d103      	bne.n	8001e1e <HAL_DMA_IRQHandler+0x1da>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d007      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0208 	bic.w	r2, r2, #8
 8001e2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e32:	223f      	movs	r2, #63	; 0x3f
 8001e34:	409a      	lsls	r2, r3
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d07d      	beq.n	8001f4e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	4798      	blx	r3
        }
        return;
 8001e5a:	e078      	b.n	8001f4e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d01c      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d108      	bne.n	8001e8a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d030      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	4798      	blx	r3
 8001e88:	e02b      	b.n	8001ee2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d027      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
 8001e9a:	e022      	b.n	8001ee2 <HAL_DMA_IRQHandler+0x29e>
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0210 	bic.w	r2, r2, #16
 8001ec0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d032      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d022      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2205      	movs	r2, #5
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3301      	adds	r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d307      	bcc.n	8001f2a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f2      	bne.n	8001f0e <HAL_DMA_IRQHandler+0x2ca>
 8001f28:	e000      	b.n	8001f2c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f2a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	4798      	blx	r3
 8001f4c:	e000      	b.n	8001f50 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f4e:	bf00      	nop
    }
  }
}
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop

08001f58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b40      	cmp	r3, #64	; 0x40
 8001f84:	d108      	bne.n	8001f98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f96:	e007      	b.n	8001fa8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	60da      	str	r2, [r3, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	3b10      	subs	r3, #16
 8001fc4:	4a14      	ldr	r2, [pc, #80]	; (8002018 <DMA_CalcBaseAndBitshift+0x64>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fce:	4a13      	ldr	r2, [pc, #76]	; (800201c <DMA_CalcBaseAndBitshift+0x68>)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d909      	bls.n	8001ff6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fea:	f023 0303 	bic.w	r3, r3, #3
 8001fee:	1d1a      	adds	r2, r3, #4
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ff4:	e007      	b.n	8002006 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ffe:	f023 0303 	bic.w	r3, r3, #3
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	aaaaaaab 	.word	0xaaaaaaab
 800201c:	0800db74 	.word	0x0800db74

08002020 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d11f      	bne.n	800207a <DMA_CheckFifoParam+0x5a>
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b03      	cmp	r3, #3
 800203e:	d856      	bhi.n	80020ee <DMA_CheckFifoParam+0xce>
 8002040:	a201      	add	r2, pc, #4	; (adr r2, 8002048 <DMA_CheckFifoParam+0x28>)
 8002042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002046:	bf00      	nop
 8002048:	08002059 	.word	0x08002059
 800204c:	0800206b 	.word	0x0800206b
 8002050:	08002059 	.word	0x08002059
 8002054:	080020ef 	.word	0x080020ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d046      	beq.n	80020f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002068:	e043      	b.n	80020f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002072:	d140      	bne.n	80020f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002078:	e03d      	b.n	80020f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002082:	d121      	bne.n	80020c8 <DMA_CheckFifoParam+0xa8>
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d837      	bhi.n	80020fa <DMA_CheckFifoParam+0xda>
 800208a:	a201      	add	r2, pc, #4	; (adr r2, 8002090 <DMA_CheckFifoParam+0x70>)
 800208c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002090:	080020a1 	.word	0x080020a1
 8002094:	080020a7 	.word	0x080020a7
 8002098:	080020a1 	.word	0x080020a1
 800209c:	080020b9 	.word	0x080020b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
      break;
 80020a4:	e030      	b.n	8002108 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d025      	beq.n	80020fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020b6:	e022      	b.n	80020fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020c0:	d11f      	bne.n	8002102 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020c6:	e01c      	b.n	8002102 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d903      	bls.n	80020d6 <DMA_CheckFifoParam+0xb6>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d003      	beq.n	80020dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020d4:	e018      	b.n	8002108 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
      break;
 80020da:	e015      	b.n	8002108 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00e      	beq.n	8002106 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
      break;
 80020ec:	e00b      	b.n	8002106 <DMA_CheckFifoParam+0xe6>
      break;
 80020ee:	bf00      	nop
 80020f0:	e00a      	b.n	8002108 <DMA_CheckFifoParam+0xe8>
      break;
 80020f2:	bf00      	nop
 80020f4:	e008      	b.n	8002108 <DMA_CheckFifoParam+0xe8>
      break;
 80020f6:	bf00      	nop
 80020f8:	e006      	b.n	8002108 <DMA_CheckFifoParam+0xe8>
      break;
 80020fa:	bf00      	nop
 80020fc:	e004      	b.n	8002108 <DMA_CheckFifoParam+0xe8>
      break;
 80020fe:	bf00      	nop
 8002100:	e002      	b.n	8002108 <DMA_CheckFifoParam+0xe8>
      break;   
 8002102:	bf00      	nop
 8002104:	e000      	b.n	8002108 <DMA_CheckFifoParam+0xe8>
      break;
 8002106:	bf00      	nop
    }
  } 
  
  return status; 
 8002108:	7bfb      	ldrb	r3, [r7, #15]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop

08002118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	e16b      	b.n	800240c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002134:	2201      	movs	r2, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	429a      	cmp	r2, r3
 800214e:	f040 815a 	bne.w	8002406 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d005      	beq.n	800216a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002166:	2b02      	cmp	r3, #2
 8002168:	d130      	bne.n	80021cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	2203      	movs	r2, #3
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a0:	2201      	movs	r2, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 0201 	and.w	r2, r3, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d017      	beq.n	8002208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d123      	bne.n	800225c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	08da      	lsrs	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3208      	adds	r2, #8
 800221c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	220f      	movs	r2, #15
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	08da      	lsrs	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3208      	adds	r2, #8
 8002256:	69b9      	ldr	r1, [r7, #24]
 8002258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0203 	and.w	r2, r3, #3
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80b4 	beq.w	8002406 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	4b60      	ldr	r3, [pc, #384]	; (8002424 <HAL_GPIO_Init+0x30c>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	4a5f      	ldr	r2, [pc, #380]	; (8002424 <HAL_GPIO_Init+0x30c>)
 80022a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ac:	6453      	str	r3, [r2, #68]	; 0x44
 80022ae:	4b5d      	ldr	r3, [pc, #372]	; (8002424 <HAL_GPIO_Init+0x30c>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ba:	4a5b      	ldr	r2, [pc, #364]	; (8002428 <HAL_GPIO_Init+0x310>)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	3302      	adds	r3, #2
 80022c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	220f      	movs	r2, #15
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a52      	ldr	r2, [pc, #328]	; (800242c <HAL_GPIO_Init+0x314>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d02b      	beq.n	800233e <HAL_GPIO_Init+0x226>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a51      	ldr	r2, [pc, #324]	; (8002430 <HAL_GPIO_Init+0x318>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d025      	beq.n	800233a <HAL_GPIO_Init+0x222>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a50      	ldr	r2, [pc, #320]	; (8002434 <HAL_GPIO_Init+0x31c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d01f      	beq.n	8002336 <HAL_GPIO_Init+0x21e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4f      	ldr	r2, [pc, #316]	; (8002438 <HAL_GPIO_Init+0x320>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d019      	beq.n	8002332 <HAL_GPIO_Init+0x21a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4e      	ldr	r2, [pc, #312]	; (800243c <HAL_GPIO_Init+0x324>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <HAL_GPIO_Init+0x216>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4d      	ldr	r2, [pc, #308]	; (8002440 <HAL_GPIO_Init+0x328>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00d      	beq.n	800232a <HAL_GPIO_Init+0x212>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4c      	ldr	r2, [pc, #304]	; (8002444 <HAL_GPIO_Init+0x32c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d007      	beq.n	8002326 <HAL_GPIO_Init+0x20e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4b      	ldr	r2, [pc, #300]	; (8002448 <HAL_GPIO_Init+0x330>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_GPIO_Init+0x20a>
 800231e:	2307      	movs	r3, #7
 8002320:	e00e      	b.n	8002340 <HAL_GPIO_Init+0x228>
 8002322:	2308      	movs	r3, #8
 8002324:	e00c      	b.n	8002340 <HAL_GPIO_Init+0x228>
 8002326:	2306      	movs	r3, #6
 8002328:	e00a      	b.n	8002340 <HAL_GPIO_Init+0x228>
 800232a:	2305      	movs	r3, #5
 800232c:	e008      	b.n	8002340 <HAL_GPIO_Init+0x228>
 800232e:	2304      	movs	r3, #4
 8002330:	e006      	b.n	8002340 <HAL_GPIO_Init+0x228>
 8002332:	2303      	movs	r3, #3
 8002334:	e004      	b.n	8002340 <HAL_GPIO_Init+0x228>
 8002336:	2302      	movs	r3, #2
 8002338:	e002      	b.n	8002340 <HAL_GPIO_Init+0x228>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_GPIO_Init+0x228>
 800233e:	2300      	movs	r3, #0
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	f002 0203 	and.w	r2, r2, #3
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	4093      	lsls	r3, r2
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002350:	4935      	ldr	r1, [pc, #212]	; (8002428 <HAL_GPIO_Init+0x310>)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	3302      	adds	r3, #2
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800235e:	4b3b      	ldr	r3, [pc, #236]	; (800244c <HAL_GPIO_Init+0x334>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002382:	4a32      	ldr	r2, [pc, #200]	; (800244c <HAL_GPIO_Init+0x334>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002388:	4b30      	ldr	r3, [pc, #192]	; (800244c <HAL_GPIO_Init+0x334>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ac:	4a27      	ldr	r2, [pc, #156]	; (800244c <HAL_GPIO_Init+0x334>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <HAL_GPIO_Init+0x334>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023d6:	4a1d      	ldr	r2, [pc, #116]	; (800244c <HAL_GPIO_Init+0x334>)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_GPIO_Init+0x334>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002400:	4a12      	ldr	r2, [pc, #72]	; (800244c <HAL_GPIO_Init+0x334>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3301      	adds	r3, #1
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	2b0f      	cmp	r3, #15
 8002410:	f67f ae90 	bls.w	8002134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	40013800 	.word	0x40013800
 800242c:	40020000 	.word	0x40020000
 8002430:	40020400 	.word	0x40020400
 8002434:	40020800 	.word	0x40020800
 8002438:	40020c00 	.word	0x40020c00
 800243c:	40021000 	.word	0x40021000
 8002440:	40021400 	.word	0x40021400
 8002444:	40021800 	.word	0x40021800
 8002448:	40021c00 	.word	0x40021c00
 800244c:	40013c00 	.word	0x40013c00

08002450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	887b      	ldrh	r3, [r7, #2]
 8002462:	4013      	ands	r3, r2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e001      	b.n	8002472 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	807b      	strh	r3, [r7, #2]
 800248c:	4613      	mov	r3, r2
 800248e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002490:	787b      	ldrb	r3, [r7, #1]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002496:	887a      	ldrh	r2, [r7, #2]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800249c:	e003      	b.n	80024a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800249e:	887b      	ldrh	r3, [r7, #2]
 80024a0:	041a      	lsls	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	619a      	str	r2, [r3, #24]
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80024b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b4:	b08f      	sub	sp, #60	; 0x3c
 80024b6:	af0a      	add	r7, sp, #40	; 0x28
 80024b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e054      	b.n	800256e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f00a ff08 	bl	800d2f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2203      	movs	r2, #3
 80024e8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f004 fbb6 	bl	8006c74 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	687e      	ldr	r6, [r7, #4]
 8002510:	466d      	mov	r5, sp
 8002512:	f106 0410 	add.w	r4, r6, #16
 8002516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002522:	e885 0003 	stmia.w	r5, {r0, r1}
 8002526:	1d33      	adds	r3, r6, #4
 8002528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800252a:	6838      	ldr	r0, [r7, #0]
 800252c:	f004 fb30 	bl	8006b90 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	4618      	mov	r0, r3
 8002538:	f004 fbad 	bl	8006c96 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	687e      	ldr	r6, [r7, #4]
 8002544:	466d      	mov	r5, sp
 8002546:	f106 0410 	add.w	r4, r6, #16
 800254a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002552:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002556:	e885 0003 	stmia.w	r5, {r0, r1}
 800255a:	1d33      	adds	r3, r6, #4
 800255c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800255e:	6838      	ldr	r0, [r7, #0]
 8002560:	f004 fd14 	bl	8006f8c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002576 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002576:	b590      	push	{r4, r7, lr}
 8002578:	b089      	sub	sp, #36	; 0x24
 800257a:	af04      	add	r7, sp, #16
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	4608      	mov	r0, r1
 8002580:	4611      	mov	r1, r2
 8002582:	461a      	mov	r2, r3
 8002584:	4603      	mov	r3, r0
 8002586:	70fb      	strb	r3, [r7, #3]
 8002588:	460b      	mov	r3, r1
 800258a:	70bb      	strb	r3, [r7, #2]
 800258c:	4613      	mov	r3, r2
 800258e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_HCD_HC_Init+0x28>
 800259a:	2302      	movs	r3, #2
 800259c:	e076      	b.n	800268c <HAL_HCD_HC_Init+0x116>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	333d      	adds	r3, #61	; 0x3d
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	3338      	adds	r3, #56	; 0x38
 80025c6:	787a      	ldrb	r2, [r7, #1]
 80025c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	3340      	adds	r3, #64	; 0x40
 80025d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80025da:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3339      	adds	r3, #57	; 0x39
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	333f      	adds	r3, #63	; 0x3f
 80025fc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002600:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	78ba      	ldrb	r2, [r7, #2]
 8002606:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800260a:	b2d0      	uxtb	r0, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	333a      	adds	r3, #58	; 0x3a
 8002618:	4602      	mov	r2, r0
 800261a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800261c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002620:	2b00      	cmp	r3, #0
 8002622:	da09      	bge.n	8002638 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	212c      	movs	r1, #44	; 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	333b      	adds	r3, #59	; 0x3b
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	e008      	b.n	800264a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	212c      	movs	r1, #44	; 0x2c
 800263e:	fb01 f303 	mul.w	r3, r1, r3
 8002642:	4413      	add	r3, r2
 8002644:	333b      	adds	r3, #59	; 0x3b
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	333c      	adds	r3, #60	; 0x3c
 8002658:	f897 2020 	ldrb.w	r2, [r7, #32]
 800265c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	787c      	ldrb	r4, [r7, #1]
 8002664:	78ba      	ldrb	r2, [r7, #2]
 8002666:	78f9      	ldrb	r1, [r7, #3]
 8002668:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800266a:	9302      	str	r3, [sp, #8]
 800266c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	4623      	mov	r3, r4
 800267a:	f004 fe01 	bl	8007280 <USB_HC_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	bd90      	pop	{r4, r7, pc}

08002694 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_HCD_HC_Halt+0x1e>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e00f      	b.n	80026d2 <HAL_HCD_HC_Halt+0x3e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f005 f83d 	bl	8007742 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	4608      	mov	r0, r1
 80026e6:	4611      	mov	r1, r2
 80026e8:	461a      	mov	r2, r3
 80026ea:	4603      	mov	r3, r0
 80026ec:	70fb      	strb	r3, [r7, #3]
 80026ee:	460b      	mov	r3, r1
 80026f0:	70bb      	strb	r3, [r7, #2]
 80026f2:	4613      	mov	r3, r2
 80026f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	333b      	adds	r3, #59	; 0x3b
 8002704:	78ba      	ldrb	r2, [r7, #2]
 8002706:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	212c      	movs	r1, #44	; 0x2c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	333f      	adds	r3, #63	; 0x3f
 8002716:	787a      	ldrb	r2, [r7, #1]
 8002718:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800271a:	7c3b      	ldrb	r3, [r7, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d112      	bne.n	8002746 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	3342      	adds	r3, #66	; 0x42
 800272e:	2203      	movs	r2, #3
 8002730:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	333d      	adds	r3, #61	; 0x3d
 8002740:	7f3a      	ldrb	r2, [r7, #28]
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	e008      	b.n	8002758 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	3342      	adds	r3, #66	; 0x42
 8002754:	2202      	movs	r2, #2
 8002756:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	2b03      	cmp	r3, #3
 800275c:	f200 80c6 	bhi.w	80028ec <HAL_HCD_HC_SubmitRequest+0x210>
 8002760:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	08002779 	.word	0x08002779
 800276c:	080028d9 	.word	0x080028d9
 8002770:	080027dd 	.word	0x080027dd
 8002774:	0800285b 	.word	0x0800285b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002778:	7c3b      	ldrb	r3, [r7, #16]
 800277a:	2b01      	cmp	r3, #1
 800277c:	f040 80b8 	bne.w	80028f0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002780:	78bb      	ldrb	r3, [r7, #2]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 80b4 	bne.w	80028f0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002788:	8b3b      	ldrh	r3, [r7, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d108      	bne.n	80027a0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	3355      	adds	r3, #85	; 0x55
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	212c      	movs	r1, #44	; 0x2c
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	3355      	adds	r3, #85	; 0x55
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3342      	adds	r3, #66	; 0x42
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80027c6:	e093      	b.n	80028f0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	3342      	adds	r3, #66	; 0x42
 80027d6:	2202      	movs	r2, #2
 80027d8:	701a      	strb	r2, [r3, #0]
      break;
 80027da:	e089      	b.n	80028f0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80027dc:	78bb      	ldrb	r3, [r7, #2]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d11d      	bne.n	800281e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	3355      	adds	r3, #85	; 0x55
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	3342      	adds	r3, #66	; 0x42
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002808:	e073      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	3342      	adds	r3, #66	; 0x42
 8002818:	2202      	movs	r2, #2
 800281a:	701a      	strb	r2, [r3, #0]
      break;
 800281c:	e069      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	3354      	adds	r3, #84	; 0x54
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	3342      	adds	r3, #66	; 0x42
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
      break;
 8002844:	e055      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	212c      	movs	r1, #44	; 0x2c
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	3342      	adds	r3, #66	; 0x42
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]
      break;
 8002858:	e04b      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800285a:	78bb      	ldrb	r3, [r7, #2]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d11d      	bne.n	800289c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	3355      	adds	r3, #85	; 0x55
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	212c      	movs	r1, #44	; 0x2c
 800287a:	fb01 f303 	mul.w	r3, r1, r3
 800287e:	4413      	add	r3, r2
 8002880:	3342      	adds	r3, #66	; 0x42
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002886:	e034      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3342      	adds	r3, #66	; 0x42
 8002896:	2202      	movs	r2, #2
 8002898:	701a      	strb	r2, [r3, #0]
      break;
 800289a:	e02a      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	3354      	adds	r3, #84	; 0x54
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3342      	adds	r3, #66	; 0x42
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
      break;
 80028c2:	e016      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3342      	adds	r3, #66	; 0x42
 80028d2:	2202      	movs	r2, #2
 80028d4:	701a      	strb	r2, [r3, #0]
      break;
 80028d6:	e00c      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3342      	adds	r3, #66	; 0x42
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
      break;
 80028ea:	e002      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80028ec:	bf00      	nop
 80028ee:	e000      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80028f0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	3344      	adds	r3, #68	; 0x44
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	8b3a      	ldrh	r2, [r7, #24]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	202c      	movs	r0, #44	; 0x2c
 800290c:	fb00 f303 	mul.w	r3, r0, r3
 8002910:	440b      	add	r3, r1
 8002912:	334c      	adds	r3, #76	; 0x4c
 8002914:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3360      	adds	r3, #96	; 0x60
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3350      	adds	r3, #80	; 0x50
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	3339      	adds	r3, #57	; 0x39
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3361      	adds	r3, #97	; 0x61
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	222c      	movs	r2, #44	; 0x2c
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	3338      	adds	r3, #56	; 0x38
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	18d1      	adds	r1, r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	f004 fd90 	bl	800749c <USB_HC_StartXfer>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop

08002988 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f004 fab3 	bl	8006f0a <USB_GetMode>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	f040 80f6 	bne.w	8002b98 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f004 fa97 	bl	8006ee4 <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80ec 	beq.w	8002b96 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f004 fa8e 	bl	8006ee4 <USB_ReadInterrupts>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029d2:	d104      	bne.n	80029de <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80029dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 fa7e 	bl	8006ee4 <USB_ReadInterrupts>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029f2:	d104      	bne.n	80029fe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f004 fa6e 	bl	8006ee4 <USB_ReadInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a12:	d104      	bne.n	8002a1e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f004 fa5e 	bl	8006ee4 <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d103      	bne.n	8002a3a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2202      	movs	r2, #2
 8002a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f004 fa50 	bl	8006ee4 <USB_ReadInterrupts>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a4e:	d11c      	bne.n	8002a8a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a58:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10f      	bne.n	8002a8a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a6a:	2110      	movs	r1, #16
 8002a6c:	6938      	ldr	r0, [r7, #16]
 8002a6e:	f004 f95f 	bl	8006d30 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a72:	6938      	ldr	r0, [r7, #16]
 8002a74:	f004 f980 	bl	8006d78 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f004 fb38 	bl	80070f4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f00a fcb3 	bl	800d3f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f004 fa28 	bl	8006ee4 <USB_ReadInterrupts>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a9e:	d102      	bne.n	8002aa6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f001 fa03 	bl	8003eac <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f004 fa1a 	bl	8006ee4 <USB_ReadInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d106      	bne.n	8002ac8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f00a fc7c 	bl	800d3b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f004 fa09 	bl	8006ee4 <USB_ReadInterrupts>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d101      	bne.n	8002ae0 <HAL_HCD_IRQHandler+0x158>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <HAL_HCD_IRQHandler+0x15a>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d012      	beq.n	8002b0c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699a      	ldr	r2, [r3, #24]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0210 	bic.w	r2, r2, #16
 8002af4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f001 f906 	bl	8003d08 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0210 	orr.w	r2, r2, #16
 8002b0a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f004 f9e7 	bl	8006ee4 <USB_ReadInterrupts>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b20:	d13a      	bne.n	8002b98 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f004 fdfa 	bl	8007720 <USB_HC_ReadInterrupt>
 8002b2c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e025      	b.n	8002b80 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d018      	beq.n	8002b7a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5e:	d106      	bne.n	8002b6e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	4619      	mov	r1, r3
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f8ab 	bl	8002cc2 <HCD_HC_IN_IRQHandler>
 8002b6c:	e005      	b.n	8002b7a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	4619      	mov	r1, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fcc6 	bl	8003506 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d3d4      	bcc.n	8002b34 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b92:	615a      	str	r2, [r3, #20]
 8002b94:	e000      	b.n	8002b98 <HAL_HCD_IRQHandler+0x210>
      return;
 8002b96:	bf00      	nop
    }
  }
}
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_HCD_Start+0x16>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e013      	b.n	8002bdc <HAL_HCD_Start+0x3e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f004 fafa 	bl	80071bc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f004 f840 	bl	8006c52 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_HCD_Stop+0x16>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e00d      	b.n	8002c16 <HAL_HCD_Stop+0x32>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f004 fef4 	bl	80079f4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f004 fa9c 	bl	8007168 <USB_ResetPort>
 8002c30:	4603      	mov	r3, r0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3360      	adds	r3, #96	; 0x60
 8002c54:	781b      	ldrb	r3, [r3, #0]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3350      	adds	r3, #80	; 0x50
 8002c7c:	681b      	ldr	r3, [r3, #0]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f004 fae0 	bl	800725c <USB_GetCurrentFrame>
 8002c9c:	4603      	mov	r3, r0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f004 fabb 	bl	800722e <USB_GetHostSpeed>
 8002cb8:	4603      	mov	r3, r0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d119      	bne.n	8002d26 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2304      	movs	r3, #4
 8002d02:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	0151      	lsls	r1, r2, #5
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	440a      	add	r2, r1
 8002d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d1e:	f043 0302 	orr.w	r3, r3, #2
 8002d22:	60d3      	str	r3, [r2, #12]
 8002d24:	e101      	b.n	8002f2a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d3c:	d12b      	bne.n	8002d96 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d50:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	212c      	movs	r1, #44	; 0x2c
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3361      	adds	r3, #97	; 0x61
 8002d60:	2207      	movs	r2, #7
 8002d62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	0151      	lsls	r1, r2, #5
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	440a      	add	r2, r1
 8002d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d7e:	f043 0302 	orr.w	r3, r3, #2
 8002d82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f004 fcd7 	bl	8007742 <USB_HC_Halt>
 8002d94:	e0c9      	b.n	8002f2a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d109      	bne.n	8002dc0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db8:	461a      	mov	r2, r3
 8002dba:	2320      	movs	r3, #32
 8002dbc:	6093      	str	r3, [r2, #8]
 8002dbe:	e0b4      	b.n	8002f2a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d133      	bne.n	8002e3e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	0151      	lsls	r1, r2, #5
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	440a      	add	r2, r1
 8002dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	212c      	movs	r1, #44	; 0x2c
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	3361      	adds	r3, #97	; 0x61
 8002e04:	2205      	movs	r2, #5
 8002e06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	461a      	mov	r2, r3
 8002e16:	2310      	movs	r3, #16
 8002e18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e26:	461a      	mov	r2, r3
 8002e28:	2308      	movs	r3, #8
 8002e2a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f004 fc83 	bl	8007742 <USB_HC_Halt>
 8002e3c:	e075      	b.n	8002f2a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e54:	d134      	bne.n	8002ec0 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	0151      	lsls	r1, r2, #5
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	440a      	add	r2, r1
 8002e6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	212c      	movs	r1, #44	; 0x2c
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	3361      	adds	r3, #97	; 0x61
 8002e84:	2208      	movs	r2, #8
 8002e86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e94:	461a      	mov	r2, r3
 8002e96:	2310      	movs	r3, #16
 8002e98:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f004 fc42 	bl	8007742 <USB_HC_Halt>
 8002ebe:	e034      	b.n	8002f2a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed2:	2b80      	cmp	r3, #128	; 0x80
 8002ed4:	d129      	bne.n	8002f2a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	0151      	lsls	r1, r2, #5
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	440a      	add	r2, r1
 8002eec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	3361      	adds	r3, #97	; 0x61
 8002f04:	2206      	movs	r2, #6
 8002f06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f004 fc15 	bl	8007742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	461a      	mov	r2, r3
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f40:	d122      	bne.n	8002f88 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	0151      	lsls	r1, r2, #5
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	440a      	add	r2, r1
 8002f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f004 fbe8 	bl	8007742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f84:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002f86:	e2ba      	b.n	80034fe <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	f040 811b 	bne.w	80031d6 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d019      	beq.n	8002fdc <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	212c      	movs	r1, #44	; 0x2c
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3348      	adds	r3, #72	; 0x48
 8002fb6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	0159      	lsls	r1, r3, #5
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002fca:	1ad2      	subs	r2, r2, r3
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	202c      	movs	r0, #44	; 0x2c
 8002fd2:	fb00 f303 	mul.w	r3, r0, r3
 8002fd6:	440b      	add	r3, r1
 8002fd8:	3350      	adds	r3, #80	; 0x50
 8002fda:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3361      	adds	r3, #97	; 0x61
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	212c      	movs	r1, #44	; 0x2c
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	335c      	adds	r3, #92	; 0x5c
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300c:	461a      	mov	r2, r3
 800300e:	2301      	movs	r3, #1
 8003010:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	212c      	movs	r1, #44	; 0x2c
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	4413      	add	r3, r2
 800301e:	333f      	adds	r3, #63	; 0x3f
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	212c      	movs	r1, #44	; 0x2c
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	333f      	adds	r3, #63	; 0x3f
 8003034:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003036:	2b02      	cmp	r3, #2
 8003038:	d121      	bne.n	800307e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4413      	add	r3, r2
 8003042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	0151      	lsls	r1, r2, #5
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	440a      	add	r2, r1
 8003050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003054:	f043 0302 	orr.w	r3, r3, #2
 8003058:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f004 fb6c 	bl	8007742 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003076:	461a      	mov	r2, r3
 8003078:	2310      	movs	r3, #16
 800307a:	6093      	str	r3, [r2, #8]
 800307c:	e066      	b.n	800314c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	333f      	adds	r3, #63	; 0x3f
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b03      	cmp	r3, #3
 8003090:	d127      	bne.n	80030e2 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4413      	add	r3, r2
 800309a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	0151      	lsls	r1, r2, #5
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	440a      	add	r2, r1
 80030a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030b0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	3360      	adds	r3, #96	; 0x60
 80030c0:	2201      	movs	r2, #1
 80030c2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	b2d9      	uxtb	r1, r3
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	202c      	movs	r0, #44	; 0x2c
 80030ce:	fb00 f303 	mul.w	r3, r0, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	3360      	adds	r3, #96	; 0x60
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f00a f996 	bl	800d40c <HAL_HCD_HC_NotifyURBChange_Callback>
 80030e0:	e034      	b.n	800314c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	333f      	adds	r3, #63	; 0x3f
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d12a      	bne.n	800314c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	212c      	movs	r1, #44	; 0x2c
 80030fc:	fb01 f303 	mul.w	r3, r1, r3
 8003100:	4413      	add	r3, r2
 8003102:	3360      	adds	r3, #96	; 0x60
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	3354      	adds	r3, #84	; 0x54
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	f083 0301 	eor.w	r3, r3, #1
 800311c:	b2d8      	uxtb	r0, r3
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	212c      	movs	r1, #44	; 0x2c
 8003124:	fb01 f303 	mul.w	r3, r1, r3
 8003128:	4413      	add	r3, r2
 800312a:	3354      	adds	r3, #84	; 0x54
 800312c:	4602      	mov	r2, r0
 800312e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	b2d9      	uxtb	r1, r3
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	202c      	movs	r0, #44	; 0x2c
 800313a:	fb00 f303 	mul.w	r3, r0, r3
 800313e:	4413      	add	r3, r2
 8003140:	3360      	adds	r3, #96	; 0x60
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f00a f960 	bl	800d40c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d12b      	bne.n	80031ac <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	212c      	movs	r1, #44	; 0x2c
 800315a:	fb01 f303 	mul.w	r3, r1, r3
 800315e:	4413      	add	r3, r2
 8003160:	3348      	adds	r3, #72	; 0x48
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	202c      	movs	r0, #44	; 0x2c
 800316a:	fb00 f202 	mul.w	r2, r0, r2
 800316e:	440a      	add	r2, r1
 8003170:	3240      	adds	r2, #64	; 0x40
 8003172:	8812      	ldrh	r2, [r2, #0]
 8003174:	fbb3 f3f2 	udiv	r3, r3, r2
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 81be 	beq.w	80034fe <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	3354      	adds	r3, #84	; 0x54
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	f083 0301 	eor.w	r3, r3, #1
 8003196:	b2d8      	uxtb	r0, r3
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	3354      	adds	r3, #84	; 0x54
 80031a6:	4602      	mov	r2, r0
 80031a8:	701a      	strb	r2, [r3, #0]
}
 80031aa:	e1a8      	b.n	80034fe <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	3354      	adds	r3, #84	; 0x54
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	f083 0301 	eor.w	r3, r3, #1
 80031c0:	b2d8      	uxtb	r0, r3
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	3354      	adds	r3, #84	; 0x54
 80031d0:	4602      	mov	r2, r0
 80031d2:	701a      	strb	r2, [r3, #0]
}
 80031d4:	e193      	b.n	80034fe <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	f040 8106 	bne.w	80033fa <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	0151      	lsls	r1, r2, #5
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	440a      	add	r2, r1
 8003204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003208:	f023 0302 	bic.w	r3, r3, #2
 800320c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	212c      	movs	r1, #44	; 0x2c
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	3361      	adds	r3, #97	; 0x61
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d109      	bne.n	8003236 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	3360      	adds	r3, #96	; 0x60
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	e0c9      	b.n	80033ca <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	212c      	movs	r1, #44	; 0x2c
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	4413      	add	r3, r2
 8003242:	3361      	adds	r3, #97	; 0x61
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b05      	cmp	r3, #5
 8003248:	d109      	bne.n	800325e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	3360      	adds	r3, #96	; 0x60
 8003258:	2205      	movs	r2, #5
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e0b5      	b.n	80033ca <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	212c      	movs	r1, #44	; 0x2c
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	4413      	add	r3, r2
 800326a:	3361      	adds	r3, #97	; 0x61
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b06      	cmp	r3, #6
 8003270:	d009      	beq.n	8003286 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	212c      	movs	r1, #44	; 0x2c
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	3361      	adds	r3, #97	; 0x61
 8003280:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003282:	2b08      	cmp	r3, #8
 8003284:	d150      	bne.n	8003328 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	335c      	adds	r3, #92	; 0x5c
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	202c      	movs	r0, #44	; 0x2c
 800329e:	fb00 f303 	mul.w	r3, r0, r3
 80032a2:	440b      	add	r3, r1
 80032a4:	335c      	adds	r3, #92	; 0x5c
 80032a6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	335c      	adds	r3, #92	; 0x5c
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d912      	bls.n	80032e2 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	212c      	movs	r1, #44	; 0x2c
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	335c      	adds	r3, #92	; 0x5c
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	212c      	movs	r1, #44	; 0x2c
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	4413      	add	r3, r2
 80032da:	3360      	adds	r3, #96	; 0x60
 80032dc:	2204      	movs	r2, #4
 80032de:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032e0:	e073      	b.n	80033ca <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	3360      	adds	r3, #96	; 0x60
 80032f0:	2202      	movs	r2, #2
 80032f2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800330a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003312:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4413      	add	r3, r2
 800331c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003320:	461a      	mov	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003326:	e050      	b.n	80033ca <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	3361      	adds	r3, #97	; 0x61
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d122      	bne.n	8003382 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	3360      	adds	r3, #96	; 0x60
 800334a:	2202      	movs	r2, #2
 800334c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4413      	add	r3, r2
 8003356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003364:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800336c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4413      	add	r3, r2
 8003376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337a:	461a      	mov	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	e023      	b.n	80033ca <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	3361      	adds	r3, #97	; 0x61
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b07      	cmp	r3, #7
 8003394:	d119      	bne.n	80033ca <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	212c      	movs	r1, #44	; 0x2c
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	335c      	adds	r3, #92	; 0x5c
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	202c      	movs	r0, #44	; 0x2c
 80033ae:	fb00 f303 	mul.w	r3, r0, r3
 80033b2:	440b      	add	r3, r1
 80033b4:	335c      	adds	r3, #92	; 0x5c
 80033b6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	212c      	movs	r1, #44	; 0x2c
 80033be:	fb01 f303 	mul.w	r3, r1, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	3360      	adds	r3, #96	; 0x60
 80033c6:	2204      	movs	r2, #4
 80033c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d6:	461a      	mov	r2, r3
 80033d8:	2302      	movs	r3, #2
 80033da:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	b2d9      	uxtb	r1, r3
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	202c      	movs	r0, #44	; 0x2c
 80033e6:	fb00 f303 	mul.w	r3, r0, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	3360      	adds	r3, #96	; 0x60
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f00a f80a 	bl	800d40c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033f8:	e081      	b.n	80034fe <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4413      	add	r3, r2
 8003402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b10      	cmp	r3, #16
 800340e:	d176      	bne.n	80034fe <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	212c      	movs	r1, #44	; 0x2c
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	4413      	add	r3, r2
 800341c:	333f      	adds	r3, #63	; 0x3f
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b03      	cmp	r3, #3
 8003422:	d121      	bne.n	8003468 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	335c      	adds	r3, #92	; 0x5c
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4413      	add	r3, r2
 800343e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	0151      	lsls	r1, r2, #5
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	440a      	add	r2, r1
 800344c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f004 f96e 	bl	8007742 <USB_HC_Halt>
 8003466:	e041      	b.n	80034ec <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	212c      	movs	r1, #44	; 0x2c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	333f      	adds	r3, #63	; 0x3f
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d009      	beq.n	8003490 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	212c      	movs	r1, #44	; 0x2c
 8003482:	fb01 f303 	mul.w	r3, r1, r3
 8003486:	4413      	add	r3, r2
 8003488:	333f      	adds	r3, #63	; 0x3f
 800348a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800348c:	2b02      	cmp	r3, #2
 800348e:	d12d      	bne.n	80034ec <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	212c      	movs	r1, #44	; 0x2c
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	4413      	add	r3, r2
 800349c:	335c      	adds	r3, #92	; 0x5c
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d120      	bne.n	80034ec <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	212c      	movs	r1, #44	; 0x2c
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	3361      	adds	r3, #97	; 0x61
 80034b8:	2203      	movs	r2, #3
 80034ba:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	0151      	lsls	r1, r2, #5
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	440a      	add	r2, r1
 80034d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034d6:	f043 0302 	orr.w	r3, r3, #2
 80034da:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f004 f92b 	bl	8007742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f8:	461a      	mov	r2, r3
 80034fa:	2310      	movs	r3, #16
 80034fc:	6093      	str	r3, [r2, #8]
}
 80034fe:	bf00      	nop
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b088      	sub	sp, #32
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	460b      	mov	r3, r1
 8003510:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	4413      	add	r3, r2
 8003528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b04      	cmp	r3, #4
 8003534:	d119      	bne.n	800356a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	4413      	add	r3, r2
 800353e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003542:	461a      	mov	r2, r3
 8003544:	2304      	movs	r3, #4
 8003546:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	0151      	lsls	r1, r2, #5
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	440a      	add	r2, r1
 800355e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003562:	f043 0302 	orr.w	r3, r3, #2
 8003566:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003568:	e3ca      	b.n	8003d00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	4413      	add	r3, r2
 8003572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b20      	cmp	r3, #32
 800357e:	d13e      	bne.n	80035fe <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	4413      	add	r3, r2
 8003588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358c:	461a      	mov	r2, r3
 800358e:	2320      	movs	r3, #32
 8003590:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	333d      	adds	r3, #61	; 0x3d
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	f040 83ac 	bne.w	8003d00 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	212c      	movs	r1, #44	; 0x2c
 80035ae:	fb01 f303 	mul.w	r3, r1, r3
 80035b2:	4413      	add	r3, r2
 80035b4:	333d      	adds	r3, #61	; 0x3d
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	212c      	movs	r1, #44	; 0x2c
 80035c0:	fb01 f303 	mul.w	r3, r1, r3
 80035c4:	4413      	add	r3, r2
 80035c6:	3360      	adds	r3, #96	; 0x60
 80035c8:	2202      	movs	r2, #2
 80035ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	0151      	lsls	r1, r2, #5
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	440a      	add	r2, r1
 80035e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035e6:	f043 0302 	orr.w	r3, r3, #2
 80035ea:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f004 f8a3 	bl	8007742 <USB_HC_Halt>
}
 80035fc:	e380      	b.n	8003d00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003614:	d122      	bne.n	800365c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	4413      	add	r3, r2
 800361e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	0151      	lsls	r1, r2, #5
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	440a      	add	r2, r1
 800362c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003630:	f043 0302 	orr.w	r3, r3, #2
 8003634:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f004 f87e 	bl	8007742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003652:	461a      	mov	r2, r3
 8003654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003658:	6093      	str	r3, [r2, #8]
}
 800365a:	e351      	b.n	8003d00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	4413      	add	r3, r2
 8003664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b01      	cmp	r3, #1
 8003670:	d150      	bne.n	8003714 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	212c      	movs	r1, #44	; 0x2c
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	4413      	add	r3, r2
 800367e:	335c      	adds	r3, #92	; 0x5c
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	4413      	add	r3, r2
 800368c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003696:	2b40      	cmp	r3, #64	; 0x40
 8003698:	d111      	bne.n	80036be <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	212c      	movs	r1, #44	; 0x2c
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	4413      	add	r3, r2
 80036a6:	333d      	adds	r3, #61	; 0x3d
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b8:	461a      	mov	r2, r3
 80036ba:	2340      	movs	r3, #64	; 0x40
 80036bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	0151      	lsls	r1, r2, #5
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	440a      	add	r2, r1
 80036d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036d8:	f043 0302 	orr.w	r3, r3, #2
 80036dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f004 f82a 	bl	8007742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fa:	461a      	mov	r2, r3
 80036fc:	2301      	movs	r3, #1
 80036fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	212c      	movs	r1, #44	; 0x2c
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	3361      	adds	r3, #97	; 0x61
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]
}
 8003712:	e2f5      	b.n	8003d00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d13c      	bne.n	80037a4 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	212c      	movs	r1, #44	; 0x2c
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	3361      	adds	r3, #97	; 0x61
 8003738:	2204      	movs	r2, #4
 800373a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	212c      	movs	r1, #44	; 0x2c
 8003742:	fb01 f303 	mul.w	r3, r1, r3
 8003746:	4413      	add	r3, r2
 8003748:	333d      	adds	r3, #61	; 0x3d
 800374a:	2201      	movs	r2, #1
 800374c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	212c      	movs	r1, #44	; 0x2c
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	335c      	adds	r3, #92	; 0x5c
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	4413      	add	r3, r2
 8003768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	0151      	lsls	r1, r2, #5
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	440a      	add	r2, r1
 8003776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800377a:	f043 0302 	orr.w	r3, r3, #2
 800377e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	4611      	mov	r1, r2
 800378a:	4618      	mov	r0, r3
 800378c:	f003 ffd9 	bl	8007742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	4413      	add	r3, r2
 8003798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379c:	461a      	mov	r2, r3
 800379e:	2340      	movs	r3, #64	; 0x40
 80037a0:	6093      	str	r3, [r2, #8]
}
 80037a2:	e2ad      	b.n	8003d00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d12a      	bne.n	8003810 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c6:	461a      	mov	r2, r3
 80037c8:	2308      	movs	r3, #8
 80037ca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	0151      	lsls	r1, r2, #5
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	440a      	add	r2, r1
 80037e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037e6:	f043 0302 	orr.w	r3, r3, #2
 80037ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	4611      	mov	r1, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f003 ffa3 	bl	8007742 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	4413      	add	r3, r2
 8003808:	3361      	adds	r3, #97	; 0x61
 800380a:	2205      	movs	r2, #5
 800380c:	701a      	strb	r2, [r3, #0]
}
 800380e:	e277      	b.n	8003d00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b10      	cmp	r3, #16
 8003824:	d150      	bne.n	80038c8 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	212c      	movs	r1, #44	; 0x2c
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	335c      	adds	r3, #92	; 0x5c
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	212c      	movs	r1, #44	; 0x2c
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	3361      	adds	r3, #97	; 0x61
 8003846:	2203      	movs	r2, #3
 8003848:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	212c      	movs	r1, #44	; 0x2c
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	333d      	adds	r3, #61	; 0x3d
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d112      	bne.n	8003884 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	212c      	movs	r1, #44	; 0x2c
 8003864:	fb01 f303 	mul.w	r3, r1, r3
 8003868:	4413      	add	r3, r2
 800386a:	333c      	adds	r3, #60	; 0x3c
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d108      	bne.n	8003884 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	333d      	adds	r3, #61	; 0x3d
 8003880:	2201      	movs	r2, #1
 8003882:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	4413      	add	r3, r2
 800388c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	0151      	lsls	r1, r2, #5
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	440a      	add	r2, r1
 800389a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800389e:	f043 0302 	orr.w	r3, r3, #2
 80038a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f003 ff47 	bl	8007742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c0:	461a      	mov	r2, r3
 80038c2:	2310      	movs	r3, #16
 80038c4:	6093      	str	r3, [r2, #8]
}
 80038c6:	e21b      	b.n	8003d00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038da:	2b80      	cmp	r3, #128	; 0x80
 80038dc:	d174      	bne.n	80039c8 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d121      	bne.n	800392a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	212c      	movs	r1, #44	; 0x2c
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	3361      	adds	r3, #97	; 0x61
 80038f4:	2206      	movs	r2, #6
 80038f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	0151      	lsls	r1, r2, #5
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	440a      	add	r2, r1
 800390e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003912:	f043 0302 	orr.w	r3, r3, #2
 8003916:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	4611      	mov	r1, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f003 ff0d 	bl	8007742 <USB_HC_Halt>
 8003928:	e044      	b.n	80039b4 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	212c      	movs	r1, #44	; 0x2c
 8003930:	fb01 f303 	mul.w	r3, r1, r3
 8003934:	4413      	add	r3, r2
 8003936:	335c      	adds	r3, #92	; 0x5c
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	202c      	movs	r0, #44	; 0x2c
 8003942:	fb00 f303 	mul.w	r3, r0, r3
 8003946:	440b      	add	r3, r1
 8003948:	335c      	adds	r3, #92	; 0x5c
 800394a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	335c      	adds	r3, #92	; 0x5c
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d920      	bls.n	80039a2 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	335c      	adds	r3, #92	; 0x5c
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	3360      	adds	r3, #96	; 0x60
 8003980:	2204      	movs	r2, #4
 8003982:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	b2d9      	uxtb	r1, r3
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	202c      	movs	r0, #44	; 0x2c
 800398e:	fb00 f303 	mul.w	r3, r0, r3
 8003992:	4413      	add	r3, r2
 8003994:	3360      	adds	r3, #96	; 0x60
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f009 fd36 	bl	800d40c <HAL_HCD_HC_NotifyURBChange_Callback>
 80039a0:	e008      	b.n	80039b4 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	212c      	movs	r1, #44	; 0x2c
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	4413      	add	r3, r2
 80039ae:	3360      	adds	r3, #96	; 0x60
 80039b0:	2202      	movs	r2, #2
 80039b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c0:	461a      	mov	r2, r3
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	6093      	str	r3, [r2, #8]
}
 80039c6:	e19b      	b.n	8003d00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039de:	d134      	bne.n	8003a4a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	0151      	lsls	r1, r2, #5
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	440a      	add	r2, r1
 80039f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039fa:	f043 0302 	orr.w	r3, r3, #2
 80039fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f003 fe99 	bl	8007742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2310      	movs	r3, #16
 8003a20:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	212c      	movs	r1, #44	; 0x2c
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	4413      	add	r3, r2
 8003a42:	3361      	adds	r3, #97	; 0x61
 8003a44:	2208      	movs	r2, #8
 8003a46:	701a      	strb	r2, [r3, #0]
}
 8003a48:	e15a      	b.n	8003d00 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	f040 814f 	bne.w	8003d00 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	0151      	lsls	r1, r2, #5
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	440a      	add	r2, r1
 8003a78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a7c:	f023 0302 	bic.w	r3, r3, #2
 8003a80:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	212c      	movs	r1, #44	; 0x2c
 8003a88:	fb01 f303 	mul.w	r3, r1, r3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	3361      	adds	r3, #97	; 0x61
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d17d      	bne.n	8003b92 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	212c      	movs	r1, #44	; 0x2c
 8003a9c:	fb01 f303 	mul.w	r3, r1, r3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3360      	adds	r3, #96	; 0x60
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	333f      	adds	r3, #63	; 0x3f
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d00a      	beq.n	8003ad2 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	333f      	adds	r3, #63	; 0x3f
 8003aca:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	f040 8100 	bne.w	8003cd2 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d113      	bne.n	8003b02 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	212c      	movs	r1, #44	; 0x2c
 8003ae0:	fb01 f303 	mul.w	r3, r1, r3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3355      	adds	r3, #85	; 0x55
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	f083 0301 	eor.w	r3, r3, #1
 8003aee:	b2d8      	uxtb	r0, r3
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	212c      	movs	r1, #44	; 0x2c
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	4413      	add	r3, r2
 8003afc:	3355      	adds	r3, #85	; 0x55
 8003afe:	4602      	mov	r2, r0
 8003b00:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	f040 80e3 	bne.w	8003cd2 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	334c      	adds	r3, #76	; 0x4c
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80d8 	beq.w	8003cd2 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	212c      	movs	r1, #44	; 0x2c
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	334c      	adds	r3, #76	; 0x4c
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	202c      	movs	r0, #44	; 0x2c
 8003b38:	fb00 f202 	mul.w	r2, r0, r2
 8003b3c:	440a      	add	r2, r1
 8003b3e:	3240      	adds	r2, #64	; 0x40
 8003b40:	8812      	ldrh	r2, [r2, #0]
 8003b42:	4413      	add	r3, r2
 8003b44:	3b01      	subs	r3, #1
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	202c      	movs	r0, #44	; 0x2c
 8003b4c:	fb00 f202 	mul.w	r2, r0, r2
 8003b50:	440a      	add	r2, r1
 8003b52:	3240      	adds	r2, #64	; 0x40
 8003b54:	8812      	ldrh	r2, [r2, #0]
 8003b56:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80b5 	beq.w	8003cd2 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	3355      	adds	r3, #85	; 0x55
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	f083 0301 	eor.w	r3, r3, #1
 8003b7c:	b2d8      	uxtb	r0, r3
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	212c      	movs	r1, #44	; 0x2c
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	4413      	add	r3, r2
 8003b8a:	3355      	adds	r3, #85	; 0x55
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	e09f      	b.n	8003cd2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	212c      	movs	r1, #44	; 0x2c
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3361      	adds	r3, #97	; 0x61
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d109      	bne.n	8003bba <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	212c      	movs	r1, #44	; 0x2c
 8003bac:	fb01 f303 	mul.w	r3, r1, r3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3360      	adds	r3, #96	; 0x60
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	701a      	strb	r2, [r3, #0]
 8003bb8:	e08b      	b.n	8003cd2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	212c      	movs	r1, #44	; 0x2c
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3361      	adds	r3, #97	; 0x61
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d109      	bne.n	8003be2 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	212c      	movs	r1, #44	; 0x2c
 8003bd4:	fb01 f303 	mul.w	r3, r1, r3
 8003bd8:	4413      	add	r3, r2
 8003bda:	3360      	adds	r3, #96	; 0x60
 8003bdc:	2202      	movs	r2, #2
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	e077      	b.n	8003cd2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	212c      	movs	r1, #44	; 0x2c
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	3361      	adds	r3, #97	; 0x61
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b05      	cmp	r3, #5
 8003bf4:	d109      	bne.n	8003c0a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	212c      	movs	r1, #44	; 0x2c
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	3360      	adds	r3, #96	; 0x60
 8003c04:	2205      	movs	r2, #5
 8003c06:	701a      	strb	r2, [r3, #0]
 8003c08:	e063      	b.n	8003cd2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	212c      	movs	r1, #44	; 0x2c
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	3361      	adds	r3, #97	; 0x61
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b06      	cmp	r3, #6
 8003c1c:	d009      	beq.n	8003c32 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	212c      	movs	r1, #44	; 0x2c
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	4413      	add	r3, r2
 8003c2a:	3361      	adds	r3, #97	; 0x61
 8003c2c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d14f      	bne.n	8003cd2 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	212c      	movs	r1, #44	; 0x2c
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	335c      	adds	r3, #92	; 0x5c
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	202c      	movs	r0, #44	; 0x2c
 8003c4a:	fb00 f303 	mul.w	r3, r0, r3
 8003c4e:	440b      	add	r3, r1
 8003c50:	335c      	adds	r3, #92	; 0x5c
 8003c52:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	212c      	movs	r1, #44	; 0x2c
 8003c5a:	fb01 f303 	mul.w	r3, r1, r3
 8003c5e:	4413      	add	r3, r2
 8003c60:	335c      	adds	r3, #92	; 0x5c
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d912      	bls.n	8003c8e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	212c      	movs	r1, #44	; 0x2c
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	335c      	adds	r3, #92	; 0x5c
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	212c      	movs	r1, #44	; 0x2c
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	4413      	add	r3, r2
 8003c86:	3360      	adds	r3, #96	; 0x60
 8003c88:	2204      	movs	r2, #4
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	e021      	b.n	8003cd2 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	212c      	movs	r1, #44	; 0x2c
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	4413      	add	r3, r2
 8003c9a:	3360      	adds	r3, #96	; 0x60
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cb6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cbe:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ccc:	461a      	mov	r2, r3
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cde:	461a      	mov	r2, r3
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	b2d9      	uxtb	r1, r3
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	202c      	movs	r0, #44	; 0x2c
 8003cee:	fb00 f303 	mul.w	r3, r0, r3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3360      	adds	r3, #96	; 0x60
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f009 fb86 	bl	800d40c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d00:	bf00      	nop
 8003d02:	3720      	adds	r7, #32
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08a      	sub	sp, #40	; 0x28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	0c5b      	lsrs	r3, r3, #17
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d3c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d004      	beq.n	8003d4e <HCD_RXQLVL_IRQHandler+0x46>
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2b05      	cmp	r3, #5
 8003d48:	f000 80a9 	beq.w	8003e9e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d4c:	e0aa      	b.n	8003ea4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80a6 	beq.w	8003ea2 <HCD_RXQLVL_IRQHandler+0x19a>
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	212c      	movs	r1, #44	; 0x2c
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	4413      	add	r3, r2
 8003d62:	3344      	adds	r3, #68	; 0x44
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 809b 	beq.w	8003ea2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	212c      	movs	r1, #44	; 0x2c
 8003d72:	fb01 f303 	mul.w	r3, r1, r3
 8003d76:	4413      	add	r3, r2
 8003d78:	3350      	adds	r3, #80	; 0x50
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	441a      	add	r2, r3
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	202c      	movs	r0, #44	; 0x2c
 8003d86:	fb00 f303 	mul.w	r3, r0, r3
 8003d8a:	440b      	add	r3, r1
 8003d8c:	334c      	adds	r3, #76	; 0x4c
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d87a      	bhi.n	8003e8a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	3344      	adds	r3, #68	; 0x44
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	b292      	uxth	r2, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	f003 f841 	bl	8006e34 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	212c      	movs	r1, #44	; 0x2c
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3344      	adds	r3, #68	; 0x44
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	441a      	add	r2, r3
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	202c      	movs	r0, #44	; 0x2c
 8003dcc:	fb00 f303 	mul.w	r3, r0, r3
 8003dd0:	440b      	add	r3, r1
 8003dd2:	3344      	adds	r3, #68	; 0x44
 8003dd4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	212c      	movs	r1, #44	; 0x2c
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	4413      	add	r3, r2
 8003de2:	3350      	adds	r3, #80	; 0x50
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	441a      	add	r2, r3
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	202c      	movs	r0, #44	; 0x2c
 8003df0:	fb00 f303 	mul.w	r3, r0, r3
 8003df4:	440b      	add	r3, r1
 8003df6:	3350      	adds	r3, #80	; 0x50
 8003df8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	0cdb      	lsrs	r3, r3, #19
 8003e0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e0e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	212c      	movs	r1, #44	; 0x2c
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3340      	adds	r3, #64	; 0x40
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d13c      	bne.n	8003ea2 <HCD_RXQLVL_IRQHandler+0x19a>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d039      	beq.n	8003ea2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e44:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e4c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	212c      	movs	r1, #44	; 0x2c
 8003e66:	fb01 f303 	mul.w	r3, r1, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3354      	adds	r3, #84	; 0x54
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	f083 0301 	eor.w	r3, r3, #1
 8003e74:	b2d8      	uxtb	r0, r3
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	212c      	movs	r1, #44	; 0x2c
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	4413      	add	r3, r2
 8003e82:	3354      	adds	r3, #84	; 0x54
 8003e84:	4602      	mov	r2, r0
 8003e86:	701a      	strb	r2, [r3, #0]
      break;
 8003e88:	e00b      	b.n	8003ea2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	212c      	movs	r1, #44	; 0x2c
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	3360      	adds	r3, #96	; 0x60
 8003e98:	2204      	movs	r2, #4
 8003e9a:	701a      	strb	r2, [r3, #0]
      break;
 8003e9c:	e001      	b.n	8003ea2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003ea2:	bf00      	nop
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	3728      	adds	r7, #40	; 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ed8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d10b      	bne.n	8003efc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d102      	bne.n	8003ef4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f009 fa70 	bl	800d3d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f043 0302 	orr.w	r3, r3, #2
 8003efa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d132      	bne.n	8003f6c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f043 0308 	orr.w	r3, r3, #8
 8003f0c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d126      	bne.n	8003f66 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d113      	bne.n	8003f48 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003f26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f2a:	d106      	bne.n	8003f3a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2102      	movs	r1, #2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f003 f8de 	bl	80070f4 <USB_InitFSLSPClkSel>
 8003f38:	e011      	b.n	8003f5e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2101      	movs	r1, #1
 8003f40:	4618      	mov	r0, r3
 8003f42:	f003 f8d7 	bl	80070f4 <USB_InitFSLSPClkSel>
 8003f46:	e00a      	b.n	8003f5e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d106      	bne.n	8003f5e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f56:	461a      	mov	r2, r3
 8003f58:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003f5c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f009 fa62 	bl	800d428 <HAL_HCD_PortEnabled_Callback>
 8003f64:	e002      	b.n	8003f6c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f009 fa6c 	bl	800d444 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d103      	bne.n	8003f7e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f043 0320 	orr.w	r3, r3, #32
 8003f7c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f84:	461a      	mov	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	6013      	str	r3, [r2, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e12b      	b.n	80041fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd f96e 	bl	800129c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2224      	movs	r2, #36	; 0x24
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fe6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ff8:	f002 fc4a 	bl	8006890 <HAL_RCC_GetPCLK1Freq>
 8003ffc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4a81      	ldr	r2, [pc, #516]	; (8004208 <HAL_I2C_Init+0x274>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d807      	bhi.n	8004018 <HAL_I2C_Init+0x84>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4a80      	ldr	r2, [pc, #512]	; (800420c <HAL_I2C_Init+0x278>)
 800400c:	4293      	cmp	r3, r2
 800400e:	bf94      	ite	ls
 8004010:	2301      	movls	r3, #1
 8004012:	2300      	movhi	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	e006      	b.n	8004026 <HAL_I2C_Init+0x92>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4a7d      	ldr	r2, [pc, #500]	; (8004210 <HAL_I2C_Init+0x27c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	bf94      	ite	ls
 8004020:	2301      	movls	r3, #1
 8004022:	2300      	movhi	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e0e7      	b.n	80041fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4a78      	ldr	r2, [pc, #480]	; (8004214 <HAL_I2C_Init+0x280>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	0c9b      	lsrs	r3, r3, #18
 8004038:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	4a6a      	ldr	r2, [pc, #424]	; (8004208 <HAL_I2C_Init+0x274>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d802      	bhi.n	8004068 <HAL_I2C_Init+0xd4>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	3301      	adds	r3, #1
 8004066:	e009      	b.n	800407c <HAL_I2C_Init+0xe8>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800406e:	fb02 f303 	mul.w	r3, r2, r3
 8004072:	4a69      	ldr	r2, [pc, #420]	; (8004218 <HAL_I2C_Init+0x284>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	099b      	lsrs	r3, r3, #6
 800407a:	3301      	adds	r3, #1
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	430b      	orrs	r3, r1
 8004082:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800408e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	495c      	ldr	r1, [pc, #368]	; (8004208 <HAL_I2C_Init+0x274>)
 8004098:	428b      	cmp	r3, r1
 800409a:	d819      	bhi.n	80040d0 <HAL_I2C_Init+0x13c>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	1e59      	subs	r1, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040aa:	1c59      	adds	r1, r3, #1
 80040ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040b0:	400b      	ands	r3, r1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_I2C_Init+0x138>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1e59      	subs	r1, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80040c4:	3301      	adds	r3, #1
 80040c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ca:	e051      	b.n	8004170 <HAL_I2C_Init+0x1dc>
 80040cc:	2304      	movs	r3, #4
 80040ce:	e04f      	b.n	8004170 <HAL_I2C_Init+0x1dc>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d111      	bne.n	80040fc <HAL_I2C_Init+0x168>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	1e58      	subs	r0, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6859      	ldr	r1, [r3, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	440b      	add	r3, r1
 80040e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ea:	3301      	adds	r3, #1
 80040ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	e012      	b.n	8004122 <HAL_I2C_Init+0x18e>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1e58      	subs	r0, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6859      	ldr	r1, [r3, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	0099      	lsls	r1, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004112:	3301      	adds	r3, #1
 8004114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004118:	2b00      	cmp	r3, #0
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_I2C_Init+0x196>
 8004126:	2301      	movs	r3, #1
 8004128:	e022      	b.n	8004170 <HAL_I2C_Init+0x1dc>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10e      	bne.n	8004150 <HAL_I2C_Init+0x1bc>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1e58      	subs	r0, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6859      	ldr	r1, [r3, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	440b      	add	r3, r1
 8004140:	fbb0 f3f3 	udiv	r3, r0, r3
 8004144:	3301      	adds	r3, #1
 8004146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414e:	e00f      	b.n	8004170 <HAL_I2C_Init+0x1dc>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1e58      	subs	r0, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6859      	ldr	r1, [r3, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	0099      	lsls	r1, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	fbb0 f3f3 	udiv	r3, r0, r3
 8004166:	3301      	adds	r3, #1
 8004168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	6809      	ldr	r1, [r1, #0]
 8004174:	4313      	orrs	r3, r2
 8004176:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69da      	ldr	r2, [r3, #28]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800419e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6911      	ldr	r1, [r2, #16]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68d2      	ldr	r2, [r2, #12]
 80041aa:	4311      	orrs	r1, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	430b      	orrs	r3, r1
 80041b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	000186a0 	.word	0x000186a0
 800420c:	001e847f 	.word	0x001e847f
 8004210:	003d08ff 	.word	0x003d08ff
 8004214:	431bde83 	.word	0x431bde83
 8004218:	10624dd3 	.word	0x10624dd3

0800421c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	461a      	mov	r2, r3
 8004228:	460b      	mov	r3, r1
 800422a:	817b      	strh	r3, [r7, #10]
 800422c:	4613      	mov	r3, r2
 800422e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004230:	f7fd fa50 	bl	80016d4 <HAL_GetTick>
 8004234:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b20      	cmp	r3, #32
 8004240:	f040 80e0 	bne.w	8004404 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	2319      	movs	r3, #25
 800424a:	2201      	movs	r2, #1
 800424c:	4970      	ldr	r1, [pc, #448]	; (8004410 <HAL_I2C_Master_Transmit+0x1f4>)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fc58 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800425a:	2302      	movs	r3, #2
 800425c:	e0d3      	b.n	8004406 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_I2C_Master_Transmit+0x50>
 8004268:	2302      	movs	r3, #2
 800426a:	e0cc      	b.n	8004406 <HAL_I2C_Master_Transmit+0x1ea>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b01      	cmp	r3, #1
 8004280:	d007      	beq.n	8004292 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0201 	orr.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2221      	movs	r2, #33	; 0x21
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2210      	movs	r2, #16
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	893a      	ldrh	r2, [r7, #8]
 80042c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4a50      	ldr	r2, [pc, #320]	; (8004414 <HAL_I2C_Master_Transmit+0x1f8>)
 80042d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80042d4:	8979      	ldrh	r1, [r7, #10]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	6a3a      	ldr	r2, [r7, #32]
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fac2 	bl	8004864 <I2C_MasterRequestWrite>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e08d      	b.n	8004406 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004300:	e066      	b.n	80043d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	6a39      	ldr	r1, [r7, #32]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fcd2 	bl	8004cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00d      	beq.n	800432e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2b04      	cmp	r3, #4
 8004318:	d107      	bne.n	800432a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004328:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e06b      	b.n	8004406 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	781a      	ldrb	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b04      	cmp	r3, #4
 800436a:	d11b      	bne.n	80043a4 <HAL_I2C_Master_Transmit+0x188>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	2b00      	cmp	r3, #0
 8004372:	d017      	beq.n	80043a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	781a      	ldrb	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	6a39      	ldr	r1, [r7, #32]
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fcc2 	bl	8004d32 <I2C_WaitOnBTFFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00d      	beq.n	80043d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d107      	bne.n	80043cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e01a      	b.n	8004406 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d194      	bne.n	8004302 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	e000      	b.n	8004406 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004404:	2302      	movs	r3, #2
  }
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	00100002 	.word	0x00100002
 8004414:	ffff0000 	.word	0xffff0000

08004418 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08c      	sub	sp, #48	; 0x30
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	607a      	str	r2, [r7, #4]
 8004422:	461a      	mov	r2, r3
 8004424:	460b      	mov	r3, r1
 8004426:	817b      	strh	r3, [r7, #10]
 8004428:	4613      	mov	r3, r2
 800442a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800442c:	f7fd f952 	bl	80016d4 <HAL_GetTick>
 8004430:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b20      	cmp	r3, #32
 800443c:	f040 820b 	bne.w	8004856 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	2319      	movs	r3, #25
 8004446:	2201      	movs	r2, #1
 8004448:	497c      	ldr	r1, [pc, #496]	; (800463c <HAL_I2C_Master_Receive+0x224>)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fb5a 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004456:	2302      	movs	r3, #2
 8004458:	e1fe      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_I2C_Master_Receive+0x50>
 8004464:	2302      	movs	r3, #2
 8004466:	e1f7      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b01      	cmp	r3, #1
 800447c:	d007      	beq.n	800448e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800449c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2222      	movs	r2, #34	; 0x22
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2210      	movs	r2, #16
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	893a      	ldrh	r2, [r7, #8]
 80044be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4a5c      	ldr	r2, [pc, #368]	; (8004640 <HAL_I2C_Master_Receive+0x228>)
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044d0:	8979      	ldrh	r1, [r7, #10]
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fa46 	bl	8004968 <I2C_MasterRequestRead>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e1b8      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d113      	bne.n	8004516 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ee:	2300      	movs	r3, #0
 80044f0:	623b      	str	r3, [r7, #32]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	623b      	str	r3, [r7, #32]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	623b      	str	r3, [r7, #32]
 8004502:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	e18c      	b.n	8004830 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451a:	2b01      	cmp	r3, #1
 800451c:	d11b      	bne.n	8004556 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e16c      	b.n	8004830 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455a:	2b02      	cmp	r3, #2
 800455c:	d11b      	bne.n	8004596 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800456c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800457c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457e:	2300      	movs	r3, #0
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	e14c      	b.n	8004830 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045bc:	e138      	b.n	8004830 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	f200 80f1 	bhi.w	80047aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d123      	bne.n	8004618 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 fbed 	bl	8004db4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e139      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004616:	e10b      	b.n	8004830 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461c:	2b02      	cmp	r3, #2
 800461e:	d14e      	bne.n	80046be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	2200      	movs	r2, #0
 8004628:	4906      	ldr	r1, [pc, #24]	; (8004644 <HAL_I2C_Master_Receive+0x22c>)
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 fa6a 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e10e      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
 800463a:	bf00      	nop
 800463c:	00100002 	.word	0x00100002
 8004640:	ffff0000 	.word	0xffff0000
 8004644:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046bc:	e0b8      	b.n	8004830 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	2200      	movs	r2, #0
 80046c6:	4966      	ldr	r1, [pc, #408]	; (8004860 <HAL_I2C_Master_Receive+0x448>)
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 fa1b 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0bf      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	2200      	movs	r2, #0
 8004722:	494f      	ldr	r1, [pc, #316]	; (8004860 <HAL_I2C_Master_Receive+0x448>)
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f9ed 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e091      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047a8:	e042      	b.n	8004830 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fb00 	bl	8004db4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e04c      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d118      	bne.n	8004830 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	2b00      	cmp	r3, #0
 8004836:	f47f aec2 	bne.w	80045be <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e000      	b.n	8004858 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004856:	2302      	movs	r3, #2
  }
}
 8004858:	4618      	mov	r0, r3
 800485a:	3728      	adds	r7, #40	; 0x28
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	00010004 	.word	0x00010004

08004864 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	607a      	str	r2, [r7, #4]
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	460b      	mov	r3, r1
 8004872:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d006      	beq.n	800488e <I2C_MasterRequestWrite+0x2a>
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d003      	beq.n	800488e <I2C_MasterRequestWrite+0x2a>
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800488c:	d108      	bne.n	80048a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e00b      	b.n	80048b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	2b12      	cmp	r3, #18
 80048a6:	d107      	bne.n	80048b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f91d 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00d      	beq.n	80048ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048de:	d103      	bne.n	80048e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e035      	b.n	8004958 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048f4:	d108      	bne.n	8004908 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048f6:	897b      	ldrh	r3, [r7, #10]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004904:	611a      	str	r2, [r3, #16]
 8004906:	e01b      	b.n	8004940 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004908:	897b      	ldrh	r3, [r7, #10]
 800490a:	11db      	asrs	r3, r3, #7
 800490c:	b2db      	uxtb	r3, r3
 800490e:	f003 0306 	and.w	r3, r3, #6
 8004912:	b2db      	uxtb	r3, r3
 8004914:	f063 030f 	orn	r3, r3, #15
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	490e      	ldr	r1, [pc, #56]	; (8004960 <I2C_MasterRequestWrite+0xfc>)
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f943 	bl	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e010      	b.n	8004958 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004936:	897b      	ldrh	r3, [r7, #10]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	4907      	ldr	r1, [pc, #28]	; (8004964 <I2C_MasterRequestWrite+0x100>)
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f933 	bl	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	00010008 	.word	0x00010008
 8004964:	00010002 	.word	0x00010002

08004968 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af02      	add	r7, sp, #8
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	607a      	str	r2, [r7, #4]
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	460b      	mov	r3, r1
 8004976:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800498c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b08      	cmp	r3, #8
 8004992:	d006      	beq.n	80049a2 <I2C_MasterRequestRead+0x3a>
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d003      	beq.n	80049a2 <I2C_MasterRequestRead+0x3a>
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049a0:	d108      	bne.n	80049b4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	e00b      	b.n	80049cc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	2b11      	cmp	r3, #17
 80049ba:	d107      	bne.n	80049cc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f893 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00d      	beq.n	8004a00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f2:	d103      	bne.n	80049fc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e079      	b.n	8004af4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a08:	d108      	bne.n	8004a1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a0a:	897b      	ldrh	r3, [r7, #10]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	611a      	str	r2, [r3, #16]
 8004a1a:	e05f      	b.n	8004adc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a1c:	897b      	ldrh	r3, [r7, #10]
 8004a1e:	11db      	asrs	r3, r3, #7
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	f003 0306 	and.w	r3, r3, #6
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	f063 030f 	orn	r3, r3, #15
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	4930      	ldr	r1, [pc, #192]	; (8004afc <I2C_MasterRequestRead+0x194>)
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f8b9 	bl	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e054      	b.n	8004af4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a4a:	897b      	ldrh	r3, [r7, #10]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	4929      	ldr	r1, [pc, #164]	; (8004b00 <I2C_MasterRequestRead+0x198>)
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f8a9 	bl	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e044      	b.n	8004af4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	613b      	str	r3, [r7, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	613b      	str	r3, [r7, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f831 	bl	8004b04 <I2C_WaitOnFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00d      	beq.n	8004ac4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab6:	d103      	bne.n	8004ac0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e017      	b.n	8004af4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004ac4:	897b      	ldrh	r3, [r7, #10]
 8004ac6:	11db      	asrs	r3, r3, #7
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f003 0306 	and.w	r3, r3, #6
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	f063 030e 	orn	r3, r3, #14
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	4907      	ldr	r1, [pc, #28]	; (8004b00 <I2C_MasterRequestRead+0x198>)
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f865 	bl	8004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	00010008 	.word	0x00010008
 8004b00:	00010002 	.word	0x00010002

08004b04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	4613      	mov	r3, r2
 8004b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b14:	e025      	b.n	8004b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1c:	d021      	beq.n	8004b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1e:	f7fc fdd9 	bl	80016d4 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d302      	bcc.n	8004b34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d116      	bne.n	8004b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f043 0220 	orr.w	r2, r3, #32
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e023      	b.n	8004baa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	0c1b      	lsrs	r3, r3, #16
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d10d      	bne.n	8004b88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	43da      	mvns	r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4013      	ands	r3, r2
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bf0c      	ite	eq
 8004b7e:	2301      	moveq	r3, #1
 8004b80:	2300      	movne	r3, #0
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	461a      	mov	r2, r3
 8004b86:	e00c      	b.n	8004ba2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	43da      	mvns	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4013      	ands	r3, r2
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	bf0c      	ite	eq
 8004b9a:	2301      	moveq	r3, #1
 8004b9c:	2300      	movne	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d0b6      	beq.n	8004b16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bc0:	e051      	b.n	8004c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd0:	d123      	bne.n	8004c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f043 0204 	orr.w	r2, r3, #4
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e046      	b.n	8004ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d021      	beq.n	8004c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c22:	f7fc fd57 	bl	80016d4 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d302      	bcc.n	8004c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d116      	bne.n	8004c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f043 0220 	orr.w	r2, r3, #32
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e020      	b.n	8004ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	0c1b      	lsrs	r3, r3, #16
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d10c      	bne.n	8004c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	43da      	mvns	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	bf14      	ite	ne
 8004c82:	2301      	movne	r3, #1
 8004c84:	2300      	moveq	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	e00b      	b.n	8004ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	43da      	mvns	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4013      	ands	r3, r2
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bf14      	ite	ne
 8004c9c:	2301      	movne	r3, #1
 8004c9e:	2300      	moveq	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d18d      	bne.n	8004bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cbc:	e02d      	b.n	8004d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f8ce 	bl	8004e60 <I2C_IsAcknowledgeFailed>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e02d      	b.n	8004d2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d021      	beq.n	8004d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd6:	f7fc fcfd 	bl	80016d4 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d302      	bcc.n	8004cec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d116      	bne.n	8004d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f043 0220 	orr.w	r2, r3, #32
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e007      	b.n	8004d2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d24:	2b80      	cmp	r3, #128	; 0x80
 8004d26:	d1ca      	bne.n	8004cbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d3e:	e02d      	b.n	8004d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 f88d 	bl	8004e60 <I2C_IsAcknowledgeFailed>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e02d      	b.n	8004dac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d56:	d021      	beq.n	8004d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d58:	f7fc fcbc 	bl	80016d4 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d302      	bcc.n	8004d6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d116      	bne.n	8004d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	f043 0220 	orr.w	r2, r3, #32
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e007      	b.n	8004dac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d1ca      	bne.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dc0:	e042      	b.n	8004e48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d119      	bne.n	8004e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0210 	mvn.w	r2, #16
 8004dd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e029      	b.n	8004e58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e04:	f7fc fc66 	bl	80016d4 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d302      	bcc.n	8004e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d116      	bne.n	8004e48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e007      	b.n	8004e58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	d1b5      	bne.n	8004dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e76:	d11b      	bne.n	8004eb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	f043 0204 	orr.w	r2, r3, #4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
	...

08004ec0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e128      	b.n	8005124 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d109      	bne.n	8004ef2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a90      	ldr	r2, [pc, #576]	; (800512c <HAL_I2S_Init+0x26c>)
 8004eea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7fc fa1d 	bl	800132c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004f08:	f023 030f 	bic.w	r3, r3, #15
 8004f0c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2202      	movs	r2, #2
 8004f14:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d060      	beq.n	8004fe0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004f26:	2310      	movs	r3, #16
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	e001      	b.n	8004f30 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004f2c:	2320      	movs	r3, #32
 8004f2e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	d802      	bhi.n	8004f3e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004f3e:	2001      	movs	r0, #1
 8004f40:	f001 fdc8 	bl	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f44:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f4e:	d125      	bne.n	8004f9c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d010      	beq.n	8004f7a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f74:	3305      	adds	r3, #5
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	e01f      	b.n	8004fba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f96:	3305      	adds	r3, #5
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	e00e      	b.n	8004fba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	461a      	mov	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb6:	3305      	adds	r3, #5
 8004fb8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4a5c      	ldr	r2, [pc, #368]	; (8005130 <HAL_I2S_Init+0x270>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	08db      	lsrs	r3, r3, #3
 8004fc4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	085b      	lsrs	r3, r3, #1
 8004fd6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	021b      	lsls	r3, r3, #8
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	e003      	b.n	8004fe8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d902      	bls.n	8004ff4 <HAL_I2S_Init+0x134>
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	2bff      	cmp	r3, #255	; 0xff
 8004ff2:	d907      	bls.n	8005004 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff8:	f043 0210 	orr.w	r2, r3, #16
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e08f      	b.n	8005124 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	ea42 0103 	orr.w	r1, r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	430a      	orrs	r2, r1
 8005016:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005022:	f023 030f 	bic.w	r3, r3, #15
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6851      	ldr	r1, [r2, #4]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6892      	ldr	r2, [r2, #8]
 800502e:	4311      	orrs	r1, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	68d2      	ldr	r2, [r2, #12]
 8005034:	4311      	orrs	r1, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6992      	ldr	r2, [r2, #24]
 800503a:	430a      	orrs	r2, r1
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005046:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d161      	bne.n	8005114 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a38      	ldr	r2, [pc, #224]	; (8005134 <HAL_I2S_Init+0x274>)
 8005054:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a37      	ldr	r2, [pc, #220]	; (8005138 <HAL_I2S_Init+0x278>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d101      	bne.n	8005064 <HAL_I2S_Init+0x1a4>
 8005060:	4b36      	ldr	r3, [pc, #216]	; (800513c <HAL_I2S_Init+0x27c>)
 8005062:	e001      	b.n	8005068 <HAL_I2S_Init+0x1a8>
 8005064:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	4932      	ldr	r1, [pc, #200]	; (8005138 <HAL_I2S_Init+0x278>)
 8005070:	428a      	cmp	r2, r1
 8005072:	d101      	bne.n	8005078 <HAL_I2S_Init+0x1b8>
 8005074:	4a31      	ldr	r2, [pc, #196]	; (800513c <HAL_I2S_Init+0x27c>)
 8005076:	e001      	b.n	800507c <HAL_I2S_Init+0x1bc>
 8005078:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800507c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005080:	f023 030f 	bic.w	r3, r3, #15
 8005084:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a2b      	ldr	r2, [pc, #172]	; (8005138 <HAL_I2S_Init+0x278>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d101      	bne.n	8005094 <HAL_I2S_Init+0x1d4>
 8005090:	4b2a      	ldr	r3, [pc, #168]	; (800513c <HAL_I2S_Init+0x27c>)
 8005092:	e001      	b.n	8005098 <HAL_I2S_Init+0x1d8>
 8005094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005098:	2202      	movs	r2, #2
 800509a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a25      	ldr	r2, [pc, #148]	; (8005138 <HAL_I2S_Init+0x278>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d101      	bne.n	80050aa <HAL_I2S_Init+0x1ea>
 80050a6:	4b25      	ldr	r3, [pc, #148]	; (800513c <HAL_I2S_Init+0x27c>)
 80050a8:	e001      	b.n	80050ae <HAL_I2S_Init+0x1ee>
 80050aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ba:	d003      	beq.n	80050c4 <HAL_I2S_Init+0x204>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d103      	bne.n	80050cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80050c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	e001      	b.n	80050d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80050cc:	2300      	movs	r3, #0
 80050ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80050da:	4313      	orrs	r3, r2
 80050dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80050e4:	4313      	orrs	r3, r2
 80050e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80050ee:	4313      	orrs	r3, r2
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	897b      	ldrh	r3, [r7, #10]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a0d      	ldr	r2, [pc, #52]	; (8005138 <HAL_I2S_Init+0x278>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <HAL_I2S_Init+0x24c>
 8005108:	4b0c      	ldr	r3, [pc, #48]	; (800513c <HAL_I2S_Init+0x27c>)
 800510a:	e001      	b.n	8005110 <HAL_I2S_Init+0x250>
 800510c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005110:	897a      	ldrh	r2, [r7, #10]
 8005112:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3720      	adds	r7, #32
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	080059bd 	.word	0x080059bd
 8005130:	cccccccd 	.word	0xcccccccd
 8005134:	08005b45 	.word	0x08005b45
 8005138:	40003800 	.word	0x40003800
 800513c:	40003400 	.word	0x40003400

08005140 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	4613      	mov	r3, r2
 800514c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_I2S_Transmit_DMA+0x1a>
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e08e      	b.n	800527c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_I2S_Transmit_DMA+0x2e>
 800516a:	2302      	movs	r3, #2
 800516c:	e086      	b.n	800527c <HAL_I2S_Transmit_DMA+0x13c>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b01      	cmp	r3, #1
 8005180:	d005      	beq.n	800518e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800518a:	2302      	movs	r3, #2
 800518c:	e076      	b.n	800527c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2203      	movs	r2, #3
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d002      	beq.n	80051ba <HAL_I2S_Transmit_DMA+0x7a>
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2b05      	cmp	r3, #5
 80051b8:	d10a      	bne.n	80051d0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80051c4:	88fb      	ldrh	r3, [r7, #6]
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051ce:	e005      	b.n	80051dc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	88fa      	ldrh	r2, [r7, #6]
 80051da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	4a28      	ldr	r2, [pc, #160]	; (8005284 <HAL_I2S_Transmit_DMA+0x144>)
 80051e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	4a27      	ldr	r2, [pc, #156]	; (8005288 <HAL_I2S_Transmit_DMA+0x148>)
 80051ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	4a26      	ldr	r2, [pc, #152]	; (800528c <HAL_I2S_Transmit_DMA+0x14c>)
 80051f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80051fc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005204:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800520c:	f7fc fc52 	bl	8001ab4 <HAL_DMA_Start_IT>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00f      	beq.n	8005236 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521a:	f043 0208 	orr.w	r2, r3, #8
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e022      	b.n	800527c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005240:	2b00      	cmp	r3, #0
 8005242:	d107      	bne.n	8005254 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69da      	ldr	r2, [r3, #28]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005252:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d107      	bne.n	8005272 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0202 	orr.w	r2, r2, #2
 8005270:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	0800589b 	.word	0x0800589b
 8005288:	08005859 	.word	0x08005859
 800528c:	080058b7 	.word	0x080058b7

08005290 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_I2S_DMAPause+0x18>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e04a      	b.n	800533e <HAL_I2S_DMAPause+0xae>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d108      	bne.n	80052ce <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0202 	bic.w	r2, r2, #2
 80052ca:	605a      	str	r2, [r3, #4]
 80052cc:	e032      	b.n	8005334 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d108      	bne.n	80052ec <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0201 	bic.w	r2, r2, #1
 80052e8:	605a      	str	r2, [r3, #4]
 80052ea:	e023      	b.n	8005334 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b05      	cmp	r3, #5
 80052f6:	d11d      	bne.n	8005334 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0203 	bic.w	r2, r2, #3
 8005306:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a0f      	ldr	r2, [pc, #60]	; (800534c <HAL_I2S_DMAPause+0xbc>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d101      	bne.n	8005316 <HAL_I2S_DMAPause+0x86>
 8005312:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <HAL_I2S_DMAPause+0xc0>)
 8005314:	e001      	b.n	800531a <HAL_I2S_DMAPause+0x8a>
 8005316:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	490a      	ldr	r1, [pc, #40]	; (800534c <HAL_I2S_DMAPause+0xbc>)
 8005322:	428b      	cmp	r3, r1
 8005324:	d101      	bne.n	800532a <HAL_I2S_DMAPause+0x9a>
 8005326:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <HAL_I2S_DMAPause+0xc0>)
 8005328:	e001      	b.n	800532e <HAL_I2S_DMAPause+0x9e>
 800532a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800532e:	f022 0203 	bic.w	r2, r2, #3
 8005332:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40003800 	.word	0x40003800
 8005350:	40003400 	.word	0x40003400

08005354 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_I2S_DMAResume+0x18>
 8005368:	2302      	movs	r3, #2
 800536a:	e07d      	b.n	8005468 <HAL_I2S_DMAResume+0x114>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b03      	cmp	r3, #3
 800537e:	d108      	bne.n	8005392 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0202 	orr.w	r2, r2, #2
 800538e:	605a      	str	r2, [r3, #4]
 8005390:	e056      	b.n	8005440 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b04      	cmp	r3, #4
 800539c:	d108      	bne.n	80053b0 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0201 	orr.w	r2, r2, #1
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	e047      	b.n	8005440 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b05      	cmp	r3, #5
 80053ba:	d141      	bne.n	8005440 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0203 	orr.w	r2, r2, #3
 80053ca:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a28      	ldr	r2, [pc, #160]	; (8005474 <HAL_I2S_DMAResume+0x120>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d101      	bne.n	80053da <HAL_I2S_DMAResume+0x86>
 80053d6:	4b28      	ldr	r3, [pc, #160]	; (8005478 <HAL_I2S_DMAResume+0x124>)
 80053d8:	e001      	b.n	80053de <HAL_I2S_DMAResume+0x8a>
 80053da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4923      	ldr	r1, [pc, #140]	; (8005474 <HAL_I2S_DMAResume+0x120>)
 80053e6:	428b      	cmp	r3, r1
 80053e8:	d101      	bne.n	80053ee <HAL_I2S_DMAResume+0x9a>
 80053ea:	4b23      	ldr	r3, [pc, #140]	; (8005478 <HAL_I2S_DMAResume+0x124>)
 80053ec:	e001      	b.n	80053f2 <HAL_I2S_DMAResume+0x9e>
 80053ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053f2:	f042 0203 	orr.w	r2, r2, #3
 80053f6:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <HAL_I2S_DMAResume+0x120>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d101      	bne.n	8005406 <HAL_I2S_DMAResume+0xb2>
 8005402:	4b1d      	ldr	r3, [pc, #116]	; (8005478 <HAL_I2S_DMAResume+0x124>)
 8005404:	e001      	b.n	800540a <HAL_I2S_DMAResume+0xb6>
 8005406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005410:	2b00      	cmp	r3, #0
 8005412:	d115      	bne.n	8005440 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a16      	ldr	r2, [pc, #88]	; (8005474 <HAL_I2S_DMAResume+0x120>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d101      	bne.n	8005422 <HAL_I2S_DMAResume+0xce>
 800541e:	4b16      	ldr	r3, [pc, #88]	; (8005478 <HAL_I2S_DMAResume+0x124>)
 8005420:	e001      	b.n	8005426 <HAL_I2S_DMAResume+0xd2>
 8005422:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005426:	69da      	ldr	r2, [r3, #28]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4911      	ldr	r1, [pc, #68]	; (8005474 <HAL_I2S_DMAResume+0x120>)
 800542e:	428b      	cmp	r3, r1
 8005430:	d101      	bne.n	8005436 <HAL_I2S_DMAResume+0xe2>
 8005432:	4b11      	ldr	r3, [pc, #68]	; (8005478 <HAL_I2S_DMAResume+0x124>)
 8005434:	e001      	b.n	800543a <HAL_I2S_DMAResume+0xe6>
 8005436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800543a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800543e:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544a:	2b00      	cmp	r3, #0
 800544c:	d107      	bne.n	800545e <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800545c:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	40003800 	.word	0x40003800
 8005478:	40003400 	.word	0x40003400

0800547c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005490:	d004      	beq.n	800549c <HAL_I2S_DMAStop+0x20>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f040 80d1 	bne.w	800563e <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00f      	beq.n	80054c4 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fc fb5b 	bl	8001b64 <HAL_DMA_Abort>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d007      	beq.n	80054c4 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b8:	f043 0208 	orr.w	r2, r3, #8
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80054c4:	2364      	movs	r3, #100	; 0x64
 80054c6:	2201      	movs	r2, #1
 80054c8:	2102      	movs	r1, #2
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fb00 	bl	8005ad0 <I2S_WaitFlagStateUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054da:	f043 0201 	orr.w	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80054ee:	2364      	movs	r3, #100	; 0x64
 80054f0:	2200      	movs	r2, #0
 80054f2:	2180      	movs	r1, #128	; 0x80
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 faeb 	bl	8005ad0 <I2S_WaitFlagStateUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005504:	f043 0201 	orr.w	r2, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	69da      	ldr	r2, [r3, #28]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005526:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0202 	bic.w	r2, r2, #2
 8005544:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b05      	cmp	r3, #5
 8005550:	f040 8165 	bne.w	800581e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00f      	beq.n	800557c <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005560:	4618      	mov	r0, r3
 8005562:	f7fc faff 	bl	8001b64 <HAL_DMA_Abort>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d007      	beq.n	800557c <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005570:	f043 0208 	orr.w	r2, r3, #8
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a8a      	ldr	r2, [pc, #552]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d101      	bne.n	800558a <HAL_I2S_DMAStop+0x10e>
 8005586:	4b8a      	ldr	r3, [pc, #552]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 8005588:	e001      	b.n	800558e <HAL_I2S_DMAStop+0x112>
 800558a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4985      	ldr	r1, [pc, #532]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 8005596:	428b      	cmp	r3, r1
 8005598:	d101      	bne.n	800559e <HAL_I2S_DMAStop+0x122>
 800559a:	4b85      	ldr	r3, [pc, #532]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 800559c:	e001      	b.n	80055a2 <HAL_I2S_DMAStop+0x126>
 800559e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a6:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80055a8:	2300      	movs	r3, #0
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a7e      	ldr	r2, [pc, #504]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d101      	bne.n	80055ba <HAL_I2S_DMAStop+0x13e>
 80055b6:	4b7e      	ldr	r3, [pc, #504]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 80055b8:	e001      	b.n	80055be <HAL_I2S_DMAStop+0x142>
 80055ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a79      	ldr	r2, [pc, #484]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d101      	bne.n	80055d0 <HAL_I2S_DMAStop+0x154>
 80055cc:	4b78      	ldr	r3, [pc, #480]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 80055ce:	e001      	b.n	80055d4 <HAL_I2S_DMAStop+0x158>
 80055d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a73      	ldr	r2, [pc, #460]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d101      	bne.n	80055e8 <HAL_I2S_DMAStop+0x16c>
 80055e4:	4b72      	ldr	r3, [pc, #456]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 80055e6:	e001      	b.n	80055ec <HAL_I2S_DMAStop+0x170>
 80055e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	496e      	ldr	r1, [pc, #440]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 80055f4:	428b      	cmp	r3, r1
 80055f6:	d101      	bne.n	80055fc <HAL_I2S_DMAStop+0x180>
 80055f8:	4b6d      	ldr	r3, [pc, #436]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 80055fa:	e001      	b.n	8005600 <HAL_I2S_DMAStop+0x184>
 80055fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005600:	f022 0201 	bic.w	r2, r2, #1
 8005604:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10c      	bne.n	8005628 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005612:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005626:	e0fa      	b.n	800581e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a5f      	ldr	r2, [pc, #380]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d101      	bne.n	8005636 <HAL_I2S_DMAStop+0x1ba>
 8005632:	4b5f      	ldr	r3, [pc, #380]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 8005634:	e001      	b.n	800563a <HAL_I2S_DMAStop+0x1be>
 8005636:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800563a:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800563c:	e0ef      	b.n	800581e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005646:	d005      	beq.n	8005654 <HAL_I2S_DMAStop+0x1d8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005650:	f040 80e5 	bne.w	800581e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00f      	beq.n	800567c <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005660:	4618      	mov	r0, r3
 8005662:	f7fc fa7f 	bl	8001b64 <HAL_DMA_Abort>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005670:	f043 0208 	orr.w	r2, r3, #8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b05      	cmp	r3, #5
 8005686:	f040 809a 	bne.w	80057be <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00f      	beq.n	80056b2 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	4618      	mov	r0, r3
 8005698:	f7fc fa64 	bl	8001b64 <HAL_DMA_Abort>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a6:	f043 0208 	orr.w	r2, r3, #8
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80056b2:	f7fc f80f 	bl	80016d4 <HAL_GetTick>
 80056b6:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80056b8:	e012      	b.n	80056e0 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80056ba:	f7fc f80b 	bl	80016d4 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b64      	cmp	r3, #100	; 0x64
 80056c6:	d90b      	bls.n	80056e0 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056cc:	f043 0201 	orr.w	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a31      	ldr	r2, [pc, #196]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d101      	bne.n	80056ee <HAL_I2S_DMAStop+0x272>
 80056ea:	4b31      	ldr	r3, [pc, #196]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 80056ec:	e001      	b.n	80056f2 <HAL_I2S_DMAStop+0x276>
 80056ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d1de      	bne.n	80056ba <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80056fc:	e012      	b.n	8005724 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80056fe:	f7fb ffe9 	bl	80016d4 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b64      	cmp	r3, #100	; 0x64
 800570a:	d90b      	bls.n	8005724 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005710:	f043 0201 	orr.w	r2, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a20      	ldr	r2, [pc, #128]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d101      	bne.n	8005732 <HAL_I2S_DMAStop+0x2b6>
 800572e:	4b20      	ldr	r3, [pc, #128]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 8005730:	e001      	b.n	8005736 <HAL_I2S_DMAStop+0x2ba>
 8005732:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573c:	2b80      	cmp	r3, #128	; 0x80
 800573e:	d0de      	beq.n	80056fe <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a19      	ldr	r2, [pc, #100]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d101      	bne.n	800574e <HAL_I2S_DMAStop+0x2d2>
 800574a:	4b19      	ldr	r3, [pc, #100]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 800574c:	e001      	b.n	8005752 <HAL_I2S_DMAStop+0x2d6>
 800574e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4914      	ldr	r1, [pc, #80]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 800575a:	428b      	cmp	r3, r1
 800575c:	d101      	bne.n	8005762 <HAL_I2S_DMAStop+0x2e6>
 800575e:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 8005760:	e001      	b.n	8005766 <HAL_I2S_DMAStop+0x2ea>
 8005762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800576a:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a0d      	ldr	r2, [pc, #52]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d101      	bne.n	800577e <HAL_I2S_DMAStop+0x302>
 800577a:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 800577c:	e001      	b.n	8005782 <HAL_I2S_DMAStop+0x306>
 800577e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a07      	ldr	r2, [pc, #28]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d101      	bne.n	8005796 <HAL_I2S_DMAStop+0x31a>
 8005792:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 8005794:	e001      	b.n	800579a <HAL_I2S_DMAStop+0x31e>
 8005796:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4902      	ldr	r1, [pc, #8]	; (80057ac <HAL_I2S_DMAStop+0x330>)
 80057a2:	428b      	cmp	r3, r1
 80057a4:	d106      	bne.n	80057b4 <HAL_I2S_DMAStop+0x338>
 80057a6:	4b02      	ldr	r3, [pc, #8]	; (80057b0 <HAL_I2S_DMAStop+0x334>)
 80057a8:	e006      	b.n	80057b8 <HAL_I2S_DMAStop+0x33c>
 80057aa:	bf00      	nop
 80057ac:	40003800 	.word	0x40003800
 80057b0:	40003400 	.word	0x40003400
 80057b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057b8:	f022 0202 	bic.w	r2, r2, #2
 80057bc:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057cc:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80057ce:	2300      	movs	r3, #0
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	60bb      	str	r3, [r7, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	60bb      	str	r3, [r7, #8]
 80057e2:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0201 	bic.w	r2, r2, #1
 80057f2:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fc:	d10c      	bne.n	8005818 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005802:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	77fb      	strb	r3, [r7, #31]
 8005816:	e002      	b.n	800581e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8005826:	7ffb      	ldrb	r3, [r7, #31]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10e      	bne.n	800588c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0202 	bic.w	r2, r2, #2
 800587c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f7fb f959 	bl	8000b44 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005892:	bf00      	nop
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f7fb f95d 	bl	8000b68 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80058ae:	bf00      	nop
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0203 	bic.w	r2, r2, #3
 80058d2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ec:	f043 0208 	orr.w	r2, r3, #8
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7ff ffa5 	bl	8005844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b082      	sub	sp, #8
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	881a      	ldrh	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	1c9a      	adds	r2, r3, #2
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10e      	bne.n	8005956 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005946:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7fb f8f7 	bl	8000b44 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005956:	bf00      	nop
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	b292      	uxth	r2, r2
 8005972:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	1c9a      	adds	r2, r3, #2
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10e      	bne.n	80059b4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059a4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff ff3e 	bl	8005830 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d13a      	bne.n	8005a4e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d109      	bne.n	80059f6 <I2S_IRQHandler+0x3a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ec:	2b40      	cmp	r3, #64	; 0x40
 80059ee:	d102      	bne.n	80059f6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7ff ffb4 	bl	800595e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fc:	2b40      	cmp	r3, #64	; 0x40
 80059fe:	d126      	bne.n	8005a4e <I2S_IRQHandler+0x92>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d11f      	bne.n	8005a4e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a1c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a40:	f043 0202 	orr.w	r2, r3, #2
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff fefb 	bl	8005844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d136      	bne.n	8005ac8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d109      	bne.n	8005a78 <I2S_IRQHandler+0xbc>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6e:	2b80      	cmp	r3, #128	; 0x80
 8005a70:	d102      	bne.n	8005a78 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff ff45 	bl	8005902 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d122      	bne.n	8005ac8 <I2S_IRQHandler+0x10c>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	d11b      	bne.n	8005ac8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a9e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aba:	f043 0204 	orr.w	r2, r3, #4
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff febe 	bl	8005844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ac8:	bf00      	nop
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	4613      	mov	r3, r2
 8005ade:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ae0:	f7fb fdf8 	bl	80016d4 <HAL_GetTick>
 8005ae4:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005ae6:	e018      	b.n	8005b1a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aee:	d014      	beq.n	8005b1a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005af0:	f7fb fdf0 	bl	80016d4 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d902      	bls.n	8005b06 <I2S_WaitFlagStateUntilTimeout+0x36>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d109      	bne.n	8005b1a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e00f      	b.n	8005b3a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4013      	ands	r3, r2
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	bf0c      	ite	eq
 8005b2a:	2301      	moveq	r3, #1
 8005b2c:	2300      	movne	r3, #0
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	461a      	mov	r2, r3
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d1d7      	bne.n	8005ae8 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4aa2      	ldr	r2, [pc, #648]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d101      	bne.n	8005b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005b5e:	4ba2      	ldr	r3, [pc, #648]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005b60:	e001      	b.n	8005b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005b62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a9b      	ldr	r2, [pc, #620]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d101      	bne.n	8005b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005b7c:	4b9a      	ldr	r3, [pc, #616]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005b7e:	e001      	b.n	8005b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005b80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b90:	d004      	beq.n	8005b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f040 8099 	bne.w	8005cce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d107      	bne.n	8005bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f925 	bl	8005e00 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d107      	bne.n	8005bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f9c8 	bl	8005f60 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd6:	2b40      	cmp	r3, #64	; 0x40
 8005bd8:	d13a      	bne.n	8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f003 0320 	and.w	r3, r3, #32
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d035      	beq.n	8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a7e      	ldr	r2, [pc, #504]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d101      	bne.n	8005bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005bee:	4b7e      	ldr	r3, [pc, #504]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005bf0:	e001      	b.n	8005bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005bf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4979      	ldr	r1, [pc, #484]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005bfe:	428b      	cmp	r3, r1
 8005c00:	d101      	bne.n	8005c06 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005c02:	4b79      	ldr	r3, [pc, #484]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005c04:	e001      	b.n	8005c0a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005c06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c0e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c1e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c42:	f043 0202 	orr.w	r2, r3, #2
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff fdfa 	bl	8005844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b08      	cmp	r3, #8
 8005c58:	f040 80be 	bne.w	8005dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 80b8 	beq.w	8005dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c76:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a59      	ldr	r2, [pc, #356]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d101      	bne.n	8005c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005c82:	4b59      	ldr	r3, [pc, #356]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005c84:	e001      	b.n	8005c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005c86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4954      	ldr	r1, [pc, #336]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005c92:	428b      	cmp	r3, r1
 8005c94:	d101      	bne.n	8005c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005c96:	4b54      	ldr	r3, [pc, #336]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005c98:	e001      	b.n	8005c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005c9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ca2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60bb      	str	r3, [r7, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbe:	f043 0204 	orr.w	r2, r3, #4
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7ff fdbc 	bl	8005844 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ccc:	e084      	b.n	8005dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d107      	bne.n	8005ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f8be 	bl	8005e64 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d107      	bne.n	8005d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f8fd 	bl	8005efc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b40      	cmp	r3, #64	; 0x40
 8005d0a:	d12f      	bne.n	8005d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d02a      	beq.n	8005d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d24:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a2e      	ldr	r2, [pc, #184]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d101      	bne.n	8005d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005d30:	4b2d      	ldr	r3, [pc, #180]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d32:	e001      	b.n	8005d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005d34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4929      	ldr	r1, [pc, #164]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d40:	428b      	cmp	r3, r1
 8005d42:	d101      	bne.n	8005d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005d44:	4b28      	ldr	r3, [pc, #160]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d46:	e001      	b.n	8005d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005d48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d50:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5e:	f043 0202 	orr.w	r2, r3, #2
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff fd6c 	bl	8005844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	f003 0308 	and.w	r3, r3, #8
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d131      	bne.n	8005dda <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f003 0320 	and.w	r3, r3, #32
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d02c      	beq.n	8005dda <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a17      	ldr	r2, [pc, #92]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d101      	bne.n	8005d8e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005d8a:	4b17      	ldr	r3, [pc, #92]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d8c:	e001      	b.n	8005d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005d8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4912      	ldr	r1, [pc, #72]	; (8005de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d9a:	428b      	cmp	r3, r1
 8005d9c:	d101      	bne.n	8005da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005d9e:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005da0:	e001      	b.n	8005da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005da2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005da6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005daa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005dba:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc8:	f043 0204 	orr.w	r2, r3, #4
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff fd37 	bl	8005844 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005dd6:	e000      	b.n	8005dda <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005dd8:	bf00      	nop
}
 8005dda:	bf00      	nop
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	40003800 	.word	0x40003800
 8005de8:	40003400 	.word	0x40003400

08005dec <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	1c99      	adds	r1, r3, #2
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6251      	str	r1, [r2, #36]	; 0x24
 8005e12:	881a      	ldrh	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d113      	bne.n	8005e5a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d106      	bne.n	8005e5a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff ffc9 	bl	8005dec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e5a:	bf00      	nop
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	1c99      	adds	r1, r3, #2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6251      	str	r1, [r2, #36]	; 0x24
 8005e76:	8819      	ldrh	r1, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ef4 <I2SEx_TxISR_I2SExt+0x90>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d101      	bne.n	8005e86 <I2SEx_TxISR_I2SExt+0x22>
 8005e82:	4b1d      	ldr	r3, [pc, #116]	; (8005ef8 <I2SEx_TxISR_I2SExt+0x94>)
 8005e84:	e001      	b.n	8005e8a <I2SEx_TxISR_I2SExt+0x26>
 8005e86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e8a:	460a      	mov	r2, r1
 8005e8c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d121      	bne.n	8005eea <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a12      	ldr	r2, [pc, #72]	; (8005ef4 <I2SEx_TxISR_I2SExt+0x90>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d101      	bne.n	8005eb4 <I2SEx_TxISR_I2SExt+0x50>
 8005eb0:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <I2SEx_TxISR_I2SExt+0x94>)
 8005eb2:	e001      	b.n	8005eb8 <I2SEx_TxISR_I2SExt+0x54>
 8005eb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	490d      	ldr	r1, [pc, #52]	; (8005ef4 <I2SEx_TxISR_I2SExt+0x90>)
 8005ec0:	428b      	cmp	r3, r1
 8005ec2:	d101      	bne.n	8005ec8 <I2SEx_TxISR_I2SExt+0x64>
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <I2SEx_TxISR_I2SExt+0x94>)
 8005ec6:	e001      	b.n	8005ecc <I2SEx_TxISR_I2SExt+0x68>
 8005ec8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ecc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ed0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff ff81 	bl	8005dec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005eea:	bf00      	nop
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40003800 	.word	0x40003800
 8005ef8:	40003400 	.word	0x40003400

08005efc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68d8      	ldr	r0, [r3, #12]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	1c99      	adds	r1, r3, #2
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005f14:	b282      	uxth	r2, r0
 8005f16:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d113      	bne.n	8005f58 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f3e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff ff4a 	bl	8005dec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a20      	ldr	r2, [pc, #128]	; (8005ff0 <I2SEx_RxISR_I2SExt+0x90>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d101      	bne.n	8005f76 <I2SEx_RxISR_I2SExt+0x16>
 8005f72:	4b20      	ldr	r3, [pc, #128]	; (8005ff4 <I2SEx_RxISR_I2SExt+0x94>)
 8005f74:	e001      	b.n	8005f7a <I2SEx_RxISR_I2SExt+0x1a>
 8005f76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f7a:	68d8      	ldr	r0, [r3, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	1c99      	adds	r1, r3, #2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005f86:	b282      	uxth	r2, r0
 8005f88:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d121      	bne.n	8005fe6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a12      	ldr	r2, [pc, #72]	; (8005ff0 <I2SEx_RxISR_I2SExt+0x90>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d101      	bne.n	8005fb0 <I2SEx_RxISR_I2SExt+0x50>
 8005fac:	4b11      	ldr	r3, [pc, #68]	; (8005ff4 <I2SEx_RxISR_I2SExt+0x94>)
 8005fae:	e001      	b.n	8005fb4 <I2SEx_RxISR_I2SExt+0x54>
 8005fb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	490d      	ldr	r1, [pc, #52]	; (8005ff0 <I2SEx_RxISR_I2SExt+0x90>)
 8005fbc:	428b      	cmp	r3, r1
 8005fbe:	d101      	bne.n	8005fc4 <I2SEx_RxISR_I2SExt+0x64>
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <I2SEx_RxISR_I2SExt+0x94>)
 8005fc2:	e001      	b.n	8005fc8 <I2SEx_RxISR_I2SExt+0x68>
 8005fc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fcc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d106      	bne.n	8005fe6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff ff03 	bl	8005dec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	40003800 	.word	0x40003800
 8005ff4:	40003400 	.word	0x40003400

08005ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e264      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d075      	beq.n	8006102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006016:	4ba3      	ldr	r3, [pc, #652]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	2b04      	cmp	r3, #4
 8006020:	d00c      	beq.n	800603c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006022:	4ba0      	ldr	r3, [pc, #640]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800602a:	2b08      	cmp	r3, #8
 800602c:	d112      	bne.n	8006054 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800602e:	4b9d      	ldr	r3, [pc, #628]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800603a:	d10b      	bne.n	8006054 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800603c:	4b99      	ldr	r3, [pc, #612]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d05b      	beq.n	8006100 <HAL_RCC_OscConfig+0x108>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d157      	bne.n	8006100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e23f      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605c:	d106      	bne.n	800606c <HAL_RCC_OscConfig+0x74>
 800605e:	4b91      	ldr	r3, [pc, #580]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a90      	ldr	r2, [pc, #576]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	e01d      	b.n	80060a8 <HAL_RCC_OscConfig+0xb0>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006074:	d10c      	bne.n	8006090 <HAL_RCC_OscConfig+0x98>
 8006076:	4b8b      	ldr	r3, [pc, #556]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a8a      	ldr	r2, [pc, #552]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800607c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	4b88      	ldr	r3, [pc, #544]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a87      	ldr	r2, [pc, #540]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	e00b      	b.n	80060a8 <HAL_RCC_OscConfig+0xb0>
 8006090:	4b84      	ldr	r3, [pc, #528]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a83      	ldr	r2, [pc, #524]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	4b81      	ldr	r3, [pc, #516]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a80      	ldr	r2, [pc, #512]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 80060a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d013      	beq.n	80060d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b0:	f7fb fb10 	bl	80016d4 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060b8:	f7fb fb0c 	bl	80016d4 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b64      	cmp	r3, #100	; 0x64
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e204      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ca:	4b76      	ldr	r3, [pc, #472]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f0      	beq.n	80060b8 <HAL_RCC_OscConfig+0xc0>
 80060d6:	e014      	b.n	8006102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d8:	f7fb fafc 	bl	80016d4 <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060e0:	f7fb faf8 	bl	80016d4 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b64      	cmp	r3, #100	; 0x64
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e1f0      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060f2:	4b6c      	ldr	r3, [pc, #432]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1f0      	bne.n	80060e0 <HAL_RCC_OscConfig+0xe8>
 80060fe:	e000      	b.n	8006102 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d063      	beq.n	80061d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800610e:	4b65      	ldr	r3, [pc, #404]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00b      	beq.n	8006132 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800611a:	4b62      	ldr	r3, [pc, #392]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006122:	2b08      	cmp	r3, #8
 8006124:	d11c      	bne.n	8006160 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006126:	4b5f      	ldr	r3, [pc, #380]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d116      	bne.n	8006160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006132:	4b5c      	ldr	r3, [pc, #368]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d005      	beq.n	800614a <HAL_RCC_OscConfig+0x152>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d001      	beq.n	800614a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e1c4      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800614a:	4b56      	ldr	r3, [pc, #344]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4952      	ldr	r1, [pc, #328]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800615a:	4313      	orrs	r3, r2
 800615c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800615e:	e03a      	b.n	80061d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d020      	beq.n	80061aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006168:	4b4f      	ldr	r3, [pc, #316]	; (80062a8 <HAL_RCC_OscConfig+0x2b0>)
 800616a:	2201      	movs	r2, #1
 800616c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616e:	f7fb fab1 	bl	80016d4 <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006176:	f7fb faad 	bl	80016d4 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e1a5      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006188:	4b46      	ldr	r3, [pc, #280]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f0      	beq.n	8006176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006194:	4b43      	ldr	r3, [pc, #268]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	4940      	ldr	r1, [pc, #256]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	600b      	str	r3, [r1, #0]
 80061a8:	e015      	b.n	80061d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061aa:	4b3f      	ldr	r3, [pc, #252]	; (80062a8 <HAL_RCC_OscConfig+0x2b0>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b0:	f7fb fa90 	bl	80016d4 <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061b8:	f7fb fa8c 	bl	80016d4 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e184      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ca:	4b36      	ldr	r3, [pc, #216]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d030      	beq.n	8006244 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d016      	beq.n	8006218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061ea:	4b30      	ldr	r3, [pc, #192]	; (80062ac <HAL_RCC_OscConfig+0x2b4>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f0:	f7fb fa70 	bl	80016d4 <HAL_GetTick>
 80061f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061f6:	e008      	b.n	800620a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061f8:	f7fb fa6c 	bl	80016d4 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e164      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800620a:	4b26      	ldr	r3, [pc, #152]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800620c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0f0      	beq.n	80061f8 <HAL_RCC_OscConfig+0x200>
 8006216:	e015      	b.n	8006244 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006218:	4b24      	ldr	r3, [pc, #144]	; (80062ac <HAL_RCC_OscConfig+0x2b4>)
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800621e:	f7fb fa59 	bl	80016d4 <HAL_GetTick>
 8006222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006224:	e008      	b.n	8006238 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006226:	f7fb fa55 	bl	80016d4 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e14d      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006238:	4b1a      	ldr	r3, [pc, #104]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800623a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1f0      	bne.n	8006226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 80a0 	beq.w	8006392 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006252:	2300      	movs	r3, #0
 8006254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006256:	4b13      	ldr	r3, [pc, #76]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10f      	bne.n	8006282 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006262:	2300      	movs	r3, #0
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	4a0e      	ldr	r2, [pc, #56]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 800626c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006270:	6413      	str	r3, [r2, #64]	; 0x40
 8006272:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <HAL_RCC_OscConfig+0x2ac>)
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627a:	60bb      	str	r3, [r7, #8]
 800627c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800627e:	2301      	movs	r3, #1
 8006280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006282:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <HAL_RCC_OscConfig+0x2b8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628a:	2b00      	cmp	r3, #0
 800628c:	d121      	bne.n	80062d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800628e:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <HAL_RCC_OscConfig+0x2b8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a07      	ldr	r2, [pc, #28]	; (80062b0 <HAL_RCC_OscConfig+0x2b8>)
 8006294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800629a:	f7fb fa1b 	bl	80016d4 <HAL_GetTick>
 800629e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062a0:	e011      	b.n	80062c6 <HAL_RCC_OscConfig+0x2ce>
 80062a2:	bf00      	nop
 80062a4:	40023800 	.word	0x40023800
 80062a8:	42470000 	.word	0x42470000
 80062ac:	42470e80 	.word	0x42470e80
 80062b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062b4:	f7fb fa0e 	bl	80016d4 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e106      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c6:	4b85      	ldr	r3, [pc, #532]	; (80064dc <HAL_RCC_OscConfig+0x4e4>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f0      	beq.n	80062b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d106      	bne.n	80062e8 <HAL_RCC_OscConfig+0x2f0>
 80062da:	4b81      	ldr	r3, [pc, #516]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	4a80      	ldr	r2, [pc, #512]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 80062e0:	f043 0301 	orr.w	r3, r3, #1
 80062e4:	6713      	str	r3, [r2, #112]	; 0x70
 80062e6:	e01c      	b.n	8006322 <HAL_RCC_OscConfig+0x32a>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2b05      	cmp	r3, #5
 80062ee:	d10c      	bne.n	800630a <HAL_RCC_OscConfig+0x312>
 80062f0:	4b7b      	ldr	r3, [pc, #492]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 80062f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f4:	4a7a      	ldr	r2, [pc, #488]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 80062f6:	f043 0304 	orr.w	r3, r3, #4
 80062fa:	6713      	str	r3, [r2, #112]	; 0x70
 80062fc:	4b78      	ldr	r3, [pc, #480]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 80062fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006300:	4a77      	ldr	r2, [pc, #476]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	6713      	str	r3, [r2, #112]	; 0x70
 8006308:	e00b      	b.n	8006322 <HAL_RCC_OscConfig+0x32a>
 800630a:	4b75      	ldr	r3, [pc, #468]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 800630c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630e:	4a74      	ldr	r2, [pc, #464]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 8006310:	f023 0301 	bic.w	r3, r3, #1
 8006314:	6713      	str	r3, [r2, #112]	; 0x70
 8006316:	4b72      	ldr	r3, [pc, #456]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 8006318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631a:	4a71      	ldr	r2, [pc, #452]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 800631c:	f023 0304 	bic.w	r3, r3, #4
 8006320:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d015      	beq.n	8006356 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632a:	f7fb f9d3 	bl	80016d4 <HAL_GetTick>
 800632e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006330:	e00a      	b.n	8006348 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006332:	f7fb f9cf 	bl	80016d4 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006340:	4293      	cmp	r3, r2
 8006342:	d901      	bls.n	8006348 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e0c5      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006348:	4b65      	ldr	r3, [pc, #404]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0ee      	beq.n	8006332 <HAL_RCC_OscConfig+0x33a>
 8006354:	e014      	b.n	8006380 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006356:	f7fb f9bd 	bl	80016d4 <HAL_GetTick>
 800635a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800635c:	e00a      	b.n	8006374 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800635e:	f7fb f9b9 	bl	80016d4 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	f241 3288 	movw	r2, #5000	; 0x1388
 800636c:	4293      	cmp	r3, r2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e0af      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006374:	4b5a      	ldr	r3, [pc, #360]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 8006376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1ee      	bne.n	800635e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006380:	7dfb      	ldrb	r3, [r7, #23]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d105      	bne.n	8006392 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006386:	4b56      	ldr	r3, [pc, #344]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	4a55      	ldr	r2, [pc, #340]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 800638c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006390:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 809b 	beq.w	80064d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800639c:	4b50      	ldr	r3, [pc, #320]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f003 030c 	and.w	r3, r3, #12
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d05c      	beq.n	8006462 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d141      	bne.n	8006434 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063b0:	4b4c      	ldr	r3, [pc, #304]	; (80064e4 <HAL_RCC_OscConfig+0x4ec>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b6:	f7fb f98d 	bl	80016d4 <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063be:	f7fb f989 	bl	80016d4 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e081      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d0:	4b43      	ldr	r3, [pc, #268]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f0      	bne.n	80063be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	019b      	lsls	r3, r3, #6
 80063ec:	431a      	orrs	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	3b01      	subs	r3, #1
 80063f6:	041b      	lsls	r3, r3, #16
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	061b      	lsls	r3, r3, #24
 8006400:	4937      	ldr	r1, [pc, #220]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 8006402:	4313      	orrs	r3, r2
 8006404:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006406:	4b37      	ldr	r3, [pc, #220]	; (80064e4 <HAL_RCC_OscConfig+0x4ec>)
 8006408:	2201      	movs	r2, #1
 800640a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800640c:	f7fb f962 	bl	80016d4 <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006414:	f7fb f95e 	bl	80016d4 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e056      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006426:	4b2e      	ldr	r3, [pc, #184]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0f0      	beq.n	8006414 <HAL_RCC_OscConfig+0x41c>
 8006432:	e04e      	b.n	80064d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006434:	4b2b      	ldr	r3, [pc, #172]	; (80064e4 <HAL_RCC_OscConfig+0x4ec>)
 8006436:	2200      	movs	r2, #0
 8006438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800643a:	f7fb f94b 	bl	80016d4 <HAL_GetTick>
 800643e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006440:	e008      	b.n	8006454 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006442:	f7fb f947 	bl	80016d4 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d901      	bls.n	8006454 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e03f      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006454:	4b22      	ldr	r3, [pc, #136]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1f0      	bne.n	8006442 <HAL_RCC_OscConfig+0x44a>
 8006460:	e037      	b.n	80064d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e032      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800646e:	4b1c      	ldr	r3, [pc, #112]	; (80064e0 <HAL_RCC_OscConfig+0x4e8>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d028      	beq.n	80064ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006486:	429a      	cmp	r2, r3
 8006488:	d121      	bne.n	80064ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006494:	429a      	cmp	r2, r3
 8006496:	d11a      	bne.n	80064ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800649e:	4013      	ands	r3, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d111      	bne.n	80064ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b4:	085b      	lsrs	r3, r3, #1
 80064b6:	3b01      	subs	r3, #1
 80064b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d107      	bne.n	80064ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d001      	beq.n	80064d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e000      	b.n	80064d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40007000 	.word	0x40007000
 80064e0:	40023800 	.word	0x40023800
 80064e4:	42470060 	.word	0x42470060

080064e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0cc      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064fc:	4b68      	ldr	r3, [pc, #416]	; (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0307 	and.w	r3, r3, #7
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d90c      	bls.n	8006524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800650a:	4b65      	ldr	r3, [pc, #404]	; (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006512:	4b63      	ldr	r3, [pc, #396]	; (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d001      	beq.n	8006524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e0b8      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d020      	beq.n	8006572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800653c:	4b59      	ldr	r3, [pc, #356]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	4a58      	ldr	r2, [pc, #352]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006546:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006554:	4b53      	ldr	r3, [pc, #332]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	4a52      	ldr	r2, [pc, #328]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800655a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800655e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006560:	4b50      	ldr	r3, [pc, #320]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	494d      	ldr	r1, [pc, #308]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800656e:	4313      	orrs	r3, r2
 8006570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d044      	beq.n	8006608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d107      	bne.n	8006596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006586:	4b47      	ldr	r3, [pc, #284]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d119      	bne.n	80065c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e07f      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b02      	cmp	r3, #2
 800659c:	d003      	beq.n	80065a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d107      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a6:	4b3f      	ldr	r3, [pc, #252]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d109      	bne.n	80065c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e06f      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b6:	4b3b      	ldr	r3, [pc, #236]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e067      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065c6:	4b37      	ldr	r3, [pc, #220]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f023 0203 	bic.w	r2, r3, #3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	4934      	ldr	r1, [pc, #208]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065d8:	f7fb f87c 	bl	80016d4 <HAL_GetTick>
 80065dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065de:	e00a      	b.n	80065f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065e0:	f7fb f878 	bl	80016d4 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e04f      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f6:	4b2b      	ldr	r3, [pc, #172]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 020c 	and.w	r2, r3, #12
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	429a      	cmp	r2, r3
 8006606:	d1eb      	bne.n	80065e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006608:	4b25      	ldr	r3, [pc, #148]	; (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d20c      	bcs.n	8006630 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006616:	4b22      	ldr	r3, [pc, #136]	; (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800661e:	4b20      	ldr	r3, [pc, #128]	; (80066a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d001      	beq.n	8006630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e032      	b.n	8006696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d008      	beq.n	800664e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800663c:	4b19      	ldr	r3, [pc, #100]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	4916      	ldr	r1, [pc, #88]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800664a:	4313      	orrs	r3, r2
 800664c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d009      	beq.n	800666e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800665a:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	490e      	ldr	r1, [pc, #56]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 800666a:	4313      	orrs	r3, r2
 800666c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800666e:	f000 f821 	bl	80066b4 <HAL_RCC_GetSysClockFreq>
 8006672:	4602      	mov	r2, r0
 8006674:	4b0b      	ldr	r3, [pc, #44]	; (80066a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	091b      	lsrs	r3, r3, #4
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	490a      	ldr	r1, [pc, #40]	; (80066a8 <HAL_RCC_ClockConfig+0x1c0>)
 8006680:	5ccb      	ldrb	r3, [r1, r3]
 8006682:	fa22 f303 	lsr.w	r3, r2, r3
 8006686:	4a09      	ldr	r2, [pc, #36]	; (80066ac <HAL_RCC_ClockConfig+0x1c4>)
 8006688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800668a:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <HAL_RCC_ClockConfig+0x1c8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4618      	mov	r0, r3
 8006690:	f7fa ffdc 	bl	800164c <HAL_InitTick>

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	40023c00 	.word	0x40023c00
 80066a4:	40023800 	.word	0x40023800
 80066a8:	0800db5c 	.word	0x0800db5c
 80066ac:	20000000 	.word	0x20000000
 80066b0:	20000004 	.word	0x20000004

080066b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	607b      	str	r3, [r7, #4]
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	2300      	movs	r3, #0
 80066c6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066cc:	4b67      	ldr	r3, [pc, #412]	; (800686c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f003 030c 	and.w	r3, r3, #12
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d00d      	beq.n	80066f4 <HAL_RCC_GetSysClockFreq+0x40>
 80066d8:	2b08      	cmp	r3, #8
 80066da:	f200 80bd 	bhi.w	8006858 <HAL_RCC_GetSysClockFreq+0x1a4>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_RCC_GetSysClockFreq+0x34>
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d003      	beq.n	80066ee <HAL_RCC_GetSysClockFreq+0x3a>
 80066e6:	e0b7      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066e8:	4b61      	ldr	r3, [pc, #388]	; (8006870 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80066ea:	60bb      	str	r3, [r7, #8]
       break;
 80066ec:	e0b7      	b.n	800685e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066ee:	4b61      	ldr	r3, [pc, #388]	; (8006874 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80066f0:	60bb      	str	r3, [r7, #8]
      break;
 80066f2:	e0b4      	b.n	800685e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066f4:	4b5d      	ldr	r3, [pc, #372]	; (800686c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066fe:	4b5b      	ldr	r3, [pc, #364]	; (800686c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d04d      	beq.n	80067a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800670a:	4b58      	ldr	r3, [pc, #352]	; (800686c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	099b      	lsrs	r3, r3, #6
 8006710:	461a      	mov	r2, r3
 8006712:	f04f 0300 	mov.w	r3, #0
 8006716:	f240 10ff 	movw	r0, #511	; 0x1ff
 800671a:	f04f 0100 	mov.w	r1, #0
 800671e:	ea02 0800 	and.w	r8, r2, r0
 8006722:	ea03 0901 	and.w	r9, r3, r1
 8006726:	4640      	mov	r0, r8
 8006728:	4649      	mov	r1, r9
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	014b      	lsls	r3, r1, #5
 8006734:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006738:	0142      	lsls	r2, r0, #5
 800673a:	4610      	mov	r0, r2
 800673c:	4619      	mov	r1, r3
 800673e:	ebb0 0008 	subs.w	r0, r0, r8
 8006742:	eb61 0109 	sbc.w	r1, r1, r9
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	018b      	lsls	r3, r1, #6
 8006750:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006754:	0182      	lsls	r2, r0, #6
 8006756:	1a12      	subs	r2, r2, r0
 8006758:	eb63 0301 	sbc.w	r3, r3, r1
 800675c:	f04f 0000 	mov.w	r0, #0
 8006760:	f04f 0100 	mov.w	r1, #0
 8006764:	00d9      	lsls	r1, r3, #3
 8006766:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800676a:	00d0      	lsls	r0, r2, #3
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	eb12 0208 	adds.w	r2, r2, r8
 8006774:	eb43 0309 	adc.w	r3, r3, r9
 8006778:	f04f 0000 	mov.w	r0, #0
 800677c:	f04f 0100 	mov.w	r1, #0
 8006780:	0259      	lsls	r1, r3, #9
 8006782:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006786:	0250      	lsls	r0, r2, #9
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4610      	mov	r0, r2
 800678e:	4619      	mov	r1, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	461a      	mov	r2, r3
 8006794:	f04f 0300 	mov.w	r3, #0
 8006798:	f7f9 fd16 	bl	80001c8 <__aeabi_uldivmod>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	4613      	mov	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	e04a      	b.n	800683c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067a6:	4b31      	ldr	r3, [pc, #196]	; (800686c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	099b      	lsrs	r3, r3, #6
 80067ac:	461a      	mov	r2, r3
 80067ae:	f04f 0300 	mov.w	r3, #0
 80067b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80067b6:	f04f 0100 	mov.w	r1, #0
 80067ba:	ea02 0400 	and.w	r4, r2, r0
 80067be:	ea03 0501 	and.w	r5, r3, r1
 80067c2:	4620      	mov	r0, r4
 80067c4:	4629      	mov	r1, r5
 80067c6:	f04f 0200 	mov.w	r2, #0
 80067ca:	f04f 0300 	mov.w	r3, #0
 80067ce:	014b      	lsls	r3, r1, #5
 80067d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80067d4:	0142      	lsls	r2, r0, #5
 80067d6:	4610      	mov	r0, r2
 80067d8:	4619      	mov	r1, r3
 80067da:	1b00      	subs	r0, r0, r4
 80067dc:	eb61 0105 	sbc.w	r1, r1, r5
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	018b      	lsls	r3, r1, #6
 80067ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80067ee:	0182      	lsls	r2, r0, #6
 80067f0:	1a12      	subs	r2, r2, r0
 80067f2:	eb63 0301 	sbc.w	r3, r3, r1
 80067f6:	f04f 0000 	mov.w	r0, #0
 80067fa:	f04f 0100 	mov.w	r1, #0
 80067fe:	00d9      	lsls	r1, r3, #3
 8006800:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006804:	00d0      	lsls	r0, r2, #3
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	1912      	adds	r2, r2, r4
 800680c:	eb45 0303 	adc.w	r3, r5, r3
 8006810:	f04f 0000 	mov.w	r0, #0
 8006814:	f04f 0100 	mov.w	r1, #0
 8006818:	0299      	lsls	r1, r3, #10
 800681a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800681e:	0290      	lsls	r0, r2, #10
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4610      	mov	r0, r2
 8006826:	4619      	mov	r1, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	461a      	mov	r2, r3
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	f7f9 fcca 	bl	80001c8 <__aeabi_uldivmod>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4613      	mov	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800683c:	4b0b      	ldr	r3, [pc, #44]	; (800686c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	0c1b      	lsrs	r3, r3, #16
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	3301      	adds	r3, #1
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	fbb2 f3f3 	udiv	r3, r2, r3
 8006854:	60bb      	str	r3, [r7, #8]
      break;
 8006856:	e002      	b.n	800685e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006858:	4b05      	ldr	r3, [pc, #20]	; (8006870 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800685a:	60bb      	str	r3, [r7, #8]
      break;
 800685c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800685e:	68bb      	ldr	r3, [r7, #8]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800686a:	bf00      	nop
 800686c:	40023800 	.word	0x40023800
 8006870:	00f42400 	.word	0x00f42400
 8006874:	007a1200 	.word	0x007a1200

08006878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800687c:	4b03      	ldr	r3, [pc, #12]	; (800688c <HAL_RCC_GetHCLKFreq+0x14>)
 800687e:	681b      	ldr	r3, [r3, #0]
}
 8006880:	4618      	mov	r0, r3
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	20000000 	.word	0x20000000

08006890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006894:	f7ff fff0 	bl	8006878 <HAL_RCC_GetHCLKFreq>
 8006898:	4602      	mov	r2, r0
 800689a:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	0a9b      	lsrs	r3, r3, #10
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	4903      	ldr	r1, [pc, #12]	; (80068b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068a6:	5ccb      	ldrb	r3, [r1, r3]
 80068a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	40023800 	.word	0x40023800
 80068b4:	0800db6c 	.word	0x0800db6c

080068b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d105      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d035      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068e0:	4b62      	ldr	r3, [pc, #392]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068e6:	f7fa fef5 	bl	80016d4 <HAL_GetTick>
 80068ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068ec:	e008      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068ee:	f7fa fef1 	bl	80016d4 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d901      	bls.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e0b0      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006900:	4b5b      	ldr	r3, [pc, #364]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1f0      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	019a      	lsls	r2, r3, #6
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	071b      	lsls	r3, r3, #28
 8006918:	4955      	ldr	r1, [pc, #340]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800691a:	4313      	orrs	r3, r2
 800691c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006920:	4b52      	ldr	r3, [pc, #328]	; (8006a6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006922:	2201      	movs	r2, #1
 8006924:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006926:	f7fa fed5 	bl	80016d4 <HAL_GetTick>
 800692a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800692c:	e008      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800692e:	f7fa fed1 	bl	80016d4 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d901      	bls.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e090      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006940:	4b4b      	ldr	r3, [pc, #300]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0f0      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 8083 	beq.w	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	4b44      	ldr	r3, [pc, #272]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	4a43      	ldr	r2, [pc, #268]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006968:	6413      	str	r3, [r2, #64]	; 0x40
 800696a:	4b41      	ldr	r3, [pc, #260]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006976:	4b3f      	ldr	r3, [pc, #252]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a3e      	ldr	r2, [pc, #248]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800697c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006980:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006982:	f7fa fea7 	bl	80016d4 <HAL_GetTick>
 8006986:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006988:	e008      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800698a:	f7fa fea3 	bl	80016d4 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d901      	bls.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e062      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800699c:	4b35      	ldr	r3, [pc, #212]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0f0      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069a8:	4b31      	ldr	r3, [pc, #196]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d02f      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d028      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069c6:	4b2a      	ldr	r3, [pc, #168]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069d0:	4b29      	ldr	r3, [pc, #164]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80069d2:	2201      	movs	r2, #1
 80069d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069d6:	4b28      	ldr	r3, [pc, #160]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80069dc:	4a24      	ldr	r2, [pc, #144]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069e2:	4b23      	ldr	r3, [pc, #140]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d114      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80069ee:	f7fa fe71 	bl	80016d4 <HAL_GetTick>
 80069f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069f4:	e00a      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069f6:	f7fa fe6d 	bl	80016d4 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d901      	bls.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e02a      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a0c:	4b18      	ldr	r3, [pc, #96]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a10:	f003 0302 	and.w	r3, r3, #2
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d0ee      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a24:	d10d      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006a26:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a3a:	490d      	ldr	r1, [pc, #52]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	608b      	str	r3, [r1, #8]
 8006a40:	e005      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006a42:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	4a0a      	ldr	r2, [pc, #40]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a48:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a4c:	6093      	str	r3, [r2, #8]
 8006a4e:	4b08      	ldr	r3, [pc, #32]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a5a:	4905      	ldr	r1, [pc, #20]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	42470068 	.word	0x42470068
 8006a70:	40023800 	.word	0x40023800
 8006a74:	40007000 	.word	0x40007000
 8006a78:	42470e40 	.word	0x42470e40

08006a7c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2203      	movs	r2, #3
 8006a88:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006a8a:	4b11      	ldr	r3, [pc, #68]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a90:	099b      	lsrs	r3, r3, #6
 8006a92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aa0:	0f1b      	lsrs	r3, r3, #28
 8006aa2:	f003 0207 	and.w	r2, r3, #7
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006aaa:	4b09      	ldr	r3, [pc, #36]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006ab2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006ab4:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	40023800 	.word	0x40023800

08006ad4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d13e      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006af2:	4b23      	ldr	r3, [pc, #140]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d005      	beq.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d12f      	bne.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b08:	4b1e      	ldr	r3, [pc, #120]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b0a:	617b      	str	r3, [r7, #20]
          break;
 8006b0c:	e02f      	b.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006b0e:	4b1c      	ldr	r3, [pc, #112]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b1a:	d108      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b1c:	4b18      	ldr	r3, [pc, #96]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b24:	4a18      	ldr	r2, [pc, #96]	; (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	e007      	b.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b2e:	4b14      	ldr	r3, [pc, #80]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b36:	4a15      	ldr	r2, [pc, #84]	; (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006b3e:	4b10      	ldr	r3, [pc, #64]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b44:	099b      	lsrs	r3, r3, #6
 8006b46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	fb02 f303 	mul.w	r3, r2, r3
 8006b50:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006b52:	4b0b      	ldr	r3, [pc, #44]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b58:	0f1b      	lsrs	r3, r3, #28
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b64:	617b      	str	r3, [r7, #20]
          break;
 8006b66:	e002      	b.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	617b      	str	r3, [r7, #20]
          break;
 8006b6c:	bf00      	nop
        }
      }
      break;
 8006b6e:	bf00      	nop
    }
  }
  return frequency;
 8006b70:	697b      	ldr	r3, [r7, #20]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40023800 	.word	0x40023800
 8006b84:	00bb8000 	.word	0x00bb8000
 8006b88:	007a1200 	.word	0x007a1200
 8006b8c:	00f42400 	.word	0x00f42400

08006b90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b90:	b084      	sub	sp, #16
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	f107 001c 	add.w	r0, r7, #28
 8006b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d122      	bne.n	8006bee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d105      	bne.n	8006be2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f9a0 	bl	8006f28 <USB_CoreReset>
 8006be8:	4603      	mov	r3, r0
 8006bea:	73fb      	strb	r3, [r7, #15]
 8006bec:	e01a      	b.n	8006c24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f994 	bl	8006f28 <USB_CoreReset>
 8006c00:	4603      	mov	r3, r0
 8006c02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	639a      	str	r2, [r3, #56]	; 0x38
 8006c16:	e005      	b.n	8006c24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d10b      	bne.n	8006c42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f043 0206 	orr.w	r2, r3, #6
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f043 0220 	orr.w	r2, r3, #32
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c4e:	b004      	add	sp, #16
 8006c50:	4770      	bx	lr

08006c52 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f043 0201 	orr.w	r2, r3, #1
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f023 0201 	bic.w	r2, r3, #1
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cb2:	78fb      	ldrb	r3, [r7, #3]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d115      	bne.n	8006ce4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cc4:	2001      	movs	r0, #1
 8006cc6:	f7fa fd11 	bl	80016ec <HAL_Delay>
      ms++;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f91a 	bl	8006f0a <USB_GetMode>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d01e      	beq.n	8006d1a <USB_SetCurrentMode+0x84>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b31      	cmp	r3, #49	; 0x31
 8006ce0:	d9f0      	bls.n	8006cc4 <USB_SetCurrentMode+0x2e>
 8006ce2:	e01a      	b.n	8006d1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ce4:	78fb      	ldrb	r3, [r7, #3]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d115      	bne.n	8006d16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cf6:	2001      	movs	r0, #1
 8006cf8:	f7fa fcf8 	bl	80016ec <HAL_Delay>
      ms++;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f901 	bl	8006f0a <USB_GetMode>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <USB_SetCurrentMode+0x84>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b31      	cmp	r3, #49	; 0x31
 8006d12:	d9f0      	bls.n	8006cf6 <USB_SetCurrentMode+0x60>
 8006d14:	e001      	b.n	8006d1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e005      	b.n	8006d26 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b32      	cmp	r3, #50	; 0x32
 8006d1e:	d101      	bne.n	8006d24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e000      	b.n	8006d26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	019b      	lsls	r3, r3, #6
 8006d42:	f043 0220 	orr.w	r2, r3, #32
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	4a08      	ldr	r2, [pc, #32]	; (8006d74 <USB_FlushTxFifo+0x44>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d901      	bls.n	8006d5a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e006      	b.n	8006d68 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d0f1      	beq.n	8006d4a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	00030d40 	.word	0x00030d40

08006d78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2210      	movs	r2, #16
 8006d88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	4a08      	ldr	r2, [pc, #32]	; (8006db4 <USB_FlushRxFifo+0x3c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d901      	bls.n	8006d9a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e006      	b.n	8006da8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0310 	and.w	r3, r3, #16
 8006da2:	2b10      	cmp	r3, #16
 8006da4:	d0f1      	beq.n	8006d8a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	00030d40 	.word	0x00030d40

08006db8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b089      	sub	sp, #36	; 0x24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	71fb      	strb	r3, [r7, #7]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006dd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d123      	bne.n	8006e26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006dde:	88bb      	ldrh	r3, [r7, #4]
 8006de0:	3303      	adds	r3, #3
 8006de2:	089b      	lsrs	r3, r3, #2
 8006de4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006de6:	2300      	movs	r3, #0
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	e018      	b.n	8006e1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	031a      	lsls	r2, r3, #12
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df8:	461a      	mov	r2, r3
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	3301      	adds	r3, #1
 8006e04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	3301      	adds	r3, #1
 8006e16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d3e2      	bcc.n	8006dec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3724      	adds	r7, #36	; 0x24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b08b      	sub	sp, #44	; 0x2c
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e4a:	88fb      	ldrh	r3, [r7, #6]
 8006e4c:	089b      	lsrs	r3, r3, #2
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e52:	88fb      	ldrh	r3, [r7, #6]
 8006e54:	f003 0303 	and.w	r3, r3, #3
 8006e58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	623b      	str	r3, [r7, #32]
 8006e5e:	e014      	b.n	8006e8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	3301      	adds	r3, #1
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	3301      	adds	r3, #1
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	3301      	adds	r3, #1
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	3301      	adds	r3, #1
 8006e88:	623b      	str	r3, [r7, #32]
 8006e8a:	6a3a      	ldr	r2, [r7, #32]
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d3e6      	bcc.n	8006e60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e92:	8bfb      	ldrh	r3, [r7, #30]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d01e      	beq.n	8006ed6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f107 0310 	add.w	r3, r7, #16
 8006ea8:	6812      	ldr	r2, [r2, #0]
 8006eaa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	701a      	strb	r2, [r3, #0]
      i++;
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006eca:	8bfb      	ldrh	r3, [r7, #30]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ed0:	8bfb      	ldrh	r3, [r7, #30]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1ea      	bne.n	8006eac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	372c      	adds	r7, #44	; 0x2c
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006efc:	68fb      	ldr	r3, [r7, #12]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	f003 0301 	and.w	r3, r3, #1
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
	...

08006f28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3301      	adds	r3, #1
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	4a13      	ldr	r2, [pc, #76]	; (8006f88 <USB_CoreReset+0x60>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d901      	bls.n	8006f44 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e01a      	b.n	8006f7a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	daf3      	bge.n	8006f34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	f043 0201 	orr.w	r2, r3, #1
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	4a09      	ldr	r2, [pc, #36]	; (8006f88 <USB_CoreReset+0x60>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d901      	bls.n	8006f6c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e006      	b.n	8006f7a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d0f1      	beq.n	8006f5c <USB_CoreReset+0x34>

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	00030d40 	.word	0x00030d40

08006f8c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	f107 001c 	add.w	r0, r7, #28
 8006f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fa8:	461a      	mov	r2, r3
 8006faa:	2300      	movs	r3, #0
 8006fac:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d018      	beq.n	8007010 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d10a      	bne.n	8006ffa <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ff2:	f043 0304 	orr.w	r3, r3, #4
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	e014      	b.n	8007024 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007008:	f023 0304 	bic.w	r3, r3, #4
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	e009      	b.n	8007024 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800701e:	f023 0304 	bic.w	r3, r3, #4
 8007022:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007024:	2110      	movs	r1, #16
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff fe82 	bl	8006d30 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff fea3 	bl	8006d78 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007032:	2300      	movs	r3, #0
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	e015      	b.n	8007064 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	4413      	add	r3, r2
 8007040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007044:	461a      	mov	r2, r3
 8007046:	f04f 33ff 	mov.w	r3, #4294967295
 800704a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	4413      	add	r3, r2
 8007054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007058:	461a      	mov	r2, r3
 800705a:	2300      	movs	r3, #0
 800705c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3301      	adds	r3, #1
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	429a      	cmp	r2, r3
 800706a:	d3e5      	bcc.n	8007038 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f04f 32ff 	mov.w	r2, #4294967295
 8007078:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00b      	beq.n	800709e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800708c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a13      	ldr	r2, [pc, #76]	; (80070e0 <USB_HostInit+0x154>)
 8007092:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a13      	ldr	r2, [pc, #76]	; (80070e4 <USB_HostInit+0x158>)
 8007098:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800709c:	e009      	b.n	80070b2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2280      	movs	r2, #128	; 0x80
 80070a2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a10      	ldr	r2, [pc, #64]	; (80070e8 <USB_HostInit+0x15c>)
 80070a8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a0f      	ldr	r2, [pc, #60]	; (80070ec <USB_HostInit+0x160>)
 80070ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d105      	bne.n	80070c4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	f043 0210 	orr.w	r2, r3, #16
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	699a      	ldr	r2, [r3, #24]
 80070c8:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <USB_HostInit+0x164>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070dc:	b004      	add	sp, #16
 80070de:	4770      	bx	lr
 80070e0:	01000200 	.word	0x01000200
 80070e4:	00e00300 	.word	0x00e00300
 80070e8:	00600080 	.word	0x00600080
 80070ec:	004000e0 	.word	0x004000e0
 80070f0:	a3200008 	.word	0xa3200008

080070f4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007112:	f023 0303 	bic.w	r3, r3, #3
 8007116:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	68f9      	ldr	r1, [r7, #12]
 8007128:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800712c:	4313      	orrs	r3, r2
 800712e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d107      	bne.n	8007146 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800713c:	461a      	mov	r2, r3
 800713e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007142:	6053      	str	r3, [r2, #4]
 8007144:	e009      	b.n	800715a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007146:	78fb      	ldrb	r3, [r7, #3]
 8007148:	2b02      	cmp	r3, #2
 800714a:	d106      	bne.n	800715a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007152:	461a      	mov	r2, r3
 8007154:	f241 7370 	movw	r3, #6000	; 0x1770
 8007158:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007188:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007196:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007198:	2064      	movs	r0, #100	; 0x64
 800719a:	f7fa faa7 	bl	80016ec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80071a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071aa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80071ac:	200a      	movs	r0, #10
 80071ae:	f7fa fa9d 	bl	80016ec <HAL_Delay>

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80071e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d109      	bne.n	8007200 <USB_DriveVbus+0x44>
 80071ec:	78fb      	ldrb	r3, [r7, #3]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d106      	bne.n	8007200 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80071fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071fe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800720a:	d109      	bne.n	8007220 <USB_DriveVbus+0x64>
 800720c:	78fb      	ldrb	r3, [r7, #3]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d106      	bne.n	8007220 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800721a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800721e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	0c5b      	lsrs	r3, r3, #17
 800724c:	f003 0303 	and.w	r3, r3, #3
}
 8007250:	4618      	mov	r0, r3
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	b29b      	uxth	r3, r3
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
	...

08007280 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b088      	sub	sp, #32
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	4608      	mov	r0, r1
 800728a:	4611      	mov	r1, r2
 800728c:	461a      	mov	r2, r3
 800728e:	4603      	mov	r3, r0
 8007290:	70fb      	strb	r3, [r7, #3]
 8007292:	460b      	mov	r3, r1
 8007294:	70bb      	strb	r3, [r7, #2]
 8007296:	4613      	mov	r3, r2
 8007298:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80072a2:	78fb      	ldrb	r3, [r7, #3]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ae:	461a      	mov	r2, r3
 80072b0:	f04f 33ff 	mov.w	r3, #4294967295
 80072b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80072b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d87e      	bhi.n	80073bc <USB_HC_Init+0x13c>
 80072be:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <USB_HC_Init+0x44>)
 80072c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c4:	080072d5 	.word	0x080072d5
 80072c8:	0800737f 	.word	0x0800737f
 80072cc:	080072d5 	.word	0x080072d5
 80072d0:	08007341 	.word	0x08007341
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e0:	461a      	mov	r2, r3
 80072e2:	f240 439d 	movw	r3, #1181	; 0x49d
 80072e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80072e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	da10      	bge.n	8007312 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	78fa      	ldrb	r2, [r7, #3]
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	440a      	add	r2, r1
 8007306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800730a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800730e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007310:	e057      	b.n	80073c2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731a:	2b00      	cmp	r3, #0
 800731c:	d051      	beq.n	80073c2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800731e:	78fb      	ldrb	r3, [r7, #3]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	4413      	add	r3, r2
 8007326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	78fa      	ldrb	r2, [r7, #3]
 800732e:	0151      	lsls	r1, r2, #5
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	440a      	add	r2, r1
 8007334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007338:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800733c:	60d3      	str	r3, [r2, #12]
      break;
 800733e:	e040      	b.n	80073c2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007340:	78fb      	ldrb	r3, [r7, #3]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	4413      	add	r3, r2
 8007348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800734c:	461a      	mov	r2, r3
 800734e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007352:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007354:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007358:	2b00      	cmp	r3, #0
 800735a:	da34      	bge.n	80073c6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800735c:	78fb      	ldrb	r3, [r7, #3]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	4413      	add	r3, r2
 8007364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	78fa      	ldrb	r2, [r7, #3]
 800736c:	0151      	lsls	r1, r2, #5
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	440a      	add	r2, r1
 8007372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800737a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800737c:	e023      	b.n	80073c6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800737e:	78fb      	ldrb	r3, [r7, #3]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	4413      	add	r3, r2
 8007386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738a:	461a      	mov	r2, r3
 800738c:	f240 2325 	movw	r3, #549	; 0x225
 8007390:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007392:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007396:	2b00      	cmp	r3, #0
 8007398:	da17      	bge.n	80073ca <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800739a:	78fb      	ldrb	r3, [r7, #3]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	78fa      	ldrb	r2, [r7, #3]
 80073aa:	0151      	lsls	r1, r2, #5
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	440a      	add	r2, r1
 80073b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073b4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80073b8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80073ba:	e006      	b.n	80073ca <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	77fb      	strb	r3, [r7, #31]
      break;
 80073c0:	e004      	b.n	80073cc <USB_HC_Init+0x14c>
      break;
 80073c2:	bf00      	nop
 80073c4:	e002      	b.n	80073cc <USB_HC_Init+0x14c>
      break;
 80073c6:	bf00      	nop
 80073c8:	e000      	b.n	80073cc <USB_HC_Init+0x14c>
      break;
 80073ca:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073d2:	699a      	ldr	r2, [r3, #24]
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	2101      	movs	r1, #1
 80073dc:	fa01 f303 	lsl.w	r3, r1, r3
 80073e0:	6939      	ldr	r1, [r7, #16]
 80073e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80073e6:	4313      	orrs	r3, r2
 80073e8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80073f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	da03      	bge.n	8007406 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80073fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007402:	61bb      	str	r3, [r7, #24]
 8007404:	e001      	b.n	800740a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7ff ff0f 	bl	800722e <USB_GetHostSpeed>
 8007410:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007412:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007416:	2b02      	cmp	r3, #2
 8007418:	d106      	bne.n	8007428 <USB_HC_Init+0x1a8>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d003      	beq.n	8007428 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007424:	617b      	str	r3, [r7, #20]
 8007426:	e001      	b.n	800742c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800742c:	787b      	ldrb	r3, [r7, #1]
 800742e:	059b      	lsls	r3, r3, #22
 8007430:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007434:	78bb      	ldrb	r3, [r7, #2]
 8007436:	02db      	lsls	r3, r3, #11
 8007438:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800743c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800743e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007442:	049b      	lsls	r3, r3, #18
 8007444:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007448:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800744a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800744c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007450:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007456:	78fb      	ldrb	r3, [r7, #3]
 8007458:	0159      	lsls	r1, r3, #5
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	440b      	add	r3, r1
 800745e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007462:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007468:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800746a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800746e:	2b03      	cmp	r3, #3
 8007470:	d10f      	bne.n	8007492 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	4413      	add	r3, r2
 800747a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	0151      	lsls	r1, r2, #5
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	440a      	add	r2, r1
 8007488:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800748c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007490:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007492:	7ffb      	ldrb	r3, [r7, #31]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3720      	adds	r7, #32
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08c      	sub	sp, #48	; 0x30
 80074a0:	af02      	add	r7, sp, #8
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	4613      	mov	r3, r2
 80074a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	785b      	ldrb	r3, [r3, #1]
 80074b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80074b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074b8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d02d      	beq.n	8007522 <USB_HC_StartXfer+0x86>
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	791b      	ldrb	r3, [r3, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d129      	bne.n	8007522 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80074ce:	79fb      	ldrb	r3, [r7, #7]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d117      	bne.n	8007504 <USB_HC_StartXfer+0x68>
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	79db      	ldrb	r3, [r3, #7]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <USB_HC_StartXfer+0x48>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	79db      	ldrb	r3, [r3, #7]
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d10f      	bne.n	8007504 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	69fa      	ldr	r2, [r7, #28]
 80074f4:	0151      	lsls	r1, r2, #5
 80074f6:	6a3a      	ldr	r2, [r7, #32]
 80074f8:	440a      	add	r2, r1
 80074fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007502:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007504:	79fb      	ldrb	r3, [r7, #7]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10b      	bne.n	8007522 <USB_HC_StartXfer+0x86>
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	795b      	ldrb	r3, [r3, #5]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d107      	bne.n	8007522 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	785b      	ldrb	r3, [r3, #1]
 8007516:	4619      	mov	r1, r3
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f000 fa2f 	bl	800797c <USB_DoPing>
      return HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	e0f8      	b.n	8007714 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d018      	beq.n	800755c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	8912      	ldrh	r2, [r2, #8]
 8007532:	4413      	add	r3, r2
 8007534:	3b01      	subs	r3, #1
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	8912      	ldrh	r2, [r2, #8]
 800753a:	fbb3 f3f2 	udiv	r3, r3, r2
 800753e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007540:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007542:	8b7b      	ldrh	r3, [r7, #26]
 8007544:	429a      	cmp	r2, r3
 8007546:	d90b      	bls.n	8007560 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007548:	8b7b      	ldrh	r3, [r7, #26]
 800754a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800754c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	8912      	ldrh	r2, [r2, #8]
 8007552:	fb02 f203 	mul.w	r2, r2, r3
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	611a      	str	r2, [r3, #16]
 800755a:	e001      	b.n	8007560 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800755c:	2301      	movs	r3, #1
 800755e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	78db      	ldrb	r3, [r3, #3]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d007      	beq.n	8007578 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007568:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	8912      	ldrh	r2, [r2, #8]
 800756e:	fb02 f203 	mul.w	r2, r2, r3
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	611a      	str	r2, [r3, #16]
 8007576:	e003      	b.n	8007580 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	695a      	ldr	r2, [r3, #20]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007588:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800758a:	04d9      	lsls	r1, r3, #19
 800758c:	4b63      	ldr	r3, [pc, #396]	; (800771c <USB_HC_StartXfer+0x280>)
 800758e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007590:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	7a9b      	ldrb	r3, [r3, #10]
 8007596:	075b      	lsls	r3, r3, #29
 8007598:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800759c:	69f9      	ldr	r1, [r7, #28]
 800759e:	0148      	lsls	r0, r1, #5
 80075a0:	6a39      	ldr	r1, [r7, #32]
 80075a2:	4401      	add	r1, r0
 80075a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80075a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d009      	beq.n	80075c6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	68d9      	ldr	r1, [r3, #12]
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c2:	460a      	mov	r2, r1
 80075c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	bf0c      	ite	eq
 80075d6:	2301      	moveq	r3, #1
 80075d8:	2300      	movne	r3, #0
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	69fa      	ldr	r2, [r7, #28]
 80075ee:	0151      	lsls	r1, r2, #5
 80075f0:	6a3a      	ldr	r2, [r7, #32]
 80075f2:	440a      	add	r2, r1
 80075f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80075fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	4413      	add	r3, r2
 8007606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	7e7b      	ldrb	r3, [r7, #25]
 800760e:	075b      	lsls	r3, r3, #29
 8007610:	69f9      	ldr	r1, [r7, #28]
 8007612:	0148      	lsls	r0, r1, #5
 8007614:	6a39      	ldr	r1, [r7, #32]
 8007616:	4401      	add	r1, r0
 8007618:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800761c:	4313      	orrs	r3, r2
 800761e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	4413      	add	r3, r2
 8007628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007636:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	78db      	ldrb	r3, [r3, #3]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d004      	beq.n	800764a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007646:	613b      	str	r3, [r7, #16]
 8007648:	e003      	b.n	8007652 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007650:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007658:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	4413      	add	r3, r2
 8007662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007666:	461a      	mov	r2, r3
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800766c:	79fb      	ldrb	r3, [r7, #7]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	e04e      	b.n	8007714 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	78db      	ldrb	r3, [r3, #3]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d149      	bne.n	8007712 <USB_HC_StartXfer+0x276>
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d045      	beq.n	8007712 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	79db      	ldrb	r3, [r3, #7]
 800768a:	2b03      	cmp	r3, #3
 800768c:	d830      	bhi.n	80076f0 <USB_HC_StartXfer+0x254>
 800768e:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <USB_HC_StartXfer+0x1f8>)
 8007690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007694:	080076a5 	.word	0x080076a5
 8007698:	080076c9 	.word	0x080076c9
 800769c:	080076a5 	.word	0x080076a5
 80076a0:	080076c9 	.word	0x080076c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	3303      	adds	r3, #3
 80076aa:	089b      	lsrs	r3, r3, #2
 80076ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80076ae:	8afa      	ldrh	r2, [r7, #22]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d91c      	bls.n	80076f4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	f043 0220 	orr.w	r2, r3, #32
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80076c6:	e015      	b.n	80076f4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	3303      	adds	r3, #3
 80076ce:	089b      	lsrs	r3, r3, #2
 80076d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80076d2:	8afa      	ldrh	r2, [r7, #22]
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	429a      	cmp	r2, r3
 80076e0:	d90a      	bls.n	80076f8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80076ee:	e003      	b.n	80076f8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80076f0:	bf00      	nop
 80076f2:	e002      	b.n	80076fa <USB_HC_StartXfer+0x25e>
        break;
 80076f4:	bf00      	nop
 80076f6:	e000      	b.n	80076fa <USB_HC_StartXfer+0x25e>
        break;
 80076f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	68d9      	ldr	r1, [r3, #12]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	785a      	ldrb	r2, [r3, #1]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	b29b      	uxth	r3, r3
 8007708:	2000      	movs	r0, #0
 800770a:	9000      	str	r0, [sp, #0]
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f7ff fb53 	bl	8006db8 <USB_WritePacket>
  }

  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3728      	adds	r7, #40	; 0x28
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	1ff80000 	.word	0x1ff80000

08007720 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	b29b      	uxth	r3, r3
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007742:	b480      	push	{r7}
 8007744:	b089      	sub	sp, #36	; 0x24
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007752:	78fb      	ldrb	r3, [r7, #3]
 8007754:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	4413      	add	r3, r2
 8007762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	0c9b      	lsrs	r3, r3, #18
 800776a:	f003 0303 	and.w	r3, r3, #3
 800776e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	4413      	add	r3, r2
 8007778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	0fdb      	lsrs	r3, r3, #31
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f003 0320 	and.w	r3, r3, #32
 800778e:	2b20      	cmp	r3, #32
 8007790:	d104      	bne.n	800779c <USB_HC_Halt+0x5a>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	e0e8      	b.n	800796e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <USB_HC_Halt+0x66>
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d173      	bne.n	8007890 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	0151      	lsls	r1, r2, #5
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	440a      	add	r2, r1
 80077be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077c6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f003 0320 	and.w	r3, r3, #32
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f040 80cb 	bne.w	800796c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d143      	bne.n	800786a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	0151      	lsls	r1, r2, #5
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	440a      	add	r2, r1
 80077f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007800:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	4413      	add	r3, r2
 800780a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	0151      	lsls	r1, r2, #5
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	440a      	add	r2, r1
 8007818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800781c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007820:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	4413      	add	r3, r2
 800782a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	0151      	lsls	r1, r2, #5
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	440a      	add	r2, r1
 8007838:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800783c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007840:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	3301      	adds	r3, #1
 8007846:	61fb      	str	r3, [r7, #28]
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800784e:	d81d      	bhi.n	800788c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	4413      	add	r3, r2
 8007858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007866:	d0ec      	beq.n	8007842 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007868:	e080      	b.n	800796c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	4413      	add	r3, r2
 8007872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	0151      	lsls	r1, r2, #5
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	440a      	add	r2, r1
 8007880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007888:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800788a:	e06f      	b.n	800796c <USB_HC_Halt+0x22a>
            break;
 800788c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800788e:	e06d      	b.n	800796c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	4413      	add	r3, r2
 8007898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	0151      	lsls	r1, r2, #5
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	440a      	add	r2, r1
 80078a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078ae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d143      	bne.n	8007948 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	0151      	lsls	r1, r2, #5
 80078d2:	69ba      	ldr	r2, [r7, #24]
 80078d4:	440a      	add	r2, r1
 80078d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	0151      	lsls	r1, r2, #5
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	440a      	add	r2, r1
 80078f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	4413      	add	r3, r2
 8007908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	0151      	lsls	r1, r2, #5
 8007912:	69ba      	ldr	r2, [r7, #24]
 8007914:	440a      	add	r2, r1
 8007916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800791a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800791e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	3301      	adds	r3, #1
 8007924:	61fb      	str	r3, [r7, #28]
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800792c:	d81d      	bhi.n	800796a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	4413      	add	r3, r2
 8007936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007944:	d0ec      	beq.n	8007920 <USB_HC_Halt+0x1de>
 8007946:	e011      	b.n	800796c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	4413      	add	r3, r2
 8007950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	0151      	lsls	r1, r2, #5
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	440a      	add	r2, r1
 800795e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	e000      	b.n	800796c <USB_HC_Halt+0x22a>
          break;
 800796a:	bf00      	nop
    }
  }

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3724      	adds	r7, #36	; 0x24
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
	...

0800797c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800798c:	78fb      	ldrb	r3, [r7, #3]
 800798e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007990:	2301      	movs	r3, #1
 8007992:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	04da      	lsls	r2, r3, #19
 8007998:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <USB_DoPing+0x74>)
 800799a:	4013      	ands	r3, r2
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	0151      	lsls	r1, r2, #5
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	440a      	add	r2, r1
 80079a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079ac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079c4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079cc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079da:	461a      	mov	r2, r3
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	371c      	adds	r7, #28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	1ff80000 	.word	0x1ff80000

080079f4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff f935 	bl	8006c74 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007a0a:	2110      	movs	r1, #16
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7ff f98f 	bl	8006d30 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff f9b0 	bl	8006d78 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007a18:	2300      	movs	r3, #0
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	e01f      	b.n	8007a5e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a34:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a3c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a44:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a52:	461a      	mov	r2, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	613b      	str	r3, [r7, #16]
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	2b0f      	cmp	r3, #15
 8007a62:	d9dc      	bls.n	8007a1e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007a64:	2300      	movs	r3, #0
 8007a66:	613b      	str	r3, [r7, #16]
 8007a68:	e034      	b.n	8007ad4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a80:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a88:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a90:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	617b      	str	r3, [r7, #20]
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ab0:	d80c      	bhi.n	8007acc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ac8:	d0ec      	beq.n	8007aa4 <USB_StopHost+0xb0>
 8007aca:	e000      	b.n	8007ace <USB_StopHost+0xda>
        break;
 8007acc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	613b      	str	r3, [r7, #16]
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	2b0f      	cmp	r3, #15
 8007ad8:	d9c7      	bls.n	8007a6a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f04f 32ff 	mov.w	r2, #4294967295
 8007aee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7ff f8ae 	bl	8006c52 <USB_EnableGlobalInt>

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8007b04:	4904      	ldr	r1, [pc, #16]	; (8007b18 <MX_FATFS_Init+0x18>)
 8007b06:	4805      	ldr	r0, [pc, #20]	; (8007b1c <MX_FATFS_Init+0x1c>)
 8007b08:	f005 fb86 	bl	800d218 <FATFS_LinkDriver>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	461a      	mov	r2, r3
 8007b10:	4b03      	ldr	r3, [pc, #12]	; (8007b20 <MX_FATFS_Init+0x20>)
 8007b12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007b14:	bf00      	nop
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	2000148c 	.word	0x2000148c
 8007b1c:	0800db7c 	.word	0x0800db7c
 8007b20:	200018f0 	.word	0x200018f0

08007b24 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007b24:	b480      	push	{r7}
 8007b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007b28:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	4603      	mov	r3, r0
 8007b54:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4808      	ldr	r0, [pc, #32]	; (8007b80 <USBH_status+0x34>)
 8007b60:	f000 fe1a 	bl	8008798 <USBH_MSC_UnitIsReady>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <USBH_status+0x24>
  {
    res = RES_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	73fb      	strb	r3, [r7, #15]
 8007b6e:	e001      	b.n	8007b74 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	200018f4 	.word	0x200018f4

08007b84 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b094      	sub	sp, #80	; 0x50
 8007b88:	af02      	add	r7, sp, #8
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	607a      	str	r2, [r7, #4]
 8007b8e:	603b      	str	r3, [r7, #0]
 8007b90:	4603      	mov	r3, r0
 8007b92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8007b9a:	7bf9      	ldrb	r1, [r7, #15]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	4813      	ldr	r0, [pc, #76]	; (8007bf4 <USBH_read+0x70>)
 8007ba6:	f000 fe41 	bl	800882c <USBH_MSC_Read>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d103      	bne.n	8007bb8 <USBH_read+0x34>
  {
    res = RES_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007bb6:	e017      	b.n	8007be8 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007bb8:	f107 0210 	add.w	r2, r7, #16
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	480c      	ldr	r0, [pc, #48]	; (8007bf4 <USBH_read+0x70>)
 8007bc2:	f000 fe0f 	bl	80087e4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007bc6:	7f7b      	ldrb	r3, [r7, #29]
 8007bc8:	2b3a      	cmp	r3, #58	; 0x3a
 8007bca:	d005      	beq.n	8007bd8 <USBH_read+0x54>
 8007bcc:	2b3a      	cmp	r3, #58	; 0x3a
 8007bce:	dc07      	bgt.n	8007be0 <USBH_read+0x5c>
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	d001      	beq.n	8007bd8 <USBH_read+0x54>
 8007bd4:	2b28      	cmp	r3, #40	; 0x28
 8007bd6:	d103      	bne.n	8007be0 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007bde:	e003      	b.n	8007be8 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007be6:	bf00      	nop
    }
  }

  return res;
 8007be8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3748      	adds	r7, #72	; 0x48
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	200018f4 	.word	0x200018f4

08007bf8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b094      	sub	sp, #80	; 0x50
 8007bfc:	af02      	add	r7, sp, #8
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	607a      	str	r2, [r7, #4]
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	4603      	mov	r3, r0
 8007c06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8007c0e:	7bf9      	ldrb	r1, [r7, #15]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	4817      	ldr	r0, [pc, #92]	; (8007c78 <USBH_write+0x80>)
 8007c1a:	f000 fe70 	bl	80088fe <USBH_MSC_Write>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d103      	bne.n	8007c2c <USBH_write+0x34>
  {
    res = RES_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007c2a:	e01f      	b.n	8007c6c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007c2c:	f107 0210 	add.w	r2, r7, #16
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	4619      	mov	r1, r3
 8007c34:	4810      	ldr	r0, [pc, #64]	; (8007c78 <USBH_write+0x80>)
 8007c36:	f000 fdd5 	bl	80087e4 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007c3a:	7f7b      	ldrb	r3, [r7, #29]
 8007c3c:	2b3a      	cmp	r3, #58	; 0x3a
 8007c3e:	d00d      	beq.n	8007c5c <USBH_write+0x64>
 8007c40:	2b3a      	cmp	r3, #58	; 0x3a
 8007c42:	dc0f      	bgt.n	8007c64 <USBH_write+0x6c>
 8007c44:	2b28      	cmp	r3, #40	; 0x28
 8007c46:	d009      	beq.n	8007c5c <USBH_write+0x64>
 8007c48:	2b28      	cmp	r3, #40	; 0x28
 8007c4a:	dc0b      	bgt.n	8007c64 <USBH_write+0x6c>
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d005      	beq.n	8007c5c <USBH_write+0x64>
 8007c50:	2b27      	cmp	r3, #39	; 0x27
 8007c52:	d107      	bne.n	8007c64 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8007c54:	2302      	movs	r3, #2
 8007c56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007c5a:	e007      	b.n	8007c6c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007c62:	e003      	b.n	8007c6c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007c6a:	bf00      	nop
    }
  }

  return res;
 8007c6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3748      	adds	r7, #72	; 0x48
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	200018f4 	.word	0x200018f4

08007c7c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b090      	sub	sp, #64	; 0x40
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	4603      	mov	r3, r0
 8007c84:	603a      	str	r2, [r7, #0]
 8007c86:	71fb      	strb	r3, [r7, #7]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8007c92:	79bb      	ldrb	r3, [r7, #6]
 8007c94:	2b03      	cmp	r3, #3
 8007c96:	d852      	bhi.n	8007d3e <USBH_ioctl+0xc2>
 8007c98:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <USBH_ioctl+0x24>)
 8007c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9e:	bf00      	nop
 8007ca0:	08007cb1 	.word	0x08007cb1
 8007ca4:	08007cb9 	.word	0x08007cb9
 8007ca8:	08007ce3 	.word	0x08007ce3
 8007cac:	08007d0f 	.word	0x08007d0f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007cb6:	e045      	b.n	8007d44 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007cb8:	f107 0208 	add.w	r2, r7, #8
 8007cbc:	79fb      	ldrb	r3, [r7, #7]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	4823      	ldr	r0, [pc, #140]	; (8007d50 <USBH_ioctl+0xd4>)
 8007cc2:	f000 fd8f 	bl	80087e4 <USBH_MSC_GetLUNInfo>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d106      	bne.n	8007cda <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007cd8:	e034      	b.n	8007d44 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007ce0:	e030      	b.n	8007d44 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007ce2:	f107 0208 	add.w	r2, r7, #8
 8007ce6:	79fb      	ldrb	r3, [r7, #7]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	4819      	ldr	r0, [pc, #100]	; (8007d50 <USBH_ioctl+0xd4>)
 8007cec:	f000 fd7a 	bl	80087e4 <USBH_MSC_GetLUNInfo>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d107      	bne.n	8007d06 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8007cf6:	8a3b      	ldrh	r3, [r7, #16]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007d04:	e01e      	b.n	8007d44 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007d0c:	e01a      	b.n	8007d44 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007d0e:	f107 0208 	add.w	r2, r7, #8
 8007d12:	79fb      	ldrb	r3, [r7, #7]
 8007d14:	4619      	mov	r1, r3
 8007d16:	480e      	ldr	r0, [pc, #56]	; (8007d50 <USBH_ioctl+0xd4>)
 8007d18:	f000 fd64 	bl	80087e4 <USBH_MSC_GetLUNInfo>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d109      	bne.n	8007d36 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8007d22:	8a3b      	ldrh	r3, [r7, #16]
 8007d24:	0a5b      	lsrs	r3, r3, #9
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	461a      	mov	r2, r3
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007d34:	e006      	b.n	8007d44 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007d3c:	e002      	b.n	8007d44 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8007d3e:	2304      	movs	r3, #4
 8007d40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8007d44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3740      	adds	r7, #64	; 0x40
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	200018f4 	.word	0x200018f4

08007d54 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007d54:	b590      	push	{r4, r7, lr}
 8007d56:	b089      	sub	sp, #36	; 0x24
 8007d58:	af04      	add	r7, sp, #16
 8007d5a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d62:	7919      	ldrb	r1, [r3, #4]
 8007d64:	2350      	movs	r3, #80	; 0x50
 8007d66:	2206      	movs	r2, #6
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f001 fc53 	bl	8009614 <USBH_FindInterface>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
 8007d74:	2bff      	cmp	r3, #255	; 0xff
 8007d76:	d002      	beq.n	8007d7e <USBH_MSC_InterfaceInit+0x2a>
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d901      	bls.n	8007d82 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	e0ef      	b.n	8007f62 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	4619      	mov	r1, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f001 fc28 	bl	80095dc <USBH_SelectInterface>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8007d96:	2302      	movs	r3, #2
 8007d98:	e0e3      	b.n	8007f62 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007da0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007da4:	f005 fd84 	bl	800d8b0 <malloc>
 8007da8:	4603      	mov	r3, r0
 8007daa:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	e0d0      	b.n	8007f62 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007dc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	68b8      	ldr	r0, [r7, #8]
 8007dc8:	f005 fd90 	bl	800d8ec <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	211a      	movs	r1, #26
 8007dd2:	fb01 f303 	mul.w	r3, r1, r3
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	b25b      	sxtb	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	da16      	bge.n	8007e12 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	211a      	movs	r1, #26
 8007dea:	fb01 f303 	mul.w	r3, r1, r3
 8007dee:	4413      	add	r3, r2
 8007df0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007df4:	781a      	ldrb	r2, [r3, #0]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	211a      	movs	r1, #26
 8007e00:	fb01 f303 	mul.w	r3, r1, r3
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e0a:	881a      	ldrh	r2, [r3, #0]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	815a      	strh	r2, [r3, #10]
 8007e10:	e015      	b.n	8007e3e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	211a      	movs	r1, #26
 8007e18:	fb01 f303 	mul.w	r3, r1, r3
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e22:	781a      	ldrb	r2, [r3, #0]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	211a      	movs	r1, #26
 8007e2e:	fb01 f303 	mul.w	r3, r1, r3
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e38:	881a      	ldrh	r2, [r3, #0]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	211a      	movs	r1, #26
 8007e44:	fb01 f303 	mul.w	r3, r1, r3
 8007e48:	4413      	add	r3, r2
 8007e4a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	b25b      	sxtb	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	da16      	bge.n	8007e84 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	211a      	movs	r1, #26
 8007e5c:	fb01 f303 	mul.w	r3, r1, r3
 8007e60:	4413      	add	r3, r2
 8007e62:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007e66:	781a      	ldrb	r2, [r3, #0]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	211a      	movs	r1, #26
 8007e72:	fb01 f303 	mul.w	r3, r1, r3
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007e7c:	881a      	ldrh	r2, [r3, #0]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	815a      	strh	r2, [r3, #10]
 8007e82:	e015      	b.n	8007eb0 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	211a      	movs	r1, #26
 8007e8a:	fb01 f303 	mul.w	r3, r1, r3
 8007e8e:	4413      	add	r3, r2
 8007e90:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007e94:	781a      	ldrb	r2, [r3, #0]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	211a      	movs	r1, #26
 8007ea0:	fb01 f303 	mul.w	r3, r1, r3
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007eaa:	881a      	ldrh	r2, [r3, #0]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	799b      	ldrb	r3, [r3, #6]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f002 fdc4 	bl	800aa56 <USBH_AllocPipe>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	79db      	ldrb	r3, [r3, #7]
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f002 fdba 	bl	800aa56 <USBH_AllocPipe>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fdac 	bl	8008a48 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	7959      	ldrb	r1, [r3, #5]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	7998      	ldrb	r0, [r3, #6]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	8912      	ldrh	r2, [r2, #8]
 8007f08:	9202      	str	r2, [sp, #8]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	9201      	str	r2, [sp, #4]
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	4623      	mov	r3, r4
 8007f12:	4602      	mov	r2, r0
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f002 fd6f 	bl	800a9f8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	7919      	ldrb	r1, [r3, #4]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	79d8      	ldrb	r0, [r3, #7]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	8952      	ldrh	r2, [r2, #10]
 8007f32:	9202      	str	r2, [sp, #8]
 8007f34:	2202      	movs	r2, #2
 8007f36:	9201      	str	r2, [sp, #4]
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	4623      	mov	r3, r4
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f002 fd5a 	bl	800a9f8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	791b      	ldrb	r3, [r3, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f005 fbee 	bl	800d72e <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	795b      	ldrb	r3, [r3, #5]
 8007f56:	2200      	movs	r2, #0
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f005 fbe7 	bl	800d72e <USBH_LL_SetToggle>

  return USBH_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd90      	pop	{r4, r7, pc}

08007f6a <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	795b      	ldrb	r3, [r3, #5]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00e      	beq.n	8007fa2 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	795b      	ldrb	r3, [r3, #5]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f002 fd53 	bl	800aa36 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	795b      	ldrb	r3, [r3, #5]
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f002 fd7e 	bl	800aa98 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	791b      	ldrb	r3, [r3, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00e      	beq.n	8007fc8 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	791b      	ldrb	r3, [r3, #4]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f002 fd40 	bl	800aa36 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	791b      	ldrb	r3, [r3, #4]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f002 fd6b 	bl	800aa98 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00b      	beq.n	8007fec <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fda:	69db      	ldr	r3, [r3, #28]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f005 fc6f 	bl	800d8c0 <free>
    phost->pActiveClass->pData = 0U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fe8:	2200      	movs	r2, #0
 8007fea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008008:	2301      	movs	r3, #1
 800800a:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	7b9b      	ldrb	r3, [r3, #14]
 8008010:	2b03      	cmp	r3, #3
 8008012:	d041      	beq.n	8008098 <USBH_MSC_ClassRequest+0xa2>
 8008014:	2b03      	cmp	r3, #3
 8008016:	dc4b      	bgt.n	80080b0 <USBH_MSC_ClassRequest+0xba>
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <USBH_MSC_ClassRequest+0x2a>
 800801c:	2b02      	cmp	r3, #2
 800801e:	d147      	bne.n	80080b0 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fcf0 	bl	8008a0a <USBH_MSC_BOT_REQ_GetMaxLUN>
 800802a:	4603      	mov	r3, r0
 800802c:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	2b03      	cmp	r3, #3
 8008032:	d104      	bne.n	800803e <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2200      	movs	r2, #0
 8008038:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800803e:	7bfb      	ldrb	r3, [r7, #15]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d137      	bne.n	80080b4 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	2b02      	cmp	r3, #2
 800804a:	d804      	bhi.n	8008056 <USBH_MSC_ClassRequest+0x60>
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	3301      	adds	r3, #1
 8008052:	b2da      	uxtb	r2, r3
 8008054:	e000      	b.n	8008058 <USBH_MSC_ClassRequest+0x62>
 8008056:	2202      	movs	r2, #2
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800805c:	2300      	movs	r3, #0
 800805e:	73bb      	strb	r3, [r7, #14]
 8008060:	e014      	b.n	800808c <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	2134      	movs	r1, #52	; 0x34
 8008068:	fb01 f303 	mul.w	r3, r1, r3
 800806c:	4413      	add	r3, r2
 800806e:	3392      	adds	r3, #146	; 0x92
 8008070:	2202      	movs	r2, #2
 8008072:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008074:	7bbb      	ldrb	r3, [r7, #14]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	2134      	movs	r1, #52	; 0x34
 800807a:	fb01 f303 	mul.w	r3, r1, r3
 800807e:	4413      	add	r3, r2
 8008080:	33c1      	adds	r3, #193	; 0xc1
 8008082:	2200      	movs	r2, #0
 8008084:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008086:	7bbb      	ldrb	r3, [r7, #14]
 8008088:	3301      	adds	r3, #1
 800808a:	73bb      	strb	r3, [r7, #14]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	7bba      	ldrb	r2, [r7, #14]
 8008092:	429a      	cmp	r2, r3
 8008094:	d3e5      	bcc.n	8008062 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008096:	e00d      	b.n	80080b4 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008098:	2100      	movs	r1, #0
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f002 f87b 	bl	800a196 <USBH_ClrFeature>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d108      	bne.n	80080b8 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	7bda      	ldrb	r2, [r3, #15]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	739a      	strb	r2, [r3, #14]
      }
      break;
 80080ae:	e003      	b.n	80080b8 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 80080b0:	bf00      	nop
 80080b2:	e002      	b.n	80080ba <USBH_MSC_ClassRequest+0xc4>
      break;
 80080b4:	bf00      	nop
 80080b6:	e000      	b.n	80080ba <USBH_MSC_ClassRequest+0xc4>
      break;
 80080b8:	bf00      	nop
  }

  return status;
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80080d6:	2301      	movs	r3, #1
 80080d8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80080da:	2301      	movs	r3, #1
 80080dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80080de:	2301      	movs	r3, #1
 80080e0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	7b1b      	ldrb	r3, [r3, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <USBH_MSC_Process+0x2e>
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	f000 8271 	beq.w	80085d2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80080f0:	e272      	b.n	80085d8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	429a      	cmp	r2, r3
 8008100:	f080 824f 	bcs.w	80085a2 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800810a:	4619      	mov	r1, r3
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	2334      	movs	r3, #52	; 0x34
 8008110:	fb03 f301 	mul.w	r3, r3, r1
 8008114:	4413      	add	r3, r2
 8008116:	3391      	adds	r3, #145	; 0x91
 8008118:	2201      	movs	r2, #1
 800811a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008122:	4619      	mov	r1, r3
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	2334      	movs	r3, #52	; 0x34
 8008128:	fb03 f301 	mul.w	r3, r3, r1
 800812c:	4413      	add	r3, r2
 800812e:	3390      	adds	r3, #144	; 0x90
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	2b08      	cmp	r3, #8
 8008134:	f200 8243 	bhi.w	80085be <USBH_MSC_Process+0x4fa>
 8008138:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <USBH_MSC_Process+0x7c>)
 800813a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813e:	bf00      	nop
 8008140:	08008165 	.word	0x08008165
 8008144:	080085bf 	.word	0x080085bf
 8008148:	0800822d 	.word	0x0800822d
 800814c:	080083b1 	.word	0x080083b1
 8008150:	0800818b 	.word	0x0800818b
 8008154:	0800847d 	.word	0x0800847d
 8008158:	080085bf 	.word	0x080085bf
 800815c:	080085bf 	.word	0x080085bf
 8008160:	08008591 	.word	0x08008591
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800816a:	4619      	mov	r1, r3
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	2334      	movs	r3, #52	; 0x34
 8008170:	fb03 f301 	mul.w	r3, r3, r1
 8008174:	4413      	add	r3, r2
 8008176:	3390      	adds	r3, #144	; 0x90
 8008178:	2204      	movs	r2, #4
 800817a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008188:	e222      	b.n	80085d0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008190:	b2d9      	uxtb	r1, r3
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008198:	461a      	mov	r2, r3
 800819a:	2334      	movs	r3, #52	; 0x34
 800819c:	fb03 f302 	mul.w	r3, r3, r2
 80081a0:	3398      	adds	r3, #152	; 0x98
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	4413      	add	r3, r2
 80081a6:	3307      	adds	r3, #7
 80081a8:	461a      	mov	r2, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 ff6a 	bl	8009084 <USBH_MSC_SCSI_Inquiry>
 80081b0:	4603      	mov	r3, r0
 80081b2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10b      	bne.n	80081d2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081c0:	4619      	mov	r1, r3
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	2334      	movs	r3, #52	; 0x34
 80081c6:	fb03 f301 	mul.w	r3, r3, r1
 80081ca:	4413      	add	r3, r2
 80081cc:	3390      	adds	r3, #144	; 0x90
 80081ce:	2202      	movs	r2, #2
 80081d0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d10c      	bne.n	80081f2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081de:	4619      	mov	r1, r3
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	2334      	movs	r3, #52	; 0x34
 80081e4:	fb03 f301 	mul.w	r3, r3, r1
 80081e8:	4413      	add	r3, r2
 80081ea:	3390      	adds	r3, #144	; 0x90
 80081ec:	2205      	movs	r2, #5
 80081ee:	701a      	strb	r2, [r3, #0]
            break;
 80081f0:	e1e7      	b.n	80085c2 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	2b04      	cmp	r3, #4
 80081f6:	f040 81e4 	bne.w	80085c2 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008200:	4619      	mov	r1, r3
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	2334      	movs	r3, #52	; 0x34
 8008206:	fb03 f301 	mul.w	r3, r3, r1
 800820a:	4413      	add	r3, r2
 800820c:	3390      	adds	r3, #144	; 0x90
 800820e:	2201      	movs	r2, #1
 8008210:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008218:	4619      	mov	r1, r3
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	2334      	movs	r3, #52	; 0x34
 800821e:	fb03 f301 	mul.w	r3, r3, r1
 8008222:	4413      	add	r3, r2
 8008224:	3391      	adds	r3, #145	; 0x91
 8008226:	2202      	movs	r2, #2
 8008228:	701a      	strb	r2, [r3, #0]
            break;
 800822a:	e1ca      	b.n	80085c2 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008232:	b2db      	uxtb	r3, r3
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fe66 	bl	8008f08 <USBH_MSC_SCSI_TestUnitReady>
 800823c:	4603      	mov	r3, r0
 800823e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008240:	7bbb      	ldrb	r3, [r7, #14]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d149      	bne.n	80082da <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800824c:	4619      	mov	r1, r3
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	2334      	movs	r3, #52	; 0x34
 8008252:	fb03 f301 	mul.w	r3, r3, r1
 8008256:	4413      	add	r3, r2
 8008258:	3392      	adds	r3, #146	; 0x92
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00c      	beq.n	800827a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008266:	4619      	mov	r1, r3
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	2334      	movs	r3, #52	; 0x34
 800826c:	fb03 f301 	mul.w	r3, r3, r1
 8008270:	4413      	add	r3, r2
 8008272:	33c1      	adds	r3, #193	; 0xc1
 8008274:	2201      	movs	r2, #1
 8008276:	701a      	strb	r2, [r3, #0]
 8008278:	e00b      	b.n	8008292 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008280:	4619      	mov	r1, r3
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	2334      	movs	r3, #52	; 0x34
 8008286:	fb03 f301 	mul.w	r3, r3, r1
 800828a:	4413      	add	r3, r2
 800828c:	33c1      	adds	r3, #193	; 0xc1
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008298:	4619      	mov	r1, r3
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	2334      	movs	r3, #52	; 0x34
 800829e:	fb03 f301 	mul.w	r3, r3, r1
 80082a2:	4413      	add	r3, r2
 80082a4:	3390      	adds	r3, #144	; 0x90
 80082a6:	2203      	movs	r2, #3
 80082a8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082b0:	4619      	mov	r1, r3
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	2334      	movs	r3, #52	; 0x34
 80082b6:	fb03 f301 	mul.w	r3, r3, r1
 80082ba:	4413      	add	r3, r2
 80082bc:	3391      	adds	r3, #145	; 0x91
 80082be:	2200      	movs	r2, #0
 80082c0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082c8:	4619      	mov	r1, r3
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	2334      	movs	r3, #52	; 0x34
 80082ce:	fb03 f301 	mul.w	r3, r3, r1
 80082d2:	4413      	add	r3, r2
 80082d4:	3392      	adds	r3, #146	; 0x92
 80082d6:	2200      	movs	r2, #0
 80082d8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d14a      	bne.n	8008376 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082e6:	4619      	mov	r1, r3
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	2334      	movs	r3, #52	; 0x34
 80082ec:	fb03 f301 	mul.w	r3, r3, r1
 80082f0:	4413      	add	r3, r2
 80082f2:	3392      	adds	r3, #146	; 0x92
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d00c      	beq.n	8008314 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008300:	4619      	mov	r1, r3
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	2334      	movs	r3, #52	; 0x34
 8008306:	fb03 f301 	mul.w	r3, r3, r1
 800830a:	4413      	add	r3, r2
 800830c:	33c1      	adds	r3, #193	; 0xc1
 800830e:	2201      	movs	r2, #1
 8008310:	701a      	strb	r2, [r3, #0]
 8008312:	e00b      	b.n	800832c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800831a:	4619      	mov	r1, r3
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	2334      	movs	r3, #52	; 0x34
 8008320:	fb03 f301 	mul.w	r3, r3, r1
 8008324:	4413      	add	r3, r2
 8008326:	33c1      	adds	r3, #193	; 0xc1
 8008328:	2200      	movs	r2, #0
 800832a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008332:	4619      	mov	r1, r3
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	2334      	movs	r3, #52	; 0x34
 8008338:	fb03 f301 	mul.w	r3, r3, r1
 800833c:	4413      	add	r3, r2
 800833e:	3390      	adds	r3, #144	; 0x90
 8008340:	2205      	movs	r2, #5
 8008342:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800834a:	4619      	mov	r1, r3
 800834c:	693a      	ldr	r2, [r7, #16]
 800834e:	2334      	movs	r3, #52	; 0x34
 8008350:	fb03 f301 	mul.w	r3, r3, r1
 8008354:	4413      	add	r3, r2
 8008356:	3391      	adds	r3, #145	; 0x91
 8008358:	2201      	movs	r2, #1
 800835a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008362:	4619      	mov	r1, r3
 8008364:	693a      	ldr	r2, [r7, #16]
 8008366:	2334      	movs	r3, #52	; 0x34
 8008368:	fb03 f301 	mul.w	r3, r3, r1
 800836c:	4413      	add	r3, r2
 800836e:	3392      	adds	r3, #146	; 0x92
 8008370:	2202      	movs	r2, #2
 8008372:	701a      	strb	r2, [r3, #0]
            break;
 8008374:	e127      	b.n	80085c6 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	2b04      	cmp	r3, #4
 800837a:	f040 8124 	bne.w	80085c6 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008384:	4619      	mov	r1, r3
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	2334      	movs	r3, #52	; 0x34
 800838a:	fb03 f301 	mul.w	r3, r3, r1
 800838e:	4413      	add	r3, r2
 8008390:	3390      	adds	r3, #144	; 0x90
 8008392:	2201      	movs	r2, #1
 8008394:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800839c:	4619      	mov	r1, r3
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	2334      	movs	r3, #52	; 0x34
 80083a2:	fb03 f301 	mul.w	r3, r3, r1
 80083a6:	4413      	add	r3, r2
 80083a8:	3391      	adds	r3, #145	; 0x91
 80083aa:	2202      	movs	r2, #2
 80083ac:	701a      	strb	r2, [r3, #0]
            break;
 80083ae:	e10a      	b.n	80085c6 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083b6:	b2d9      	uxtb	r1, r3
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083be:	461a      	mov	r2, r3
 80083c0:	2334      	movs	r3, #52	; 0x34
 80083c2:	fb03 f302 	mul.w	r3, r3, r2
 80083c6:	3390      	adds	r3, #144	; 0x90
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	4413      	add	r3, r2
 80083cc:	3304      	adds	r3, #4
 80083ce:	461a      	mov	r2, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fddc 	bl	8008f8e <USBH_MSC_SCSI_ReadCapacity>
 80083d6:	4603      	mov	r3, r0
 80083d8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d120      	bne.n	8008422 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083e6:	4619      	mov	r1, r3
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	2334      	movs	r3, #52	; 0x34
 80083ec:	fb03 f301 	mul.w	r3, r3, r1
 80083f0:	4413      	add	r3, r2
 80083f2:	3390      	adds	r3, #144	; 0x90
 80083f4:	2201      	movs	r2, #1
 80083f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083fe:	4619      	mov	r1, r3
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	2334      	movs	r3, #52	; 0x34
 8008404:	fb03 f301 	mul.w	r3, r3, r1
 8008408:	4413      	add	r3, r2
 800840a:	3391      	adds	r3, #145	; 0x91
 800840c:	2200      	movs	r2, #0
 800840e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008416:	3301      	adds	r3, #1
 8008418:	b29a      	uxth	r2, r3
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008420:	e0d3      	b.n	80085ca <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	2b02      	cmp	r3, #2
 8008426:	d10c      	bne.n	8008442 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800842e:	4619      	mov	r1, r3
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	2334      	movs	r3, #52	; 0x34
 8008434:	fb03 f301 	mul.w	r3, r3, r1
 8008438:	4413      	add	r3, r2
 800843a:	3390      	adds	r3, #144	; 0x90
 800843c:	2205      	movs	r2, #5
 800843e:	701a      	strb	r2, [r3, #0]
            break;
 8008440:	e0c3      	b.n	80085ca <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	2b04      	cmp	r3, #4
 8008446:	f040 80c0 	bne.w	80085ca <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008450:	4619      	mov	r1, r3
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	2334      	movs	r3, #52	; 0x34
 8008456:	fb03 f301 	mul.w	r3, r3, r1
 800845a:	4413      	add	r3, r2
 800845c:	3390      	adds	r3, #144	; 0x90
 800845e:	2201      	movs	r2, #1
 8008460:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008468:	4619      	mov	r1, r3
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	2334      	movs	r3, #52	; 0x34
 800846e:	fb03 f301 	mul.w	r3, r3, r1
 8008472:	4413      	add	r3, r2
 8008474:	3391      	adds	r3, #145	; 0x91
 8008476:	2202      	movs	r2, #2
 8008478:	701a      	strb	r2, [r3, #0]
            break;
 800847a:	e0a6      	b.n	80085ca <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008482:	b2d9      	uxtb	r1, r3
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800848a:	461a      	mov	r2, r3
 800848c:	2334      	movs	r3, #52	; 0x34
 800848e:	fb03 f302 	mul.w	r3, r3, r2
 8008492:	3398      	adds	r3, #152	; 0x98
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	4413      	add	r3, r2
 8008498:	3304      	adds	r3, #4
 800849a:	461a      	mov	r2, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fe96 	bl	80091ce <USBH_MSC_SCSI_RequestSense>
 80084a2:	4603      	mov	r3, r0
 80084a4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d145      	bne.n	8008538 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084b2:	4619      	mov	r1, r3
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	2334      	movs	r3, #52	; 0x34
 80084b8:	fb03 f301 	mul.w	r3, r3, r1
 80084bc:	4413      	add	r3, r2
 80084be:	339c      	adds	r3, #156	; 0x9c
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	2b06      	cmp	r3, #6
 80084c4:	d00c      	beq.n	80084e0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084cc:	4619      	mov	r1, r3
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	2334      	movs	r3, #52	; 0x34
 80084d2:	fb03 f301 	mul.w	r3, r3, r1
 80084d6:	4413      	add	r3, r2
 80084d8:	339c      	adds	r3, #156	; 0x9c
 80084da:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d117      	bne.n	8008510 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d80c      	bhi.n	8008510 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084fc:	4619      	mov	r1, r3
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	2334      	movs	r3, #52	; 0x34
 8008502:	fb03 f301 	mul.w	r3, r3, r1
 8008506:	4413      	add	r3, r2
 8008508:	3390      	adds	r3, #144	; 0x90
 800850a:	2202      	movs	r2, #2
 800850c:	701a      	strb	r2, [r3, #0]
                  break;
 800850e:	e05f      	b.n	80085d0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008516:	4619      	mov	r1, r3
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	2334      	movs	r3, #52	; 0x34
 800851c:	fb03 f301 	mul.w	r3, r3, r1
 8008520:	4413      	add	r3, r2
 8008522:	3390      	adds	r3, #144	; 0x90
 8008524:	2201      	movs	r2, #1
 8008526:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800852e:	3301      	adds	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008538:	7bfb      	ldrb	r3, [r7, #15]
 800853a:	2b02      	cmp	r3, #2
 800853c:	d10c      	bne.n	8008558 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008544:	4619      	mov	r1, r3
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	2334      	movs	r3, #52	; 0x34
 800854a:	fb03 f301 	mul.w	r3, r3, r1
 800854e:	4413      	add	r3, r2
 8008550:	3390      	adds	r3, #144	; 0x90
 8008552:	2208      	movs	r2, #8
 8008554:	701a      	strb	r2, [r3, #0]
            break;
 8008556:	e03a      	b.n	80085ce <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	2b04      	cmp	r3, #4
 800855c:	d137      	bne.n	80085ce <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008564:	4619      	mov	r1, r3
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	2334      	movs	r3, #52	; 0x34
 800856a:	fb03 f301 	mul.w	r3, r3, r1
 800856e:	4413      	add	r3, r2
 8008570:	3390      	adds	r3, #144	; 0x90
 8008572:	2201      	movs	r2, #1
 8008574:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800857c:	4619      	mov	r1, r3
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	2334      	movs	r3, #52	; 0x34
 8008582:	fb03 f301 	mul.w	r3, r3, r1
 8008586:	4413      	add	r3, r2
 8008588:	3391      	adds	r3, #145	; 0x91
 800858a:	2202      	movs	r2, #2
 800858c:	701a      	strb	r2, [r3, #0]
            break;
 800858e:	e01e      	b.n	80085ce <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008596:	3301      	adds	r3, #1
 8008598:	b29a      	uxth	r2, r3
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80085a0:	e016      	b.n	80085d0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	2201      	movs	r2, #1
 80085ae:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085b6:	2102      	movs	r1, #2
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	4798      	blx	r3
      break;
 80085bc:	e00c      	b.n	80085d8 <USBH_MSC_Process+0x514>
            break;
 80085be:	bf00      	nop
 80085c0:	e00a      	b.n	80085d8 <USBH_MSC_Process+0x514>
            break;
 80085c2:	bf00      	nop
 80085c4:	e008      	b.n	80085d8 <USBH_MSC_Process+0x514>
            break;
 80085c6:	bf00      	nop
 80085c8:	e006      	b.n	80085d8 <USBH_MSC_Process+0x514>
            break;
 80085ca:	bf00      	nop
 80085cc:	e004      	b.n	80085d8 <USBH_MSC_Process+0x514>
            break;
 80085ce:	bf00      	nop
      break;
 80085d0:	e002      	b.n	80085d8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	75fb      	strb	r3, [r7, #23]
      break;
 80085d6:	bf00      	nop
  }
  return error;
 80085d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop

080085e4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b088      	sub	sp, #32
 80085fe:	af02      	add	r7, sp, #8
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	460b      	mov	r3, r1
 8008604:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008610:	2301      	movs	r3, #1
 8008612:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008614:	2301      	movs	r3, #1
 8008616:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	2134      	movs	r1, #52	; 0x34
 800861e:	fb01 f303 	mul.w	r3, r1, r3
 8008622:	4413      	add	r3, r2
 8008624:	3390      	adds	r3, #144	; 0x90
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	2b07      	cmp	r3, #7
 800862a:	d03c      	beq.n	80086a6 <USBH_MSC_RdWrProcess+0xac>
 800862c:	2b07      	cmp	r3, #7
 800862e:	f300 80a7 	bgt.w	8008780 <USBH_MSC_RdWrProcess+0x186>
 8008632:	2b05      	cmp	r3, #5
 8008634:	d06c      	beq.n	8008710 <USBH_MSC_RdWrProcess+0x116>
 8008636:	2b06      	cmp	r3, #6
 8008638:	f040 80a2 	bne.w	8008780 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800863c:	78f9      	ldrb	r1, [r7, #3]
 800863e:	2300      	movs	r3, #0
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	2300      	movs	r3, #0
 8008644:	2200      	movs	r2, #0
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fea5 	bl	8009396 <USBH_MSC_SCSI_Read>
 800864c:	4603      	mov	r3, r0
 800864e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10b      	bne.n	800866e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008656:	78fb      	ldrb	r3, [r7, #3]
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	2134      	movs	r1, #52	; 0x34
 800865c:	fb01 f303 	mul.w	r3, r1, r3
 8008660:	4413      	add	r3, r2
 8008662:	3390      	adds	r3, #144	; 0x90
 8008664:	2201      	movs	r2, #1
 8008666:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800866c:	e08a      	b.n	8008784 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	2b02      	cmp	r3, #2
 8008672:	d109      	bne.n	8008688 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	2134      	movs	r1, #52	; 0x34
 800867a:	fb01 f303 	mul.w	r3, r1, r3
 800867e:	4413      	add	r3, r2
 8008680:	3390      	adds	r3, #144	; 0x90
 8008682:	2205      	movs	r2, #5
 8008684:	701a      	strb	r2, [r3, #0]
      break;
 8008686:	e07d      	b.n	8008784 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008688:	7bfb      	ldrb	r3, [r7, #15]
 800868a:	2b04      	cmp	r3, #4
 800868c:	d17a      	bne.n	8008784 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800868e:	78fb      	ldrb	r3, [r7, #3]
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	2134      	movs	r1, #52	; 0x34
 8008694:	fb01 f303 	mul.w	r3, r1, r3
 8008698:	4413      	add	r3, r2
 800869a:	3390      	adds	r3, #144	; 0x90
 800869c:	2208      	movs	r2, #8
 800869e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80086a0:	2302      	movs	r3, #2
 80086a2:	75fb      	strb	r3, [r7, #23]
      break;
 80086a4:	e06e      	b.n	8008784 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80086a6:	78f9      	ldrb	r1, [r7, #3]
 80086a8:	2300      	movs	r3, #0
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	2300      	movs	r3, #0
 80086ae:	2200      	movs	r2, #0
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fe05 	bl	80092c0 <USBH_MSC_SCSI_Write>
 80086b6:	4603      	mov	r3, r0
 80086b8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10b      	bne.n	80086d8 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	2134      	movs	r1, #52	; 0x34
 80086c6:	fb01 f303 	mul.w	r3, r1, r3
 80086ca:	4413      	add	r3, r2
 80086cc:	3390      	adds	r3, #144	; 0x90
 80086ce:	2201      	movs	r2, #1
 80086d0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80086d6:	e057      	b.n	8008788 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d109      	bne.n	80086f2 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80086de:	78fb      	ldrb	r3, [r7, #3]
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	2134      	movs	r1, #52	; 0x34
 80086e4:	fb01 f303 	mul.w	r3, r1, r3
 80086e8:	4413      	add	r3, r2
 80086ea:	3390      	adds	r3, #144	; 0x90
 80086ec:	2205      	movs	r2, #5
 80086ee:	701a      	strb	r2, [r3, #0]
      break;
 80086f0:	e04a      	b.n	8008788 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	2b04      	cmp	r3, #4
 80086f6:	d147      	bne.n	8008788 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80086f8:	78fb      	ldrb	r3, [r7, #3]
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	2134      	movs	r1, #52	; 0x34
 80086fe:	fb01 f303 	mul.w	r3, r1, r3
 8008702:	4413      	add	r3, r2
 8008704:	3390      	adds	r3, #144	; 0x90
 8008706:	2208      	movs	r2, #8
 8008708:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800870a:	2302      	movs	r3, #2
 800870c:	75fb      	strb	r3, [r7, #23]
      break;
 800870e:	e03b      	b.n	8008788 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	2234      	movs	r2, #52	; 0x34
 8008714:	fb02 f303 	mul.w	r3, r2, r3
 8008718:	3398      	adds	r3, #152	; 0x98
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	4413      	add	r3, r2
 800871e:	1d1a      	adds	r2, r3, #4
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	4619      	mov	r1, r3
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fd52 	bl	80091ce <USBH_MSC_SCSI_RequestSense>
 800872a:	4603      	mov	r3, r0
 800872c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800872e:	7bfb      	ldrb	r3, [r7, #15]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d113      	bne.n	800875c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008734:	78fb      	ldrb	r3, [r7, #3]
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	2134      	movs	r1, #52	; 0x34
 800873a:	fb01 f303 	mul.w	r3, r1, r3
 800873e:	4413      	add	r3, r2
 8008740:	3390      	adds	r3, #144	; 0x90
 8008742:	2201      	movs	r2, #1
 8008744:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008746:	78fb      	ldrb	r3, [r7, #3]
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	2134      	movs	r1, #52	; 0x34
 800874c:	fb01 f303 	mul.w	r3, r1, r3
 8008750:	4413      	add	r3, r2
 8008752:	3391      	adds	r3, #145	; 0x91
 8008754:	2202      	movs	r2, #2
 8008756:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8008758:	2302      	movs	r3, #2
 800875a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	2b02      	cmp	r3, #2
 8008760:	d014      	beq.n	800878c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008762:	7bfb      	ldrb	r3, [r7, #15]
 8008764:	2b04      	cmp	r3, #4
 8008766:	d111      	bne.n	800878c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008768:	78fb      	ldrb	r3, [r7, #3]
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	2134      	movs	r1, #52	; 0x34
 800876e:	fb01 f303 	mul.w	r3, r1, r3
 8008772:	4413      	add	r3, r2
 8008774:	3390      	adds	r3, #144	; 0x90
 8008776:	2208      	movs	r2, #8
 8008778:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800877a:	2302      	movs	r3, #2
 800877c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800877e:	e005      	b.n	800878c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8008780:	bf00      	nop
 8008782:	e004      	b.n	800878e <USBH_MSC_RdWrProcess+0x194>
      break;
 8008784:	bf00      	nop
 8008786:	e002      	b.n	800878e <USBH_MSC_RdWrProcess+0x194>
      break;
 8008788:	bf00      	nop
 800878a:	e000      	b.n	800878e <USBH_MSC_RdWrProcess+0x194>
      break;
 800878c:	bf00      	nop

  }
  return error;
 800878e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087aa:	69db      	ldr	r3, [r3, #28]
 80087ac:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b0b      	cmp	r3, #11
 80087b6:	d10c      	bne.n	80087d2 <USBH_MSC_UnitIsReady+0x3a>
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	2134      	movs	r1, #52	; 0x34
 80087be:	fb01 f303 	mul.w	r3, r1, r3
 80087c2:	4413      	add	r3, r2
 80087c4:	3391      	adds	r3, #145	; 0x91
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80087cc:	2301      	movs	r3, #1
 80087ce:	73fb      	strb	r3, [r7, #15]
 80087d0:	e001      	b.n	80087d6 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3714      	adds	r7, #20
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	460b      	mov	r3, r1
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087f8:	69db      	ldr	r3, [r3, #28]
 80087fa:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b0b      	cmp	r3, #11
 8008804:	d10d      	bne.n	8008822 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008806:	7afb      	ldrb	r3, [r7, #11]
 8008808:	2234      	movs	r2, #52	; 0x34
 800880a:	fb02 f303 	mul.w	r3, r2, r3
 800880e:	3390      	adds	r3, #144	; 0x90
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	4413      	add	r3, r2
 8008814:	2234      	movs	r2, #52	; 0x34
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f005 f859 	bl	800d8d0 <memcpy>
    return USBH_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	e000      	b.n	8008824 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008822:	2302      	movs	r3, #2
  }
}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b088      	sub	sp, #32
 8008830:	af02      	add	r7, sp, #8
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	607a      	str	r2, [r7, #4]
 8008836:	603b      	str	r3, [r7, #0]
 8008838:	460b      	mov	r3, r1
 800883a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008842:	69db      	ldr	r3, [r3, #28]
 8008844:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00e      	beq.n	8008870 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008858:	2b0b      	cmp	r3, #11
 800885a:	d109      	bne.n	8008870 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800885c:	7afb      	ldrb	r3, [r7, #11]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	2134      	movs	r1, #52	; 0x34
 8008862:	fb01 f303 	mul.w	r3, r1, r3
 8008866:	4413      	add	r3, r2
 8008868:	3390      	adds	r3, #144	; 0x90
 800886a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800886c:	2b01      	cmp	r3, #1
 800886e:	d001      	beq.n	8008874 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008870:	2302      	movs	r3, #2
 8008872:	e040      	b.n	80088f6 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2206      	movs	r2, #6
 8008878:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800887a:	7afb      	ldrb	r3, [r7, #11]
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	2134      	movs	r1, #52	; 0x34
 8008880:	fb01 f303 	mul.w	r3, r1, r3
 8008884:	4413      	add	r3, r2
 8008886:	3390      	adds	r3, #144	; 0x90
 8008888:	2206      	movs	r2, #6
 800888a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800888c:	7afb      	ldrb	r3, [r7, #11]
 800888e:	b29a      	uxth	r2, r3
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008896:	7af9      	ldrb	r1, [r7, #11]
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 fd78 	bl	8009396 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088ac:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80088ae:	e016      	b.n	80088de <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	1ad2      	subs	r2, r2, r3
 80088ba:	6a3b      	ldr	r3, [r7, #32]
 80088bc:	f242 7110 	movw	r1, #10000	; 0x2710
 80088c0:	fb01 f303 	mul.w	r3, r1, r3
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d805      	bhi.n	80088d4 <USBH_MSC_Read+0xa8>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d104      	bne.n	80088de <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	2201      	movs	r2, #1
 80088d8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80088da:	2302      	movs	r3, #2
 80088dc:	e00b      	b.n	80088f6 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80088de:	7afb      	ldrb	r3, [r7, #11]
 80088e0:	4619      	mov	r1, r3
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f7ff fe89 	bl	80085fa <USBH_MSC_RdWrProcess>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d0e0      	beq.n	80088b0 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2201      	movs	r2, #1
 80088f2:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b088      	sub	sp, #32
 8008902:	af02      	add	r7, sp, #8
 8008904:	60f8      	str	r0, [r7, #12]
 8008906:	607a      	str	r2, [r7, #4]
 8008908:	603b      	str	r3, [r7, #0]
 800890a:	460b      	mov	r3, r1
 800890c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00e      	beq.n	8008942 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800892a:	2b0b      	cmp	r3, #11
 800892c:	d109      	bne.n	8008942 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800892e:	7afb      	ldrb	r3, [r7, #11]
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	2134      	movs	r1, #52	; 0x34
 8008934:	fb01 f303 	mul.w	r3, r1, r3
 8008938:	4413      	add	r3, r2
 800893a:	3390      	adds	r3, #144	; 0x90
 800893c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800893e:	2b01      	cmp	r3, #1
 8008940:	d001      	beq.n	8008946 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8008942:	2302      	movs	r3, #2
 8008944:	e040      	b.n	80089c8 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	2207      	movs	r2, #7
 800894a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800894c:	7afb      	ldrb	r3, [r7, #11]
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	2134      	movs	r1, #52	; 0x34
 8008952:	fb01 f303 	mul.w	r3, r1, r3
 8008956:	4413      	add	r3, r2
 8008958:	3390      	adds	r3, #144	; 0x90
 800895a:	2207      	movs	r2, #7
 800895c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800895e:	7afb      	ldrb	r3, [r7, #11]
 8008960:	b29a      	uxth	r2, r3
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8008968:	7af9      	ldrb	r1, [r7, #11]
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 fca4 	bl	80092c0 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800897e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008980:	e016      	b.n	80089b0 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	1ad2      	subs	r2, r2, r3
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	f242 7110 	movw	r1, #10000	; 0x2710
 8008992:	fb01 f303 	mul.w	r3, r1, r3
 8008996:	429a      	cmp	r2, r3
 8008998:	d805      	bhi.n	80089a6 <USBH_MSC_Write+0xa8>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d104      	bne.n	80089b0 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2201      	movs	r2, #1
 80089aa:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80089ac:	2302      	movs	r3, #2
 80089ae:	e00b      	b.n	80089c8 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80089b0:	7afb      	ldrb	r3, [r7, #11]
 80089b2:	4619      	mov	r1, r3
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f7ff fe20 	bl	80085fa <USBH_MSC_RdWrProcess>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d0e0      	beq.n	8008982 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	2201      	movs	r2, #1
 80089c4:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3718      	adds	r7, #24
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2221      	movs	r2, #33	; 0x21
 80089dc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	22ff      	movs	r2, #255	; 0xff
 80089e2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80089f6:	2200      	movs	r2, #0
 80089f8:	2100      	movs	r1, #0
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f001 fdab 	bl	800a556 <USBH_CtlReq>
 8008a00:	4603      	mov	r3, r0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	22a1      	movs	r2, #161	; 0xa1
 8008a18:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	22fe      	movs	r2, #254	; 0xfe
 8008a1e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008a32:	2201      	movs	r2, #1
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f001 fd8d 	bl	800a556 <USBH_CtlReq>
 8008a3c:	4603      	mov	r3, r0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4a09      	ldr	r2, [pc, #36]	; (8008a84 <USBH_MSC_BOT_Init+0x3c>)
 8008a5e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4a09      	ldr	r2, [pc, #36]	; (8008a88 <USBH_MSC_BOT_Init+0x40>)
 8008a64:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	43425355 	.word	0x43425355
 8008a88:	20304050 	.word	0x20304050

08008a8c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b088      	sub	sp, #32
 8008a90:	af02      	add	r7, sp, #8
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008abc:	3b01      	subs	r3, #1
 8008abe:	2b0a      	cmp	r3, #10
 8008ac0:	f200 819e 	bhi.w	8008e00 <USBH_MSC_BOT_Process+0x374>
 8008ac4:	a201      	add	r2, pc, #4	; (adr r2, 8008acc <USBH_MSC_BOT_Process+0x40>)
 8008ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aca:	bf00      	nop
 8008acc:	08008af9 	.word	0x08008af9
 8008ad0:	08008b21 	.word	0x08008b21
 8008ad4:	08008b8b 	.word	0x08008b8b
 8008ad8:	08008ba9 	.word	0x08008ba9
 8008adc:	08008c2d 	.word	0x08008c2d
 8008ae0:	08008c4f 	.word	0x08008c4f
 8008ae4:	08008ce7 	.word	0x08008ce7
 8008ae8:	08008d03 	.word	0x08008d03
 8008aec:	08008d55 	.word	0x08008d55
 8008af0:	08008d85 	.word	0x08008d85
 8008af4:	08008de7 	.word	0x08008de7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	78fa      	ldrb	r2, [r7, #3]
 8008afc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	2202      	movs	r2, #2
 8008b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	795b      	ldrb	r3, [r3, #5]
 8008b12:	2201      	movs	r2, #1
 8008b14:	9200      	str	r2, [sp, #0]
 8008b16:	221f      	movs	r2, #31
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f001 ff2a 	bl	800a972 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8008b1e:	e17e      	b.n	8008e1e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	795b      	ldrb	r3, [r3, #5]
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f004 fde0 	bl	800d6ec <USBH_LL_GetURBState>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008b30:	7d3b      	ldrb	r3, [r7, #20]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d118      	bne.n	8008b68 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00f      	beq.n	8008b5e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008b44:	b25b      	sxtb	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	da04      	bge.n	8008b54 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	2203      	movs	r2, #3
 8008b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008b52:	e157      	b.n	8008e04 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2205      	movs	r2, #5
 8008b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b5c:	e152      	b.n	8008e04 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	2207      	movs	r2, #7
 8008b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b66:	e14d      	b.n	8008e04 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b68:	7d3b      	ldrb	r3, [r7, #20]
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d104      	bne.n	8008b78 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b76:	e145      	b.n	8008e04 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8008b78:	7d3b      	ldrb	r3, [r7, #20]
 8008b7a:	2b05      	cmp	r3, #5
 8008b7c:	f040 8142 	bne.w	8008e04 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	220a      	movs	r2, #10
 8008b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b88:	e13c      	b.n	8008e04 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	895a      	ldrh	r2, [r3, #10]
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	791b      	ldrb	r3, [r3, #4]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f001 ff0f 	bl	800a9bc <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	2204      	movs	r2, #4
 8008ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8008ba6:	e13a      	b.n	8008e1e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	791b      	ldrb	r3, [r3, #4]
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f004 fd9c 	bl	800d6ec <USBH_LL_GetURBState>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008bb8:	7d3b      	ldrb	r3, [r7, #20]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d12d      	bne.n	8008c1a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	8952      	ldrh	r2, [r2, #10]
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d910      	bls.n	8008bec <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	8952      	ldrh	r2, [r2, #10]
 8008bd4:	441a      	add	r2, r3
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	8952      	ldrh	r2, [r2, #10]
 8008be4:	1a9a      	subs	r2, r3, r2
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	65da      	str	r2, [r3, #92]	; 0x5c
 8008bea:	e002      	b.n	8008bf2 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	895a      	ldrh	r2, [r3, #10]
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	791b      	ldrb	r3, [r3, #4]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f001 fed7 	bl	800a9bc <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8008c0e:	e0fb      	b.n	8008e08 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	2207      	movs	r2, #7
 8008c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c18:	e0f6      	b.n	8008e08 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8008c1a:	7d3b      	ldrb	r3, [r7, #20]
 8008c1c:	2b05      	cmp	r3, #5
 8008c1e:	f040 80f3 	bne.w	8008e08 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	2209      	movs	r2, #9
 8008c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c2a:	e0ed      	b.n	8008e08 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	891a      	ldrh	r2, [r3, #8]
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	795b      	ldrb	r3, [r3, #5]
 8008c3a:	2001      	movs	r0, #1
 8008c3c:	9000      	str	r0, [sp, #0]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f001 fe97 	bl	800a972 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	2206      	movs	r2, #6
 8008c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c4c:	e0e7      	b.n	8008e1e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	795b      	ldrb	r3, [r3, #5]
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f004 fd49 	bl	800d6ec <USBH_LL_GetURBState>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008c5e:	7d3b      	ldrb	r3, [r7, #20]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d12f      	bne.n	8008cc4 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	8912      	ldrh	r2, [r2, #8]
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d910      	bls.n	8008c92 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	8912      	ldrh	r2, [r2, #8]
 8008c7a:	441a      	add	r2, r3
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	8912      	ldrh	r2, [r2, #8]
 8008c8a:	1a9a      	subs	r2, r3, r2
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008c90:	e002      	b.n	8008c98 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2200      	movs	r2, #0
 8008c96:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00c      	beq.n	8008cba <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	891a      	ldrh	r2, [r3, #8]
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	795b      	ldrb	r3, [r3, #5]
 8008cae:	2001      	movs	r0, #1
 8008cb0:	9000      	str	r0, [sp, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f001 fe5d 	bl	800a972 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8008cb8:	e0a8      	b.n	8008e0c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	2207      	movs	r2, #7
 8008cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008cc2:	e0a3      	b.n	8008e0c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008cc4:	7d3b      	ldrb	r3, [r7, #20]
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d104      	bne.n	8008cd4 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	2205      	movs	r2, #5
 8008cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008cd2:	e09b      	b.n	8008e0c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8008cd4:	7d3b      	ldrb	r3, [r7, #20]
 8008cd6:	2b05      	cmp	r3, #5
 8008cd8:	f040 8098 	bne.w	8008e0c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	220a      	movs	r2, #10
 8008ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008ce4:	e092      	b.n	8008e0c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	791b      	ldrb	r3, [r3, #4]
 8008cf0:	220d      	movs	r2, #13
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f001 fe62 	bl	800a9bc <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2208      	movs	r2, #8
 8008cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008d00:	e08d      	b.n	8008e1e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	791b      	ldrb	r3, [r3, #4]
 8008d06:	4619      	mov	r1, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f004 fcef 	bl	800d6ec <USBH_LL_GetURBState>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8008d12:	7d3b      	ldrb	r3, [r7, #20]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d115      	bne.n	8008d44 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f8a9 	bl	8008e80 <USBH_MSC_DecodeCSW>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8008d32:	7d7b      	ldrb	r3, [r7, #21]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d102      	bne.n	8008d3e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8008d3c:	e068      	b.n	8008e10 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8008d3e:	2302      	movs	r3, #2
 8008d40:	75fb      	strb	r3, [r7, #23]
      break;
 8008d42:	e065      	b.n	8008e10 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8008d44:	7d3b      	ldrb	r3, [r7, #20]
 8008d46:	2b05      	cmp	r3, #5
 8008d48:	d162      	bne.n	8008e10 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	2209      	movs	r2, #9
 8008d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008d52:	e05d      	b.n	8008e10 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008d54:	78fb      	ldrb	r3, [r7, #3]
 8008d56:	2200      	movs	r2, #0
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f864 	bl	8008e28 <USBH_MSC_BOT_Abort>
 8008d60:	4603      	mov	r3, r0
 8008d62:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008d64:	7dbb      	ldrb	r3, [r7, #22]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d104      	bne.n	8008d74 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	2207      	movs	r2, #7
 8008d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008d72:	e04f      	b.n	8008e14 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008d74:	7dbb      	ldrb	r3, [r7, #22]
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	d14c      	bne.n	8008e14 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	220b      	movs	r2, #11
 8008d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008d82:	e047      	b.n	8008e14 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008d84:	78fb      	ldrb	r3, [r7, #3]
 8008d86:	2201      	movs	r2, #1
 8008d88:	4619      	mov	r1, r3
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f84c 	bl	8008e28 <USBH_MSC_BOT_Abort>
 8008d90:	4603      	mov	r3, r0
 8008d92:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008d94:	7dbb      	ldrb	r3, [r7, #22]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d11d      	bne.n	8008dd6 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	795b      	ldrb	r3, [r3, #5]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f004 fcf4 	bl	800d78e <USBH_LL_GetToggle>
 8008da6:	4603      	mov	r3, r0
 8008da8:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	7959      	ldrb	r1, [r3, #5]
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
 8008db0:	f1c3 0301 	rsb	r3, r3, #1
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	461a      	mov	r2, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f004 fcb8 	bl	800d72e <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	791b      	ldrb	r3, [r3, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f004 fcb1 	bl	800d72e <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	2209      	movs	r2, #9
 8008dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8008dd4:	e020      	b.n	8008e18 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8008dd6:	7dbb      	ldrb	r3, [r7, #22]
 8008dd8:	2b04      	cmp	r3, #4
 8008dda:	d11d      	bne.n	8008e18 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	220b      	movs	r2, #11
 8008de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008de4:	e018      	b.n	8008e18 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff fdf2 	bl	80089d0 <USBH_MSC_BOT_REQ_Reset>
 8008dec:	4603      	mov	r3, r0
 8008dee:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008df0:	7dfb      	ldrb	r3, [r7, #23]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d112      	bne.n	8008e1c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8008dfe:	e00d      	b.n	8008e1c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8008e00:	bf00      	nop
 8008e02:	e00c      	b.n	8008e1e <USBH_MSC_BOT_Process+0x392>
      break;
 8008e04:	bf00      	nop
 8008e06:	e00a      	b.n	8008e1e <USBH_MSC_BOT_Process+0x392>
      break;
 8008e08:	bf00      	nop
 8008e0a:	e008      	b.n	8008e1e <USBH_MSC_BOT_Process+0x392>
      break;
 8008e0c:	bf00      	nop
 8008e0e:	e006      	b.n	8008e1e <USBH_MSC_BOT_Process+0x392>
      break;
 8008e10:	bf00      	nop
 8008e12:	e004      	b.n	8008e1e <USBH_MSC_BOT_Process+0x392>
      break;
 8008e14:	bf00      	nop
 8008e16:	e002      	b.n	8008e1e <USBH_MSC_BOT_Process+0x392>
      break;
 8008e18:	bf00      	nop
 8008e1a:	e000      	b.n	8008e1e <USBH_MSC_BOT_Process+0x392>
      break;
 8008e1c:	bf00      	nop
  }
  return status;
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
 8008e34:	4613      	mov	r3, r2
 8008e36:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008e38:	2302      	movs	r3, #2
 8008e3a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008e46:	78bb      	ldrb	r3, [r7, #2]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <USBH_MSC_BOT_Abort+0x2a>
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d009      	beq.n	8008e64 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008e50:	e011      	b.n	8008e76 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	79db      	ldrb	r3, [r3, #7]
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f001 f99c 	bl	800a196 <USBH_ClrFeature>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	73fb      	strb	r3, [r7, #15]
      break;
 8008e62:	e008      	b.n	8008e76 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	799b      	ldrb	r3, [r3, #6]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f001 f993 	bl	800a196 <USBH_ClrFeature>
 8008e70:	4603      	mov	r3, r0
 8008e72:	73fb      	strb	r3, [r7, #15]
      break;
 8008e74:	bf00      	nop
  }
  return status;
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008e92:	2301      	movs	r3, #1
 8008e94:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	791b      	ldrb	r3, [r3, #4]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f004 fb93 	bl	800d5c8 <USBH_LL_GetLastXferSize>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b0d      	cmp	r3, #13
 8008ea6:	d002      	beq.n	8008eae <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	73fb      	strb	r3, [r7, #15]
 8008eac:	e024      	b.n	8008ef8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eb2:	4a14      	ldr	r2, [pc, #80]	; (8008f04 <USBH_MSC_DecodeCSW+0x84>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d11d      	bne.n	8008ef4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d119      	bne.n	8008ef8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d102      	bne.n	8008ed4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]
 8008ed2:	e011      	b.n	8008ef8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d102      	bne.n	8008ee4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	73fb      	strb	r3, [r7, #15]
 8008ee2:	e009      	b.n	8008ef8 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d104      	bne.n	8008ef8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8008eee:	2302      	movs	r3, #2
 8008ef0:	73fb      	strb	r3, [r7, #15]
 8008ef2:	e001      	b.n	8008ef8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	53425355 	.word	0x53425355

08008f08 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008f14:	2302      	movs	r3, #2
 8008f16:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f1e:	69db      	ldr	r3, [r3, #28]
 8008f20:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d002      	beq.n	8008f32 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d021      	beq.n	8008f74 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008f30:	e028      	b.n	8008f84 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2200      	movs	r2, #0
 8008f36:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	220a      	movs	r2, #10
 8008f44:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	3363      	adds	r3, #99	; 0x63
 8008f4c:	2210      	movs	r2, #16
 8008f4e:	2100      	movs	r1, #0
 8008f50:	4618      	mov	r0, r3
 8008f52:	f004 fccb 	bl	800d8ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2202      	movs	r2, #2
 8008f6a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	73fb      	strb	r3, [r7, #15]
      break;
 8008f72:	e007      	b.n	8008f84 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008f74:	78fb      	ldrb	r3, [r7, #3]
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7ff fd87 	bl	8008a8c <USBH_MSC_BOT_Process>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	73fb      	strb	r3, [r7, #15]
      break;
 8008f82:	bf00      	nop
  }

  return error;
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b086      	sub	sp, #24
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	60f8      	str	r0, [r7, #12]
 8008f96:	460b      	mov	r3, r1
 8008f98:	607a      	str	r2, [r7, #4]
 8008f9a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d002      	beq.n	8008fba <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d027      	beq.n	8009008 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008fb8:	e05f      	b.n	800907a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	2208      	movs	r2, #8
 8008fbe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	2280      	movs	r2, #128	; 0x80
 8008fc4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	220a      	movs	r2, #10
 8008fcc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	3363      	adds	r3, #99	; 0x63
 8008fd4:	2210      	movs	r2, #16
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f004 fc87 	bl	800d8ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2225      	movs	r2, #37	; 0x25
 8008fe2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	2202      	movs	r2, #2
 8008ff2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f103 0210 	add.w	r2, r3, #16
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009002:	2301      	movs	r3, #1
 8009004:	75fb      	strb	r3, [r7, #23]
      break;
 8009006:	e038      	b.n	800907a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009008:	7afb      	ldrb	r3, [r7, #11]
 800900a:	4619      	mov	r1, r3
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f7ff fd3d 	bl	8008a8c <USBH_MSC_BOT_Process>
 8009012:	4603      	mov	r3, r0
 8009014:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009016:	7dfb      	ldrb	r3, [r7, #23]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d12d      	bne.n	8009078 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009022:	3303      	adds	r3, #3
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800902e:	3302      	adds	r3, #2
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	021b      	lsls	r3, r3, #8
 8009034:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800903c:	3301      	adds	r3, #1
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009042:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	061b      	lsls	r3, r3, #24
 800904e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800905a:	3307      	adds	r3, #7
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	b29a      	uxth	r2, r3
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009066:	3306      	adds	r3, #6
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	b29b      	uxth	r3, r3
 800906c:	021b      	lsls	r3, r3, #8
 800906e:	b29b      	uxth	r3, r3
 8009070:	4313      	orrs	r3, r2
 8009072:	b29a      	uxth	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	809a      	strh	r2, [r3, #4]
      break;
 8009078:	bf00      	nop
  }

  return error;
 800907a:	7dfb      	ldrb	r3, [r7, #23]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	460b      	mov	r3, r1
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009092:	2302      	movs	r3, #2
 8009094:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d002      	beq.n	80090b0 <USBH_MSC_SCSI_Inquiry+0x2c>
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d03d      	beq.n	800912a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80090ae:	e089      	b.n	80091c4 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	2224      	movs	r2, #36	; 0x24
 80090b4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	2280      	movs	r2, #128	; 0x80
 80090ba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	220a      	movs	r2, #10
 80090c2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	3363      	adds	r3, #99	; 0x63
 80090ca:	220a      	movs	r2, #10
 80090cc:	2100      	movs	r1, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	f004 fc0c 	bl	800d8ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	2212      	movs	r2, #18
 80090d8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80090dc:	7afb      	ldrb	r3, [r7, #11]
 80090de:	015b      	lsls	r3, r3, #5
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	2224      	movs	r2, #36	; 0x24
 80090fc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	2202      	movs	r2, #2
 8009114:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	f103 0210 	add.w	r2, r3, #16
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009124:	2301      	movs	r3, #1
 8009126:	75fb      	strb	r3, [r7, #23]
      break;
 8009128:	e04c      	b.n	80091c4 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800912a:	7afb      	ldrb	r3, [r7, #11]
 800912c:	4619      	mov	r1, r3
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f7ff fcac 	bl	8008a8c <USBH_MSC_BOT_Process>
 8009134:	4603      	mov	r3, r0
 8009136:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009138:	7dfb      	ldrb	r3, [r7, #23]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d141      	bne.n	80091c2 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800913e:	2222      	movs	r2, #34	; 0x22
 8009140:	2100      	movs	r1, #0
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f004 fbd2 	bl	800d8ec <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	f003 031f 	and.w	r3, r3, #31
 8009154:	b2da      	uxtb	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	095b      	lsrs	r3, r3, #5
 8009164:	b2da      	uxtb	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009170:	3301      	adds	r3, #1
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	b25b      	sxtb	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	da03      	bge.n	8009182 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	709a      	strb	r2, [r3, #2]
 8009180:	e002      	b.n	8009188 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	1cd8      	adds	r0, r3, #3
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009192:	3308      	adds	r3, #8
 8009194:	2208      	movs	r2, #8
 8009196:	4619      	mov	r1, r3
 8009198:	f004 fb9a 	bl	800d8d0 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f103 000c 	add.w	r0, r3, #12
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091a8:	3310      	adds	r3, #16
 80091aa:	2210      	movs	r2, #16
 80091ac:	4619      	mov	r1, r3
 80091ae:	f004 fb8f 	bl	800d8d0 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	331d      	adds	r3, #29
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80091bc:	3220      	adds	r2, #32
 80091be:	6812      	ldr	r2, [r2, #0]
 80091c0:	601a      	str	r2, [r3, #0]
      break;
 80091c2:	bf00      	nop
  }

  return error;
 80091c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3718      	adds	r7, #24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b086      	sub	sp, #24
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	60f8      	str	r0, [r7, #12]
 80091d6:	460b      	mov	r3, r1
 80091d8:	607a      	str	r2, [r7, #4]
 80091da:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80091dc:	2302      	movs	r3, #2
 80091de:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d002      	beq.n	80091fa <USBH_MSC_SCSI_RequestSense+0x2c>
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d03d      	beq.n	8009274 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80091f8:	e05d      	b.n	80092b6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	220e      	movs	r2, #14
 80091fe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	2280      	movs	r2, #128	; 0x80
 8009204:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	220a      	movs	r2, #10
 800920c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	3363      	adds	r3, #99	; 0x63
 8009214:	2210      	movs	r2, #16
 8009216:	2100      	movs	r1, #0
 8009218:	4618      	mov	r0, r3
 800921a:	f004 fb67 	bl	800d8ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2203      	movs	r2, #3
 8009222:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009226:	7afb      	ldrb	r3, [r7, #11]
 8009228:	015b      	lsls	r3, r3, #5
 800922a:	b2da      	uxtb	r2, r3
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	220e      	movs	r2, #14
 8009246:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	2202      	movs	r2, #2
 800925e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	f103 0210 	add.w	r2, r3, #16
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800926e:	2301      	movs	r3, #1
 8009270:	75fb      	strb	r3, [r7, #23]
      break;
 8009272:	e020      	b.n	80092b6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009274:	7afb      	ldrb	r3, [r7, #11]
 8009276:	4619      	mov	r1, r3
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7ff fc07 	bl	8008a8c <USBH_MSC_BOT_Process>
 800927e:	4603      	mov	r3, r0
 8009280:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009282:	7dfb      	ldrb	r3, [r7, #23]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d115      	bne.n	80092b4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800928e:	3302      	adds	r3, #2
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	f003 030f 	and.w	r3, r3, #15
 8009296:	b2da      	uxtb	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092a2:	7b1a      	ldrb	r2, [r3, #12]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092ae:	7b5a      	ldrb	r2, [r3, #13]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	709a      	strb	r2, [r3, #2]
      break;
 80092b4:	bf00      	nop
  }

  return error;
 80092b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	607a      	str	r2, [r7, #4]
 80092ca:	603b      	str	r3, [r7, #0]
 80092cc:	460b      	mov	r3, r1
 80092ce:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80092d0:	2302      	movs	r3, #2
 80092d2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d002      	beq.n	80092ee <USBH_MSC_SCSI_Write+0x2e>
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d047      	beq.n	800937c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80092ec:	e04e      	b.n	800938c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80092f4:	461a      	mov	r2, r3
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	fb03 f202 	mul.w	r2, r3, r2
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	220a      	movs	r2, #10
 800930c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	3363      	adds	r3, #99	; 0x63
 8009314:	2210      	movs	r2, #16
 8009316:	2100      	movs	r1, #0
 8009318:	4618      	mov	r0, r3
 800931a:	f004 fae7 	bl	800d8ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	222a      	movs	r2, #42	; 0x2a
 8009322:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009326:	79fa      	ldrb	r2, [r7, #7]
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800932e:	79ba      	ldrb	r2, [r7, #6]
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009336:	797a      	ldrb	r2, [r7, #5]
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800933e:	1d3b      	adds	r3, r7, #4
 8009340:	781a      	ldrb	r2, [r3, #0]
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009348:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009352:	f107 0320 	add.w	r3, r7, #32
 8009356:	781a      	ldrb	r2, [r3, #0]
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	2202      	movs	r2, #2
 800936a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	683a      	ldr	r2, [r7, #0]
 8009372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009376:	2301      	movs	r3, #1
 8009378:	75fb      	strb	r3, [r7, #23]
      break;
 800937a:	e007      	b.n	800938c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800937c:	7afb      	ldrb	r3, [r7, #11]
 800937e:	4619      	mov	r1, r3
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f7ff fb83 	bl	8008a8c <USBH_MSC_BOT_Process>
 8009386:	4603      	mov	r3, r0
 8009388:	75fb      	strb	r3, [r7, #23]
      break;
 800938a:	bf00      	nop
  }

  return error;
 800938c:	7dfb      	ldrb	r3, [r7, #23]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b086      	sub	sp, #24
 800939a:	af00      	add	r7, sp, #0
 800939c:	60f8      	str	r0, [r7, #12]
 800939e:	607a      	str	r2, [r7, #4]
 80093a0:	603b      	str	r3, [r7, #0]
 80093a2:	460b      	mov	r3, r1
 80093a4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80093a6:	2302      	movs	r3, #2
 80093a8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093b0:	69db      	ldr	r3, [r3, #28]
 80093b2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d002      	beq.n	80093c4 <USBH_MSC_SCSI_Read+0x2e>
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d047      	beq.n	8009452 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80093c2:	e04e      	b.n	8009462 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80093ca:	461a      	mov	r2, r3
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	fb03 f202 	mul.w	r2, r3, r2
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	2280      	movs	r2, #128	; 0x80
 80093da:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	220a      	movs	r2, #10
 80093e2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	3363      	adds	r3, #99	; 0x63
 80093ea:	2210      	movs	r2, #16
 80093ec:	2100      	movs	r1, #0
 80093ee:	4618      	mov	r0, r3
 80093f0:	f004 fa7c 	bl	800d8ec <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	2228      	movs	r2, #40	; 0x28
 80093f8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80093fc:	79fa      	ldrb	r2, [r7, #7]
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009404:	79ba      	ldrb	r2, [r7, #6]
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800940c:	797a      	ldrb	r2, [r7, #5]
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009414:	1d3b      	adds	r3, r7, #4
 8009416:	781a      	ldrb	r2, [r3, #0]
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800941e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009428:	f107 0320 	add.w	r3, r7, #32
 800942c:	781a      	ldrb	r2, [r3, #0]
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800944c:	2301      	movs	r3, #1
 800944e:	75fb      	strb	r3, [r7, #23]
      break;
 8009450:	e007      	b.n	8009462 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009452:	7afb      	ldrb	r3, [r7, #11]
 8009454:	4619      	mov	r1, r3
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f7ff fb18 	bl	8008a8c <USBH_MSC_BOT_Process>
 800945c:	4603      	mov	r3, r0
 800945e:	75fb      	strb	r3, [r7, #23]
      break;
 8009460:	bf00      	nop
  }

  return error;
 8009462:	7dfb      	ldrb	r3, [r7, #23]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3718      	adds	r7, #24
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	4613      	mov	r3, r2
 8009478:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d101      	bne.n	8009484 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009480:	2302      	movs	r3, #2
 8009482:	e029      	b.n	80094d8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	79fa      	ldrb	r2, [r7, #7]
 8009488:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 f81f 	bl	80094e0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d003      	beq.n	80094d0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f003 ffc5 	bl	800d460 <USBH_LL_Init>

  return USBH_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80094ec:	2300      	movs	r3, #0
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	e009      	b.n	8009506 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	33e0      	adds	r3, #224	; 0xe0
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	4413      	add	r3, r2
 80094fc:	2200      	movs	r2, #0
 80094fe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	3301      	adds	r3, #1
 8009504:	60fb      	str	r3, [r7, #12]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b0e      	cmp	r3, #14
 800950a:	d9f2      	bls.n	80094f2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800950c:	2300      	movs	r3, #0
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	e009      	b.n	8009526 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	4413      	add	r3, r2
 8009518:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800951c:	2200      	movs	r2, #0
 800951e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	3301      	adds	r3, #1
 8009524:	60fb      	str	r3, [r7, #12]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800952c:	d3f1      	bcc.n	8009512 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2201      	movs	r2, #1
 800953e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2240      	movs	r2, #64	; 0x40
 8009552:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2201      	movs	r2, #1
 8009566:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d016      	beq.n	80095ca <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10e      	bne.n	80095c4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80095ac:	1c59      	adds	r1, r3, #1
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	33de      	adds	r3, #222	; 0xde
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	73fb      	strb	r3, [r7, #15]
 80095c2:	e004      	b.n	80095ce <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80095c4:	2302      	movs	r3, #2
 80095c6:	73fb      	strb	r3, [r7, #15]
 80095c8:	e001      	b.n	80095ce <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80095ca:	2302      	movs	r3, #2
 80095cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80095f2:	78fa      	ldrb	r2, [r7, #3]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d204      	bcs.n	8009602 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	78fa      	ldrb	r2, [r7, #3]
 80095fc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009600:	e001      	b.n	8009606 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009602:	2302      	movs	r3, #2
 8009604:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009606:	7bfb      	ldrb	r3, [r7, #15]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3714      	adds	r7, #20
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009614:	b480      	push	{r7}
 8009616:	b087      	sub	sp, #28
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	4608      	mov	r0, r1
 800961e:	4611      	mov	r1, r2
 8009620:	461a      	mov	r2, r3
 8009622:	4603      	mov	r3, r0
 8009624:	70fb      	strb	r3, [r7, #3]
 8009626:	460b      	mov	r3, r1
 8009628:	70bb      	strb	r3, [r7, #2]
 800962a:	4613      	mov	r3, r2
 800962c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800962e:	2300      	movs	r3, #0
 8009630:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009632:	2300      	movs	r3, #0
 8009634:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800963c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800963e:	e025      	b.n	800968c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009640:	7dfb      	ldrb	r3, [r7, #23]
 8009642:	221a      	movs	r2, #26
 8009644:	fb02 f303 	mul.w	r3, r2, r3
 8009648:	3308      	adds	r3, #8
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	4413      	add	r3, r2
 800964e:	3302      	adds	r3, #2
 8009650:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	795b      	ldrb	r3, [r3, #5]
 8009656:	78fa      	ldrb	r2, [r7, #3]
 8009658:	429a      	cmp	r2, r3
 800965a:	d002      	beq.n	8009662 <USBH_FindInterface+0x4e>
 800965c:	78fb      	ldrb	r3, [r7, #3]
 800965e:	2bff      	cmp	r3, #255	; 0xff
 8009660:	d111      	bne.n	8009686 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009666:	78ba      	ldrb	r2, [r7, #2]
 8009668:	429a      	cmp	r2, r3
 800966a:	d002      	beq.n	8009672 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800966c:	78bb      	ldrb	r3, [r7, #2]
 800966e:	2bff      	cmp	r3, #255	; 0xff
 8009670:	d109      	bne.n	8009686 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009676:	787a      	ldrb	r2, [r7, #1]
 8009678:	429a      	cmp	r2, r3
 800967a:	d002      	beq.n	8009682 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800967c:	787b      	ldrb	r3, [r7, #1]
 800967e:	2bff      	cmp	r3, #255	; 0xff
 8009680:	d101      	bne.n	8009686 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009682:	7dfb      	ldrb	r3, [r7, #23]
 8009684:	e006      	b.n	8009694 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009686:	7dfb      	ldrb	r3, [r7, #23]
 8009688:	3301      	adds	r3, #1
 800968a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800968c:	7dfb      	ldrb	r3, [r7, #23]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d9d6      	bls.n	8009640 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009692:	23ff      	movs	r3, #255	; 0xff
}
 8009694:	4618      	mov	r0, r3
 8009696:	371c      	adds	r7, #28
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f003 ff15 	bl	800d4d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80096ae:	2101      	movs	r1, #1
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f004 f82e 	bl	800d712 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b088      	sub	sp, #32
 80096c4:	af04      	add	r7, sp, #16
 80096c6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80096c8:	2302      	movs	r3, #2
 80096ca:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80096cc:	2300      	movs	r3, #0
 80096ce:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d102      	bne.n	80096e2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2203      	movs	r2, #3
 80096e0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	2b0b      	cmp	r3, #11
 80096ea:	f200 81b3 	bhi.w	8009a54 <USBH_Process+0x394>
 80096ee:	a201      	add	r2, pc, #4	; (adr r2, 80096f4 <USBH_Process+0x34>)
 80096f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f4:	08009725 	.word	0x08009725
 80096f8:	08009757 	.word	0x08009757
 80096fc:	080097bf 	.word	0x080097bf
 8009700:	080099ef 	.word	0x080099ef
 8009704:	08009a55 	.word	0x08009a55
 8009708:	08009863 	.word	0x08009863
 800970c:	08009995 	.word	0x08009995
 8009710:	08009899 	.word	0x08009899
 8009714:	080098b9 	.word	0x080098b9
 8009718:	080098d9 	.word	0x080098d9
 800971c:	08009907 	.word	0x08009907
 8009720:	080099d7 	.word	0x080099d7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b00      	cmp	r3, #0
 800972e:	f000 8193 	beq.w	8009a58 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009738:	20c8      	movs	r0, #200	; 0xc8
 800973a:	f004 f858 	bl	800d7ee <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f003 ff27 	bl	800d592 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009754:	e180      	b.n	8009a58 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800975c:	2b01      	cmp	r3, #1
 800975e:	d107      	bne.n	8009770 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800976e:	e182      	b.n	8009a76 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009776:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800977a:	d914      	bls.n	80097a6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009782:	3301      	adds	r3, #1
 8009784:	b2da      	uxtb	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009792:	2b03      	cmp	r3, #3
 8009794:	d903      	bls.n	800979e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	220d      	movs	r2, #13
 800979a:	701a      	strb	r2, [r3, #0]
      break;
 800979c:	e16b      	b.n	8009a76 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	701a      	strb	r2, [r3, #0]
      break;
 80097a4:	e167      	b.n	8009a76 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80097ac:	f103 020a 	add.w	r2, r3, #10
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80097b6:	200a      	movs	r0, #10
 80097b8:	f004 f819 	bl	800d7ee <USBH_Delay>
      break;
 80097bc:	e15b      	b.n	8009a76 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d005      	beq.n	80097d4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097ce:	2104      	movs	r1, #4
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80097d4:	2064      	movs	r0, #100	; 0x64
 80097d6:	f004 f80a 	bl	800d7ee <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f003 feb2 	bl	800d544 <USBH_LL_GetSpeed>
 80097e0:	4603      	mov	r3, r0
 80097e2:	461a      	mov	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2205      	movs	r2, #5
 80097ee:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80097f0:	2100      	movs	r1, #0
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f001 f92f 	bl	800aa56 <USBH_AllocPipe>
 80097f8:	4603      	mov	r3, r0
 80097fa:	461a      	mov	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009800:	2180      	movs	r1, #128	; 0x80
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f001 f927 	bl	800aa56 <USBH_AllocPipe>
 8009808:	4603      	mov	r3, r0
 800980a:	461a      	mov	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	7919      	ldrb	r1, [r3, #4]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009824:	b292      	uxth	r2, r2
 8009826:	9202      	str	r2, [sp, #8]
 8009828:	2200      	movs	r2, #0
 800982a:	9201      	str	r2, [sp, #4]
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	4603      	mov	r3, r0
 8009830:	2280      	movs	r2, #128	; 0x80
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f001 f8e0 	bl	800a9f8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	7959      	ldrb	r1, [r3, #5]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800984c:	b292      	uxth	r2, r2
 800984e:	9202      	str	r2, [sp, #8]
 8009850:	2200      	movs	r2, #0
 8009852:	9201      	str	r2, [sp, #4]
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	4603      	mov	r3, r0
 8009858:	2200      	movs	r2, #0
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f001 f8cc 	bl	800a9f8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009860:	e109      	b.n	8009a76 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f90c 	bl	8009a80 <USBH_HandleEnum>
 8009868:	4603      	mov	r3, r0
 800986a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800986c:	7bbb      	ldrb	r3, [r7, #14]
 800986e:	b2db      	uxtb	r3, r3
 8009870:	2b00      	cmp	r3, #0
 8009872:	f040 80f3 	bne.w	8009a5c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009884:	2b01      	cmp	r3, #1
 8009886:	d103      	bne.n	8009890 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2208      	movs	r2, #8
 800988c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800988e:	e0e5      	b.n	8009a5c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2207      	movs	r2, #7
 8009894:	701a      	strb	r2, [r3, #0]
      break;
 8009896:	e0e1      	b.n	8009a5c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 80de 	beq.w	8009a60 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098aa:	2101      	movs	r1, #1
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2208      	movs	r2, #8
 80098b4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80098b6:	e0d3      	b.n	8009a60 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80098be:	b29b      	uxth	r3, r3
 80098c0:	4619      	mov	r1, r3
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 fc20 	bl	800a108 <USBH_SetCfg>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f040 80ca 	bne.w	8009a64 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2209      	movs	r2, #9
 80098d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80098d6:	e0c5      	b.n	8009a64 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80098de:	f003 0320 	and.w	r3, r3, #32
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00b      	beq.n	80098fe <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80098e6:	2101      	movs	r1, #1
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fc30 	bl	800a14e <USBH_SetFeature>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f040 80b9 	bne.w	8009a68 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	220a      	movs	r2, #10
 80098fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80098fc:	e0b4      	b.n	8009a68 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	220a      	movs	r2, #10
 8009902:	701a      	strb	r2, [r3, #0]
      break;
 8009904:	e0b0      	b.n	8009a68 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 80ad 	beq.w	8009a6c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800991a:	2300      	movs	r3, #0
 800991c:	73fb      	strb	r3, [r7, #15]
 800991e:	e016      	b.n	800994e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009920:	7bfa      	ldrb	r2, [r7, #15]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	32de      	adds	r2, #222	; 0xde
 8009926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800992a:	791a      	ldrb	r2, [r3, #4]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009932:	429a      	cmp	r2, r3
 8009934:	d108      	bne.n	8009948 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009936:	7bfa      	ldrb	r2, [r7, #15]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	32de      	adds	r2, #222	; 0xde
 800993c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009946:	e005      	b.n	8009954 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009948:	7bfb      	ldrb	r3, [r7, #15]
 800994a:	3301      	adds	r3, #1
 800994c:	73fb      	strb	r3, [r7, #15]
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d0e5      	beq.n	8009920 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800995a:	2b00      	cmp	r3, #0
 800995c:	d016      	beq.n	800998c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	4798      	blx	r3
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d109      	bne.n	8009984 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2206      	movs	r2, #6
 8009974:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800997c:	2103      	movs	r1, #3
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009982:	e073      	b.n	8009a6c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	220d      	movs	r2, #13
 8009988:	701a      	strb	r2, [r3, #0]
      break;
 800998a:	e06f      	b.n	8009a6c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	220d      	movs	r2, #13
 8009990:	701a      	strb	r2, [r3, #0]
      break;
 8009992:	e06b      	b.n	8009a6c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800999a:	2b00      	cmp	r3, #0
 800999c:	d017      	beq.n	80099ce <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	4798      	blx	r3
 80099aa:	4603      	mov	r3, r0
 80099ac:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d103      	bne.n	80099be <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	220b      	movs	r2, #11
 80099ba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80099bc:	e058      	b.n	8009a70 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80099be:	7bbb      	ldrb	r3, [r7, #14]
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d154      	bne.n	8009a70 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	220d      	movs	r2, #13
 80099ca:	701a      	strb	r2, [r3, #0]
      break;
 80099cc:	e050      	b.n	8009a70 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	220d      	movs	r2, #13
 80099d2:	701a      	strb	r2, [r3, #0]
      break;
 80099d4:	e04c      	b.n	8009a70 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d049      	beq.n	8009a74 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099e6:	695b      	ldr	r3, [r3, #20]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	4798      	blx	r3
      }
      break;
 80099ec:	e042      	b.n	8009a74 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7ff fd72 	bl	80094e0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d009      	beq.n	8009a1a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d005      	beq.n	8009a30 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a2a:	2105      	movs	r1, #5
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d107      	bne.n	8009a4c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7ff fe2b 	bl	80096a0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009a4a:	e014      	b.n	8009a76 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f003 fd43 	bl	800d4d8 <USBH_LL_Start>
      break;
 8009a52:	e010      	b.n	8009a76 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009a54:	bf00      	nop
 8009a56:	e00e      	b.n	8009a76 <USBH_Process+0x3b6>
      break;
 8009a58:	bf00      	nop
 8009a5a:	e00c      	b.n	8009a76 <USBH_Process+0x3b6>
      break;
 8009a5c:	bf00      	nop
 8009a5e:	e00a      	b.n	8009a76 <USBH_Process+0x3b6>
    break;
 8009a60:	bf00      	nop
 8009a62:	e008      	b.n	8009a76 <USBH_Process+0x3b6>
      break;
 8009a64:	bf00      	nop
 8009a66:	e006      	b.n	8009a76 <USBH_Process+0x3b6>
      break;
 8009a68:	bf00      	nop
 8009a6a:	e004      	b.n	8009a76 <USBH_Process+0x3b6>
      break;
 8009a6c:	bf00      	nop
 8009a6e:	e002      	b.n	8009a76 <USBH_Process+0x3b6>
      break;
 8009a70:	bf00      	nop
 8009a72:	e000      	b.n	8009a76 <USBH_Process+0x3b6>
      break;
 8009a74:	bf00      	nop
  }
  return USBH_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af04      	add	r7, sp, #16
 8009a86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	785b      	ldrb	r3, [r3, #1]
 8009a94:	2b07      	cmp	r3, #7
 8009a96:	f200 81c1 	bhi.w	8009e1c <USBH_HandleEnum+0x39c>
 8009a9a:	a201      	add	r2, pc, #4	; (adr r2, 8009aa0 <USBH_HandleEnum+0x20>)
 8009a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa0:	08009ac1 	.word	0x08009ac1
 8009aa4:	08009b7f 	.word	0x08009b7f
 8009aa8:	08009be9 	.word	0x08009be9
 8009aac:	08009c77 	.word	0x08009c77
 8009ab0:	08009ce1 	.word	0x08009ce1
 8009ab4:	08009d51 	.word	0x08009d51
 8009ab8:	08009d97 	.word	0x08009d97
 8009abc:	08009ddd 	.word	0x08009ddd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009ac0:	2108      	movs	r1, #8
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 fa50 	bl	8009f68 <USBH_Get_DevDesc>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009acc:	7bbb      	ldrb	r3, [r7, #14]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d130      	bne.n	8009b34 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	7919      	ldrb	r1, [r3, #4]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009af6:	b292      	uxth	r2, r2
 8009af8:	9202      	str	r2, [sp, #8]
 8009afa:	2200      	movs	r2, #0
 8009afc:	9201      	str	r2, [sp, #4]
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	4603      	mov	r3, r0
 8009b02:	2280      	movs	r2, #128	; 0x80
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 ff77 	bl	800a9f8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	7959      	ldrb	r1, [r3, #5]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b1e:	b292      	uxth	r2, r2
 8009b20:	9202      	str	r2, [sp, #8]
 8009b22:	2200      	movs	r2, #0
 8009b24:	9201      	str	r2, [sp, #4]
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 ff63 	bl	800a9f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009b32:	e175      	b.n	8009e20 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	f040 8172 	bne.w	8009e20 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b42:	3301      	adds	r3, #1
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d903      	bls.n	8009b5e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	220d      	movs	r2, #13
 8009b5a:	701a      	strb	r2, [r3, #0]
      break;
 8009b5c:	e160      	b.n	8009e20 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	795b      	ldrb	r3, [r3, #5]
 8009b62:	4619      	mov	r1, r3
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 ff97 	bl	800aa98 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	791b      	ldrb	r3, [r3, #4]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 ff91 	bl	800aa98 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	701a      	strb	r2, [r3, #0]
      break;
 8009b7c:	e150      	b.n	8009e20 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009b7e:	2112      	movs	r1, #18
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f9f1 	bl	8009f68 <USBH_Get_DevDesc>
 8009b86:	4603      	mov	r3, r0
 8009b88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b8a:	7bbb      	ldrb	r3, [r7, #14]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d103      	bne.n	8009b98 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2202      	movs	r2, #2
 8009b94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b96:	e145      	b.n	8009e24 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b98:	7bbb      	ldrb	r3, [r7, #14]
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	f040 8142 	bne.w	8009e24 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d903      	bls.n	8009bc2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	220d      	movs	r2, #13
 8009bbe:	701a      	strb	r2, [r3, #0]
      break;
 8009bc0:	e130      	b.n	8009e24 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	795b      	ldrb	r3, [r3, #5]
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 ff65 	bl	800aa98 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	791b      	ldrb	r3, [r3, #4]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 ff5f 	bl	800aa98 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	701a      	strb	r2, [r3, #0]
      break;
 8009be6:	e11d      	b.n	8009e24 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009be8:	2101      	movs	r1, #1
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fa68 	bl	800a0c0 <USBH_SetAddress>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009bf4:	7bbb      	ldrb	r3, [r7, #14]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d132      	bne.n	8009c60 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009bfa:	2002      	movs	r0, #2
 8009bfc:	f003 fdf7 	bl	800d7ee <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2203      	movs	r2, #3
 8009c0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	7919      	ldrb	r1, [r3, #4]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c22:	b292      	uxth	r2, r2
 8009c24:	9202      	str	r2, [sp, #8]
 8009c26:	2200      	movs	r2, #0
 8009c28:	9201      	str	r2, [sp, #4]
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2280      	movs	r2, #128	; 0x80
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fee1 	bl	800a9f8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	7959      	ldrb	r1, [r3, #5]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c4a:	b292      	uxth	r2, r2
 8009c4c:	9202      	str	r2, [sp, #8]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	9201      	str	r2, [sp, #4]
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	4603      	mov	r3, r0
 8009c56:	2200      	movs	r2, #0
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fecd 	bl	800a9f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009c5e:	e0e3      	b.n	8009e28 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c60:	7bbb      	ldrb	r3, [r7, #14]
 8009c62:	2b03      	cmp	r3, #3
 8009c64:	f040 80e0 	bne.w	8009e28 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	220d      	movs	r2, #13
 8009c6c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	705a      	strb	r2, [r3, #1]
      break;
 8009c74:	e0d8      	b.n	8009e28 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009c76:	2109      	movs	r1, #9
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 f99d 	bl	8009fb8 <USBH_Get_CfgDesc>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d103      	bne.n	8009c90 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2204      	movs	r2, #4
 8009c8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009c8e:	e0cd      	b.n	8009e2c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c90:	7bbb      	ldrb	r3, [r7, #14]
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	f040 80ca 	bne.w	8009e2c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d903      	bls.n	8009cba <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	220d      	movs	r2, #13
 8009cb6:	701a      	strb	r2, [r3, #0]
      break;
 8009cb8:	e0b8      	b.n	8009e2c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	795b      	ldrb	r3, [r3, #5]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 fee9 	bl	800aa98 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	791b      	ldrb	r3, [r3, #4]
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fee3 	bl	800aa98 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	701a      	strb	r2, [r3, #0]
      break;
 8009cde:	e0a5      	b.n	8009e2c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f965 	bl	8009fb8 <USBH_Get_CfgDesc>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009cf2:	7bbb      	ldrb	r3, [r7, #14]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d103      	bne.n	8009d00 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2205      	movs	r2, #5
 8009cfc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009cfe:	e097      	b.n	8009e30 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
 8009d02:	2b03      	cmp	r3, #3
 8009d04:	f040 8094 	bne.w	8009e30 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d0e:	3301      	adds	r3, #1
 8009d10:	b2da      	uxtb	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d1e:	2b03      	cmp	r3, #3
 8009d20:	d903      	bls.n	8009d2a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	220d      	movs	r2, #13
 8009d26:	701a      	strb	r2, [r3, #0]
      break;
 8009d28:	e082      	b.n	8009e30 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	795b      	ldrb	r3, [r3, #5]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 feb1 	bl	800aa98 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	791b      	ldrb	r3, [r3, #4]
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 feab 	bl	800aa98 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	701a      	strb	r2, [r3, #0]
      break;
 8009d4e:	e06f      	b.n	8009e30 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d019      	beq.n	8009d8e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009d66:	23ff      	movs	r3, #255	; 0xff
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f949 	bl	800a000 <USBH_Get_StringDesc>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d103      	bne.n	8009d80 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2206      	movs	r2, #6
 8009d7c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009d7e:	e059      	b.n	8009e34 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	d156      	bne.n	8009e34 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2206      	movs	r2, #6
 8009d8a:	705a      	strb	r2, [r3, #1]
      break;
 8009d8c:	e052      	b.n	8009e34 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2206      	movs	r2, #6
 8009d92:	705a      	strb	r2, [r3, #1]
      break;
 8009d94:	e04e      	b.n	8009e34 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d019      	beq.n	8009dd4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009dac:	23ff      	movs	r3, #255	; 0xff
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f926 	bl	800a000 <USBH_Get_StringDesc>
 8009db4:	4603      	mov	r3, r0
 8009db6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009db8:	7bbb      	ldrb	r3, [r7, #14]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d103      	bne.n	8009dc6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2207      	movs	r2, #7
 8009dc2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009dc4:	e038      	b.n	8009e38 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009dc6:	7bbb      	ldrb	r3, [r7, #14]
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	d135      	bne.n	8009e38 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2207      	movs	r2, #7
 8009dd0:	705a      	strb	r2, [r3, #1]
      break;
 8009dd2:	e031      	b.n	8009e38 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2207      	movs	r2, #7
 8009dd8:	705a      	strb	r2, [r3, #1]
      break;
 8009dda:	e02d      	b.n	8009e38 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d017      	beq.n	8009e16 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009df2:	23ff      	movs	r3, #255	; 0xff
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f903 	bl	800a000 <USBH_Get_StringDesc>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d102      	bne.n	8009e0a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009e08:	e018      	b.n	8009e3c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e0a:	7bbb      	ldrb	r3, [r7, #14]
 8009e0c:	2b03      	cmp	r3, #3
 8009e0e:	d115      	bne.n	8009e3c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	73fb      	strb	r3, [r7, #15]
      break;
 8009e14:	e012      	b.n	8009e3c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009e16:	2300      	movs	r3, #0
 8009e18:	73fb      	strb	r3, [r7, #15]
      break;
 8009e1a:	e00f      	b.n	8009e3c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009e1c:	bf00      	nop
 8009e1e:	e00e      	b.n	8009e3e <USBH_HandleEnum+0x3be>
      break;
 8009e20:	bf00      	nop
 8009e22:	e00c      	b.n	8009e3e <USBH_HandleEnum+0x3be>
      break;
 8009e24:	bf00      	nop
 8009e26:	e00a      	b.n	8009e3e <USBH_HandleEnum+0x3be>
      break;
 8009e28:	bf00      	nop
 8009e2a:	e008      	b.n	8009e3e <USBH_HandleEnum+0x3be>
      break;
 8009e2c:	bf00      	nop
 8009e2e:	e006      	b.n	8009e3e <USBH_HandleEnum+0x3be>
      break;
 8009e30:	bf00      	nop
 8009e32:	e004      	b.n	8009e3e <USBH_HandleEnum+0x3be>
      break;
 8009e34:	bf00      	nop
 8009e36:	e002      	b.n	8009e3e <USBH_HandleEnum+0x3be>
      break;
 8009e38:	bf00      	nop
 8009e3a:	e000      	b.n	8009e3e <USBH_HandleEnum+0x3be>
      break;
 8009e3c:	bf00      	nop
  }
  return Status;
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	683a      	ldr	r2, [r7, #0]
 8009e56:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009e5a:	bf00      	nop
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b082      	sub	sp, #8
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e74:	1c5a      	adds	r2, r3, #1
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f804 	bl	8009e8a <USBH_HandleSof>
}
 8009e82:	bf00      	nop
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b0b      	cmp	r3, #11
 8009e9a:	d10a      	bne.n	8009eb2 <USBH_HandleSof+0x28>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d005      	beq.n	8009eb2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	4798      	blx	r3
  }
}
 8009eb2:	bf00      	nop
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009eba:	b480      	push	{r7}
 8009ebc:	b083      	sub	sp, #12
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009eca:	bf00      	nop
}
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b083      	sub	sp, #12
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009ee6:	bf00      	nop
}
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b083      	sub	sp, #12
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f003 fae4 	bl	800d50e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	791b      	ldrb	r3, [r3, #4]
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fda3 	bl	800aa98 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	795b      	ldrb	r3, [r3, #5]
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fd9d 	bl	800aa98 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af02      	add	r7, sp, #8
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009f7a:	78fb      	ldrb	r3, [r7, #3]
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	4613      	mov	r3, r2
 8009f82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f86:	2100      	movs	r1, #0
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f864 	bl	800a056 <USBH_GetDescriptor>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	73fb      	strb	r3, [r7, #15]
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009fa4:	78fa      	ldrb	r2, [r7, #3]
 8009fa6:	b292      	uxth	r2, r2
 8009fa8:	4619      	mov	r1, r3
 8009faa:	f000 f918 	bl	800a1de <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af02      	add	r7, sp, #8
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	331c      	adds	r3, #28
 8009fc8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009fca:	887b      	ldrh	r3, [r7, #2]
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f83d 	bl	800a056 <USBH_GetDescriptor>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	72fb      	strb	r3, [r7, #11]
 8009fe0:	7afb      	ldrb	r3, [r7, #11]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d107      	bne.n	8009ff6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009fec:	887a      	ldrh	r2, [r7, #2]
 8009fee:	68f9      	ldr	r1, [r7, #12]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f000 f964 	bl	800a2be <USBH_ParseCfgDesc>
  }

  return status;
 8009ff6:	7afb      	ldrb	r3, [r7, #11]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b088      	sub	sp, #32
 800a004:	af02      	add	r7, sp, #8
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	461a      	mov	r2, r3
 800a00c:	460b      	mov	r3, r1
 800a00e:	72fb      	strb	r3, [r7, #11]
 800a010:	4613      	mov	r3, r2
 800a012:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a014:	7afb      	ldrb	r3, [r7, #11]
 800a016:	b29b      	uxth	r3, r3
 800a018:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a01c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a024:	893b      	ldrh	r3, [r7, #8]
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	460b      	mov	r3, r1
 800a02a:	2100      	movs	r1, #0
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f000 f812 	bl	800a056 <USBH_GetDescriptor>
 800a032:	4603      	mov	r3, r0
 800a034:	75fb      	strb	r3, [r7, #23]
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d107      	bne.n	800a04c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a042:	893a      	ldrh	r2, [r7, #8]
 800a044:	6879      	ldr	r1, [r7, #4]
 800a046:	4618      	mov	r0, r3
 800a048:	f000 fa37 	bl	800a4ba <USBH_ParseStringDesc>
  }

  return status;
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3718      	adds	r7, #24
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	60f8      	str	r0, [r7, #12]
 800a05e:	607b      	str	r3, [r7, #4]
 800a060:	460b      	mov	r3, r1
 800a062:	72fb      	strb	r3, [r7, #11]
 800a064:	4613      	mov	r3, r2
 800a066:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	789b      	ldrb	r3, [r3, #2]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d11c      	bne.n	800a0aa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a070:	7afb      	ldrb	r3, [r7, #11]
 800a072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a076:	b2da      	uxtb	r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2206      	movs	r2, #6
 800a080:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	893a      	ldrh	r2, [r7, #8]
 800a086:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a088:	893b      	ldrh	r3, [r7, #8]
 800a08a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a08e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a092:	d104      	bne.n	800a09e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f240 4209 	movw	r2, #1033	; 0x409
 800a09a:	829a      	strh	r2, [r3, #20]
 800a09c:	e002      	b.n	800a0a4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	8b3a      	ldrh	r2, [r7, #24]
 800a0a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a0aa:	8b3b      	ldrh	r3, [r7, #24]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	6879      	ldr	r1, [r7, #4]
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 fa50 	bl	800a556 <USBH_CtlReq>
 800a0b6:	4603      	mov	r3, r0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	789b      	ldrb	r3, [r3, #2]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d10f      	bne.n	800a0f4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2205      	movs	r2, #5
 800a0de:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a0e0:	78fb      	ldrb	r3, [r7, #3]
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 fa2c 	bl	800a556 <USBH_CtlReq>
 800a0fe:	4603      	mov	r3, r0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	789b      	ldrb	r3, [r3, #2]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d10e      	bne.n	800a13a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2209      	movs	r2, #9
 800a126:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	887a      	ldrh	r2, [r7, #2]
 800a12c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a13a:	2200      	movs	r2, #0
 800a13c:	2100      	movs	r1, #0
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fa09 	bl	800a556 <USBH_CtlReq>
 800a144:	4603      	mov	r3, r0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b082      	sub	sp, #8
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	460b      	mov	r3, r1
 800a158:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	789b      	ldrb	r3, [r3, #2]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d10f      	bne.n	800a182 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2203      	movs	r2, #3
 800a16c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a16e:	78fb      	ldrb	r3, [r7, #3]
 800a170:	b29a      	uxth	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a182:	2200      	movs	r2, #0
 800a184:	2100      	movs	r1, #0
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f9e5 	bl	800a556 <USBH_CtlReq>
 800a18c:	4603      	mov	r3, r0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b082      	sub	sp, #8
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	789b      	ldrb	r3, [r3, #2]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d10f      	bne.n	800a1ca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a1bc:	78fb      	ldrb	r3, [r7, #3]
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f9c1 	bl	800a556 <USBH_CtlReq>
 800a1d4:	4603      	mov	r3, r0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a1de:	b480      	push	{r7}
 800a1e0:	b085      	sub	sp, #20
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	60b9      	str	r1, [r7, #8]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	781a      	ldrb	r2, [r3, #0]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	785a      	ldrb	r2, [r3, #1]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	3302      	adds	r3, #2
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	b29a      	uxth	r2, r3
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	3303      	adds	r3, #3
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	021b      	lsls	r3, r3, #8
 800a20e:	b29b      	uxth	r3, r3
 800a210:	4313      	orrs	r3, r2
 800a212:	b29a      	uxth	r2, r3
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	791a      	ldrb	r2, [r3, #4]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	795a      	ldrb	r2, [r3, #5]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	799a      	ldrb	r2, [r3, #6]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	79da      	ldrb	r2, [r3, #7]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a238:	88fb      	ldrh	r3, [r7, #6]
 800a23a:	2b08      	cmp	r3, #8
 800a23c:	d939      	bls.n	800a2b2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	3308      	adds	r3, #8
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	b29a      	uxth	r2, r3
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	3309      	adds	r3, #9
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	021b      	lsls	r3, r3, #8
 800a250:	b29b      	uxth	r3, r3
 800a252:	4313      	orrs	r3, r2
 800a254:	b29a      	uxth	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	330a      	adds	r3, #10
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	b29a      	uxth	r2, r3
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	330b      	adds	r3, #11
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	021b      	lsls	r3, r3, #8
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	4313      	orrs	r3, r2
 800a270:	b29a      	uxth	r2, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	330c      	adds	r3, #12
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	330d      	adds	r3, #13
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	b29b      	uxth	r3, r3
 800a286:	021b      	lsls	r3, r3, #8
 800a288:	b29b      	uxth	r3, r3
 800a28a:	4313      	orrs	r3, r2
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	7b9a      	ldrb	r2, [r3, #14]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	7bda      	ldrb	r2, [r3, #15]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	7c1a      	ldrb	r2, [r3, #16]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	7c5a      	ldrb	r2, [r3, #17]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	745a      	strb	r2, [r3, #17]
  }
}
 800a2b2:	bf00      	nop
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b08a      	sub	sp, #40	; 0x28
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	60f8      	str	r0, [r7, #12]
 800a2c6:	60b9      	str	r1, [r7, #8]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	781a      	ldrb	r2, [r3, #0]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	785a      	ldrb	r2, [r3, #1]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	3302      	adds	r3, #2
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	3303      	adds	r3, #3
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	021b      	lsls	r3, r3, #8
 800a302:	b29b      	uxth	r3, r3
 800a304:	4313      	orrs	r3, r2
 800a306:	b29a      	uxth	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	791a      	ldrb	r2, [r3, #4]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	795a      	ldrb	r2, [r3, #5]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	799a      	ldrb	r2, [r3, #6]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	79da      	ldrb	r2, [r3, #7]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	7a1a      	ldrb	r2, [r3, #8]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a334:	88fb      	ldrh	r3, [r7, #6]
 800a336:	2b09      	cmp	r3, #9
 800a338:	d95f      	bls.n	800a3fa <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a33a:	2309      	movs	r3, #9
 800a33c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a33e:	2300      	movs	r3, #0
 800a340:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a342:	e051      	b.n	800a3e8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a344:	f107 0316 	add.w	r3, r7, #22
 800a348:	4619      	mov	r1, r3
 800a34a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a34c:	f000 f8e8 	bl	800a520 <USBH_GetNextDesc>
 800a350:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a354:	785b      	ldrb	r3, [r3, #1]
 800a356:	2b04      	cmp	r3, #4
 800a358:	d146      	bne.n	800a3e8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a35a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a35e:	221a      	movs	r2, #26
 800a360:	fb02 f303 	mul.w	r3, r2, r3
 800a364:	3308      	adds	r3, #8
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	4413      	add	r3, r2
 800a36a:	3302      	adds	r3, #2
 800a36c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a36e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a370:	69f8      	ldr	r0, [r7, #28]
 800a372:	f000 f846 	bl	800a402 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a376:	2300      	movs	r3, #0
 800a378:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a380:	e022      	b.n	800a3c8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a382:	f107 0316 	add.w	r3, r7, #22
 800a386:	4619      	mov	r1, r3
 800a388:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a38a:	f000 f8c9 	bl	800a520 <USBH_GetNextDesc>
 800a38e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	785b      	ldrb	r3, [r3, #1]
 800a394:	2b05      	cmp	r3, #5
 800a396:	d117      	bne.n	800a3c8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a398:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a39c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a3a0:	3201      	adds	r2, #1
 800a3a2:	00d2      	lsls	r2, r2, #3
 800a3a4:	211a      	movs	r1, #26
 800a3a6:	fb01 f303 	mul.w	r3, r1, r3
 800a3aa:	4413      	add	r3, r2
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a3b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3b8:	69b8      	ldr	r0, [r7, #24]
 800a3ba:	f000 f851 	bl	800a460 <USBH_ParseEPDesc>
            ep_ix++;
 800a3be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	791b      	ldrb	r3, [r3, #4]
 800a3cc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d204      	bcs.n	800a3de <USBH_ParseCfgDesc+0x120>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	885a      	ldrh	r2, [r3, #2]
 800a3d8:	8afb      	ldrh	r3, [r7, #22]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d8d1      	bhi.n	800a382 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a3de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a3e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d804      	bhi.n	800a3fa <USBH_ParseCfgDesc+0x13c>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	885a      	ldrh	r2, [r3, #2]
 800a3f4:	8afb      	ldrh	r3, [r7, #22]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d8a4      	bhi.n	800a344 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a3fa:	bf00      	nop
 800a3fc:	3728      	adds	r7, #40	; 0x28
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a402:	b480      	push	{r7}
 800a404:	b083      	sub	sp, #12
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	781a      	ldrb	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	785a      	ldrb	r2, [r3, #1]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	789a      	ldrb	r2, [r3, #2]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	78da      	ldrb	r2, [r3, #3]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	791a      	ldrb	r2, [r3, #4]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	795a      	ldrb	r2, [r3, #5]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	799a      	ldrb	r2, [r3, #6]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	79da      	ldrb	r2, [r3, #7]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	7a1a      	ldrb	r2, [r3, #8]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	721a      	strb	r2, [r3, #8]
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	781a      	ldrb	r2, [r3, #0]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	785a      	ldrb	r2, [r3, #1]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	789a      	ldrb	r2, [r3, #2]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	78da      	ldrb	r2, [r3, #3]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	3304      	adds	r3, #4
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	b29a      	uxth	r2, r3
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	3305      	adds	r3, #5
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	b29b      	uxth	r3, r3
 800a49a:	021b      	lsls	r3, r3, #8
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	799a      	ldrb	r2, [r3, #6]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	719a      	strb	r2, [r3, #6]
}
 800a4ae:	bf00      	nop
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b087      	sub	sp, #28
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	60f8      	str	r0, [r7, #12]
 800a4c2:	60b9      	str	r1, [r7, #8]
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	2b03      	cmp	r3, #3
 800a4d0:	d120      	bne.n	800a514 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	1e9a      	subs	r2, r3, #2
 800a4d8:	88fb      	ldrh	r3, [r7, #6]
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	bf28      	it	cs
 800a4de:	4613      	movcs	r3, r2
 800a4e0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	3302      	adds	r3, #2
 800a4e6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	82fb      	strh	r3, [r7, #22]
 800a4ec:	e00b      	b.n	800a506 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a4ee:	8afb      	ldrh	r3, [r7, #22]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	781a      	ldrb	r2, [r3, #0]
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a500:	8afb      	ldrh	r3, [r7, #22]
 800a502:	3302      	adds	r3, #2
 800a504:	82fb      	strh	r3, [r7, #22]
 800a506:	8afa      	ldrh	r2, [r7, #22]
 800a508:	8abb      	ldrh	r3, [r7, #20]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d3ef      	bcc.n	800a4ee <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	2200      	movs	r2, #0
 800a512:	701a      	strb	r2, [r3, #0]
  }
}
 800a514:	bf00      	nop
 800a516:	371c      	adds	r7, #28
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	881a      	ldrh	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	b29b      	uxth	r3, r3
 800a534:	4413      	add	r3, r2
 800a536:	b29a      	uxth	r2, r3
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4413      	add	r3, r2
 800a546:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a548:	68fb      	ldr	r3, [r7, #12]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr

0800a556 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b086      	sub	sp, #24
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	60f8      	str	r0, [r7, #12]
 800a55e:	60b9      	str	r1, [r7, #8]
 800a560:	4613      	mov	r3, r2
 800a562:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a564:	2301      	movs	r3, #1
 800a566:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	789b      	ldrb	r3, [r3, #2]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d002      	beq.n	800a576 <USBH_CtlReq+0x20>
 800a570:	2b02      	cmp	r3, #2
 800a572:	d00f      	beq.n	800a594 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a574:	e027      	b.n	800a5c6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	88fa      	ldrh	r2, [r7, #6]
 800a580:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2201      	movs	r2, #1
 800a586:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2202      	movs	r2, #2
 800a58c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a58e:	2301      	movs	r3, #1
 800a590:	75fb      	strb	r3, [r7, #23]
      break;
 800a592:	e018      	b.n	800a5c6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f000 f81b 	bl	800a5d0 <USBH_HandleControl>
 800a59a:	4603      	mov	r3, r0
 800a59c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a59e:	7dfb      	ldrb	r3, [r7, #23]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <USBH_CtlReq+0x54>
 800a5a4:	7dfb      	ldrb	r3, [r7, #23]
 800a5a6:	2b03      	cmp	r3, #3
 800a5a8:	d106      	bne.n	800a5b8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	761a      	strb	r2, [r3, #24]
      break;
 800a5b6:	e005      	b.n	800a5c4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a5b8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d102      	bne.n	800a5c4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	709a      	strb	r2, [r3, #2]
      break;
 800a5c4:	bf00      	nop
  }
  return status;
 800a5c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3718      	adds	r7, #24
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af02      	add	r7, sp, #8
 800a5d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	7e1b      	ldrb	r3, [r3, #24]
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	2b0a      	cmp	r3, #10
 800a5e8:	f200 8156 	bhi.w	800a898 <USBH_HandleControl+0x2c8>
 800a5ec:	a201      	add	r2, pc, #4	; (adr r2, 800a5f4 <USBH_HandleControl+0x24>)
 800a5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f2:	bf00      	nop
 800a5f4:	0800a621 	.word	0x0800a621
 800a5f8:	0800a63b 	.word	0x0800a63b
 800a5fc:	0800a6a5 	.word	0x0800a6a5
 800a600:	0800a6cb 	.word	0x0800a6cb
 800a604:	0800a703 	.word	0x0800a703
 800a608:	0800a72d 	.word	0x0800a72d
 800a60c:	0800a77f 	.word	0x0800a77f
 800a610:	0800a7a1 	.word	0x0800a7a1
 800a614:	0800a7dd 	.word	0x0800a7dd
 800a618:	0800a803 	.word	0x0800a803
 800a61c:	0800a841 	.word	0x0800a841
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f103 0110 	add.w	r1, r3, #16
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	795b      	ldrb	r3, [r3, #5]
 800a62a:	461a      	mov	r2, r3
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f943 	bl	800a8b8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2202      	movs	r2, #2
 800a636:	761a      	strb	r2, [r3, #24]
      break;
 800a638:	e139      	b.n	800a8ae <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	795b      	ldrb	r3, [r3, #5]
 800a63e:	4619      	mov	r1, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f003 f853 	bl	800d6ec <USBH_LL_GetURBState>
 800a646:	4603      	mov	r3, r0
 800a648:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a64a:	7bbb      	ldrb	r3, [r7, #14]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d11e      	bne.n	800a68e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	7c1b      	ldrb	r3, [r3, #16]
 800a654:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a658:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	8adb      	ldrh	r3, [r3, #22]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00a      	beq.n	800a678 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a662:	7b7b      	ldrb	r3, [r7, #13]
 800a664:	2b80      	cmp	r3, #128	; 0x80
 800a666:	d103      	bne.n	800a670 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2203      	movs	r2, #3
 800a66c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a66e:	e115      	b.n	800a89c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2205      	movs	r2, #5
 800a674:	761a      	strb	r2, [r3, #24]
      break;
 800a676:	e111      	b.n	800a89c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a678:	7b7b      	ldrb	r3, [r7, #13]
 800a67a:	2b80      	cmp	r3, #128	; 0x80
 800a67c:	d103      	bne.n	800a686 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2209      	movs	r2, #9
 800a682:	761a      	strb	r2, [r3, #24]
      break;
 800a684:	e10a      	b.n	800a89c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2207      	movs	r2, #7
 800a68a:	761a      	strb	r2, [r3, #24]
      break;
 800a68c:	e106      	b.n	800a89c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a68e:	7bbb      	ldrb	r3, [r7, #14]
 800a690:	2b04      	cmp	r3, #4
 800a692:	d003      	beq.n	800a69c <USBH_HandleControl+0xcc>
 800a694:	7bbb      	ldrb	r3, [r7, #14]
 800a696:	2b02      	cmp	r3, #2
 800a698:	f040 8100 	bne.w	800a89c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	220b      	movs	r2, #11
 800a6a0:	761a      	strb	r2, [r3, #24]
      break;
 800a6a2:	e0fb      	b.n	800a89c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6899      	ldr	r1, [r3, #8]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	899a      	ldrh	r2, [r3, #12]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	791b      	ldrb	r3, [r3, #4]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f93a 	bl	800a936 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2204      	movs	r2, #4
 800a6c6:	761a      	strb	r2, [r3, #24]
      break;
 800a6c8:	e0f1      	b.n	800a8ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	791b      	ldrb	r3, [r3, #4]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f003 f80b 	bl	800d6ec <USBH_LL_GetURBState>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a6da:	7bbb      	ldrb	r3, [r7, #14]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d102      	bne.n	800a6e6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2209      	movs	r2, #9
 800a6e4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a6e6:	7bbb      	ldrb	r3, [r7, #14]
 800a6e8:	2b05      	cmp	r3, #5
 800a6ea:	d102      	bne.n	800a6f2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a6f0:	e0d6      	b.n	800a8a0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a6f2:	7bbb      	ldrb	r3, [r7, #14]
 800a6f4:	2b04      	cmp	r3, #4
 800a6f6:	f040 80d3 	bne.w	800a8a0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	220b      	movs	r2, #11
 800a6fe:	761a      	strb	r2, [r3, #24]
      break;
 800a700:	e0ce      	b.n	800a8a0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6899      	ldr	r1, [r3, #8]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	899a      	ldrh	r2, [r3, #12]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	795b      	ldrb	r3, [r3, #5]
 800a70e:	2001      	movs	r0, #1
 800a710:	9000      	str	r0, [sp, #0]
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 f8ea 	bl	800a8ec <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a71e:	b29a      	uxth	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2206      	movs	r2, #6
 800a728:	761a      	strb	r2, [r3, #24]
      break;
 800a72a:	e0c0      	b.n	800a8ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	795b      	ldrb	r3, [r3, #5]
 800a730:	4619      	mov	r1, r3
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f002 ffda 	bl	800d6ec <USBH_LL_GetURBState>
 800a738:	4603      	mov	r3, r0
 800a73a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d103      	bne.n	800a74a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2207      	movs	r2, #7
 800a746:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a748:	e0ac      	b.n	800a8a4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	2b05      	cmp	r3, #5
 800a74e:	d105      	bne.n	800a75c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	220c      	movs	r2, #12
 800a754:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a756:	2303      	movs	r3, #3
 800a758:	73fb      	strb	r3, [r7, #15]
      break;
 800a75a:	e0a3      	b.n	800a8a4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a75c:	7bbb      	ldrb	r3, [r7, #14]
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d103      	bne.n	800a76a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2205      	movs	r2, #5
 800a766:	761a      	strb	r2, [r3, #24]
      break;
 800a768:	e09c      	b.n	800a8a4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a76a:	7bbb      	ldrb	r3, [r7, #14]
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	f040 8099 	bne.w	800a8a4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	220b      	movs	r2, #11
 800a776:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a778:	2302      	movs	r3, #2
 800a77a:	73fb      	strb	r3, [r7, #15]
      break;
 800a77c:	e092      	b.n	800a8a4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	791b      	ldrb	r3, [r3, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	2100      	movs	r1, #0
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f8d5 	bl	800a936 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a792:	b29a      	uxth	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2208      	movs	r2, #8
 800a79c:	761a      	strb	r2, [r3, #24]

      break;
 800a79e:	e086      	b.n	800a8ae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	791b      	ldrb	r3, [r3, #4]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f002 ffa0 	bl	800d6ec <USBH_LL_GetURBState>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d105      	bne.n	800a7c2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	220d      	movs	r2, #13
 800a7ba:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a7c0:	e072      	b.n	800a8a8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a7c2:	7bbb      	ldrb	r3, [r7, #14]
 800a7c4:	2b04      	cmp	r3, #4
 800a7c6:	d103      	bne.n	800a7d0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	220b      	movs	r2, #11
 800a7cc:	761a      	strb	r2, [r3, #24]
      break;
 800a7ce:	e06b      	b.n	800a8a8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a7d0:	7bbb      	ldrb	r3, [r7, #14]
 800a7d2:	2b05      	cmp	r3, #5
 800a7d4:	d168      	bne.n	800a8a8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a7d6:	2303      	movs	r3, #3
 800a7d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a7da:	e065      	b.n	800a8a8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	795b      	ldrb	r3, [r3, #5]
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	9200      	str	r2, [sp, #0]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 f87f 	bl	800a8ec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	220a      	movs	r2, #10
 800a7fe:	761a      	strb	r2, [r3, #24]
      break;
 800a800:	e055      	b.n	800a8ae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	795b      	ldrb	r3, [r3, #5]
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f002 ff6f 	bl	800d6ec <USBH_LL_GetURBState>
 800a80e:	4603      	mov	r3, r0
 800a810:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a812:	7bbb      	ldrb	r3, [r7, #14]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d105      	bne.n	800a824 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a818:	2300      	movs	r3, #0
 800a81a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	220d      	movs	r2, #13
 800a820:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a822:	e043      	b.n	800a8ac <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a824:	7bbb      	ldrb	r3, [r7, #14]
 800a826:	2b02      	cmp	r3, #2
 800a828:	d103      	bne.n	800a832 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2209      	movs	r2, #9
 800a82e:	761a      	strb	r2, [r3, #24]
      break;
 800a830:	e03c      	b.n	800a8ac <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a832:	7bbb      	ldrb	r3, [r7, #14]
 800a834:	2b04      	cmp	r3, #4
 800a836:	d139      	bne.n	800a8ac <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	220b      	movs	r2, #11
 800a83c:	761a      	strb	r2, [r3, #24]
      break;
 800a83e:	e035      	b.n	800a8ac <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	7e5b      	ldrb	r3, [r3, #25]
 800a844:	3301      	adds	r3, #1
 800a846:	b2da      	uxtb	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	765a      	strb	r2, [r3, #25]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	7e5b      	ldrb	r3, [r3, #25]
 800a850:	2b02      	cmp	r3, #2
 800a852:	d806      	bhi.n	800a862 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a860:	e025      	b.n	800a8ae <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a868:	2106      	movs	r1, #6
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	795b      	ldrb	r3, [r3, #5]
 800a878:	4619      	mov	r1, r3
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f90c 	bl	800aa98 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	791b      	ldrb	r3, [r3, #4]
 800a884:	4619      	mov	r1, r3
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f906 	bl	800aa98 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a892:	2302      	movs	r3, #2
 800a894:	73fb      	strb	r3, [r7, #15]
      break;
 800a896:	e00a      	b.n	800a8ae <USBH_HandleControl+0x2de>

    default:
      break;
 800a898:	bf00      	nop
 800a89a:	e008      	b.n	800a8ae <USBH_HandleControl+0x2de>
      break;
 800a89c:	bf00      	nop
 800a89e:	e006      	b.n	800a8ae <USBH_HandleControl+0x2de>
      break;
 800a8a0:	bf00      	nop
 800a8a2:	e004      	b.n	800a8ae <USBH_HandleControl+0x2de>
      break;
 800a8a4:	bf00      	nop
 800a8a6:	e002      	b.n	800a8ae <USBH_HandleControl+0x2de>
      break;
 800a8a8:	bf00      	nop
 800a8aa:	e000      	b.n	800a8ae <USBH_HandleControl+0x2de>
      break;
 800a8ac:	bf00      	nop
  }

  return status;
 800a8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b088      	sub	sp, #32
 800a8bc:	af04      	add	r7, sp, #16
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a8c6:	79f9      	ldrb	r1, [r7, #7]
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	9303      	str	r3, [sp, #12]
 800a8cc:	2308      	movs	r3, #8
 800a8ce:	9302      	str	r3, [sp, #8]
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	9301      	str	r3, [sp, #4]
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	2300      	movs	r3, #0
 800a8da:	2200      	movs	r2, #0
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f002 fed4 	bl	800d68a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b088      	sub	sp, #32
 800a8f0:	af04      	add	r7, sp, #16
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	80fb      	strh	r3, [r7, #6]
 800a8fe:	4613      	mov	r3, r2
 800a900:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a90c:	2300      	movs	r3, #0
 800a90e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a910:	7979      	ldrb	r1, [r7, #5]
 800a912:	7e3b      	ldrb	r3, [r7, #24]
 800a914:	9303      	str	r3, [sp, #12]
 800a916:	88fb      	ldrh	r3, [r7, #6]
 800a918:	9302      	str	r3, [sp, #8]
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	9301      	str	r3, [sp, #4]
 800a91e:	2301      	movs	r3, #1
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	2300      	movs	r3, #0
 800a924:	2200      	movs	r2, #0
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f002 feaf 	bl	800d68a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b088      	sub	sp, #32
 800a93a:	af04      	add	r7, sp, #16
 800a93c:	60f8      	str	r0, [r7, #12]
 800a93e:	60b9      	str	r1, [r7, #8]
 800a940:	4611      	mov	r1, r2
 800a942:	461a      	mov	r2, r3
 800a944:	460b      	mov	r3, r1
 800a946:	80fb      	strh	r3, [r7, #6]
 800a948:	4613      	mov	r3, r2
 800a94a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a94c:	7979      	ldrb	r1, [r7, #5]
 800a94e:	2300      	movs	r3, #0
 800a950:	9303      	str	r3, [sp, #12]
 800a952:	88fb      	ldrh	r3, [r7, #6]
 800a954:	9302      	str	r3, [sp, #8]
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	9301      	str	r3, [sp, #4]
 800a95a:	2301      	movs	r3, #1
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	2300      	movs	r3, #0
 800a960:	2201      	movs	r2, #1
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f002 fe91 	bl	800d68a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a968:	2300      	movs	r3, #0

}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b088      	sub	sp, #32
 800a976:	af04      	add	r7, sp, #16
 800a978:	60f8      	str	r0, [r7, #12]
 800a97a:	60b9      	str	r1, [r7, #8]
 800a97c:	4611      	mov	r1, r2
 800a97e:	461a      	mov	r2, r3
 800a980:	460b      	mov	r3, r1
 800a982:	80fb      	strh	r3, [r7, #6]
 800a984:	4613      	mov	r3, r2
 800a986:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a992:	2300      	movs	r3, #0
 800a994:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a996:	7979      	ldrb	r1, [r7, #5]
 800a998:	7e3b      	ldrb	r3, [r7, #24]
 800a99a:	9303      	str	r3, [sp, #12]
 800a99c:	88fb      	ldrh	r3, [r7, #6]
 800a99e:	9302      	str	r3, [sp, #8]
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	9301      	str	r3, [sp, #4]
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f002 fe6c 	bl	800d68a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b088      	sub	sp, #32
 800a9c0:	af04      	add	r7, sp, #16
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	80fb      	strh	r3, [r7, #6]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a9d2:	7979      	ldrb	r1, [r7, #5]
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	9303      	str	r3, [sp, #12]
 800a9d8:	88fb      	ldrh	r3, [r7, #6]
 800a9da:	9302      	str	r3, [sp, #8]
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	9301      	str	r3, [sp, #4]
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f002 fe4e 	bl	800d68a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b086      	sub	sp, #24
 800a9fc:	af04      	add	r7, sp, #16
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	4608      	mov	r0, r1
 800aa02:	4611      	mov	r1, r2
 800aa04:	461a      	mov	r2, r3
 800aa06:	4603      	mov	r3, r0
 800aa08:	70fb      	strb	r3, [r7, #3]
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	70bb      	strb	r3, [r7, #2]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aa12:	7878      	ldrb	r0, [r7, #1]
 800aa14:	78ba      	ldrb	r2, [r7, #2]
 800aa16:	78f9      	ldrb	r1, [r7, #3]
 800aa18:	8b3b      	ldrh	r3, [r7, #24]
 800aa1a:	9302      	str	r3, [sp, #8]
 800aa1c:	7d3b      	ldrb	r3, [r7, #20]
 800aa1e:	9301      	str	r3, [sp, #4]
 800aa20:	7c3b      	ldrb	r3, [r7, #16]
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	4603      	mov	r3, r0
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f002 fde1 	bl	800d5ee <USBH_LL_OpenPipe>

  return USBH_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b082      	sub	sp, #8
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	460b      	mov	r3, r1
 800aa40:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800aa42:	78fb      	ldrb	r3, [r7, #3]
 800aa44:	4619      	mov	r1, r3
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f002 fe00 	bl	800d64c <USBH_LL_ClosePipe>

  return USBH_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b084      	sub	sp, #16
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
 800aa5e:	460b      	mov	r3, r1
 800aa60:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 f836 	bl	800aad4 <USBH_GetFreePipe>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800aa6c:	89fb      	ldrh	r3, [r7, #14]
 800aa6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d00a      	beq.n	800aa8c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800aa76:	78fa      	ldrb	r2, [r7, #3]
 800aa78:	89fb      	ldrh	r3, [r7, #14]
 800aa7a:	f003 030f 	and.w	r3, r3, #15
 800aa7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa82:	6879      	ldr	r1, [r7, #4]
 800aa84:	33e0      	adds	r3, #224	; 0xe0
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	440b      	add	r3, r1
 800aa8a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800aa8c:	89fb      	ldrh	r3, [r7, #14]
 800aa8e:	b2db      	uxtb	r3, r3
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800aaa4:	78fb      	ldrb	r3, [r7, #3]
 800aaa6:	2b0a      	cmp	r3, #10
 800aaa8:	d80d      	bhi.n	800aac6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800aaaa:	78fb      	ldrb	r3, [r7, #3]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	33e0      	adds	r3, #224	; 0xe0
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	685a      	ldr	r2, [r3, #4]
 800aab6:	78fb      	ldrb	r3, [r7, #3]
 800aab8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800aabc:	6879      	ldr	r1, [r7, #4]
 800aabe:	33e0      	adds	r3, #224	; 0xe0
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	440b      	add	r3, r1
 800aac4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800aadc:	2300      	movs	r3, #0
 800aade:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800aae0:	2300      	movs	r3, #0
 800aae2:	73fb      	strb	r3, [r7, #15]
 800aae4:	e00f      	b.n	800ab06 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800aae6:	7bfb      	ldrb	r3, [r7, #15]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	33e0      	adds	r3, #224	; 0xe0
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4413      	add	r3, r2
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d102      	bne.n	800ab00 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800aafa:	7bfb      	ldrb	r3, [r7, #15]
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	e007      	b.n	800ab10 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
 800ab02:	3301      	adds	r3, #1
 800ab04:	73fb      	strb	r3, [r7, #15]
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
 800ab08:	2b0a      	cmp	r3, #10
 800ab0a:	d9ec      	bls.n	800aae6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ab0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3714      	adds	r7, #20
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	4603      	mov	r3, r0
 800ab24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ab26:	79fb      	ldrb	r3, [r7, #7]
 800ab28:	4a08      	ldr	r2, [pc, #32]	; (800ab4c <disk_status+0x30>)
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4413      	add	r3, r2
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	79fa      	ldrb	r2, [r7, #7]
 800ab34:	4905      	ldr	r1, [pc, #20]	; (800ab4c <disk_status+0x30>)
 800ab36:	440a      	add	r2, r1
 800ab38:	7a12      	ldrb	r2, [r2, #8]
 800ab3a:	4610      	mov	r0, r2
 800ab3c:	4798      	blx	r3
 800ab3e:	4603      	mov	r3, r0
 800ab40:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	20001374 	.word	0x20001374

0800ab50 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ab5e:	79fb      	ldrb	r3, [r7, #7]
 800ab60:	4a0d      	ldr	r2, [pc, #52]	; (800ab98 <disk_initialize+0x48>)
 800ab62:	5cd3      	ldrb	r3, [r2, r3]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d111      	bne.n	800ab8c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ab68:	79fb      	ldrb	r3, [r7, #7]
 800ab6a:	4a0b      	ldr	r2, [pc, #44]	; (800ab98 <disk_initialize+0x48>)
 800ab6c:	2101      	movs	r1, #1
 800ab6e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ab70:	79fb      	ldrb	r3, [r7, #7]
 800ab72:	4a09      	ldr	r2, [pc, #36]	; (800ab98 <disk_initialize+0x48>)
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	4413      	add	r3, r2
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	79fa      	ldrb	r2, [r7, #7]
 800ab7e:	4906      	ldr	r1, [pc, #24]	; (800ab98 <disk_initialize+0x48>)
 800ab80:	440a      	add	r2, r1
 800ab82:	7a12      	ldrb	r2, [r2, #8]
 800ab84:	4610      	mov	r0, r2
 800ab86:	4798      	blx	r3
 800ab88:	4603      	mov	r3, r0
 800ab8a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20001374 	.word	0x20001374

0800ab9c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ab9c:	b590      	push	{r4, r7, lr}
 800ab9e:	b087      	sub	sp, #28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60b9      	str	r1, [r7, #8]
 800aba4:	607a      	str	r2, [r7, #4]
 800aba6:	603b      	str	r3, [r7, #0]
 800aba8:	4603      	mov	r3, r0
 800abaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800abac:	7bfb      	ldrb	r3, [r7, #15]
 800abae:	4a0a      	ldr	r2, [pc, #40]	; (800abd8 <disk_read+0x3c>)
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	4413      	add	r3, r2
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	689c      	ldr	r4, [r3, #8]
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
 800abba:	4a07      	ldr	r2, [pc, #28]	; (800abd8 <disk_read+0x3c>)
 800abbc:	4413      	add	r3, r2
 800abbe:	7a18      	ldrb	r0, [r3, #8]
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	68b9      	ldr	r1, [r7, #8]
 800abc6:	47a0      	blx	r4
 800abc8:	4603      	mov	r3, r0
 800abca:	75fb      	strb	r3, [r7, #23]
  return res;
 800abcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	371c      	adds	r7, #28
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd90      	pop	{r4, r7, pc}
 800abd6:	bf00      	nop
 800abd8:	20001374 	.word	0x20001374

0800abdc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800abdc:	b590      	push	{r4, r7, lr}
 800abde:	b087      	sub	sp, #28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60b9      	str	r1, [r7, #8]
 800abe4:	607a      	str	r2, [r7, #4]
 800abe6:	603b      	str	r3, [r7, #0]
 800abe8:	4603      	mov	r3, r0
 800abea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800abec:	7bfb      	ldrb	r3, [r7, #15]
 800abee:	4a0a      	ldr	r2, [pc, #40]	; (800ac18 <disk_write+0x3c>)
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	68dc      	ldr	r4, [r3, #12]
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
 800abfa:	4a07      	ldr	r2, [pc, #28]	; (800ac18 <disk_write+0x3c>)
 800abfc:	4413      	add	r3, r2
 800abfe:	7a18      	ldrb	r0, [r3, #8]
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	68b9      	ldr	r1, [r7, #8]
 800ac06:	47a0      	blx	r4
 800ac08:	4603      	mov	r3, r0
 800ac0a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ac0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	371c      	adds	r7, #28
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd90      	pop	{r4, r7, pc}
 800ac16:	bf00      	nop
 800ac18:	20001374 	.word	0x20001374

0800ac1c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	4603      	mov	r3, r0
 800ac24:	603a      	str	r2, [r7, #0]
 800ac26:	71fb      	strb	r3, [r7, #7]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ac2c:	79fb      	ldrb	r3, [r7, #7]
 800ac2e:	4a09      	ldr	r2, [pc, #36]	; (800ac54 <disk_ioctl+0x38>)
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	79fa      	ldrb	r2, [r7, #7]
 800ac3a:	4906      	ldr	r1, [pc, #24]	; (800ac54 <disk_ioctl+0x38>)
 800ac3c:	440a      	add	r2, r1
 800ac3e:	7a10      	ldrb	r0, [r2, #8]
 800ac40:	79b9      	ldrb	r1, [r7, #6]
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	4798      	blx	r3
 800ac46:	4603      	mov	r3, r0
 800ac48:	73fb      	strb	r3, [r7, #15]
  return res;
 800ac4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	20001374 	.word	0x20001374

0800ac58 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	3301      	adds	r3, #1
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ac68:	89fb      	ldrh	r3, [r7, #14]
 800ac6a:	021b      	lsls	r3, r3, #8
 800ac6c:	b21a      	sxth	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	b21b      	sxth	r3, r3
 800ac74:	4313      	orrs	r3, r2
 800ac76:	b21b      	sxth	r3, r3
 800ac78:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ac7a:	89fb      	ldrh	r3, [r7, #14]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	3303      	adds	r3, #3
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	021b      	lsls	r3, r3, #8
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	3202      	adds	r2, #2
 800aca0:	7812      	ldrb	r2, [r2, #0]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	021b      	lsls	r3, r3, #8
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	3201      	adds	r2, #1
 800acae:	7812      	ldrb	r2, [r2, #0]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	021b      	lsls	r3, r3, #8
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	7812      	ldrb	r2, [r2, #0]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	60fb      	str	r3, [r7, #12]
	return rv;
 800acc0:	68fb      	ldr	r3, [r7, #12]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3714      	adds	r7, #20
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800acce:	b480      	push	{r7}
 800acd0:	b083      	sub	sp, #12
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
 800acd6:	460b      	mov	r3, r1
 800acd8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	1c5a      	adds	r2, r3, #1
 800acde:	607a      	str	r2, [r7, #4]
 800ace0:	887a      	ldrh	r2, [r7, #2]
 800ace2:	b2d2      	uxtb	r2, r2
 800ace4:	701a      	strb	r2, [r3, #0]
 800ace6:	887b      	ldrh	r3, [r7, #2]
 800ace8:	0a1b      	lsrs	r3, r3, #8
 800acea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	1c5a      	adds	r2, r3, #1
 800acf0:	607a      	str	r2, [r7, #4]
 800acf2:	887a      	ldrh	r2, [r7, #2]
 800acf4:	b2d2      	uxtb	r2, r2
 800acf6:	701a      	strb	r2, [r3, #0]
}
 800acf8:	bf00      	nop
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	1c5a      	adds	r2, r3, #1
 800ad12:	607a      	str	r2, [r7, #4]
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	b2d2      	uxtb	r2, r2
 800ad18:	701a      	strb	r2, [r3, #0]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	0a1b      	lsrs	r3, r3, #8
 800ad1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	1c5a      	adds	r2, r3, #1
 800ad24:	607a      	str	r2, [r7, #4]
 800ad26:	683a      	ldr	r2, [r7, #0]
 800ad28:	b2d2      	uxtb	r2, r2
 800ad2a:	701a      	strb	r2, [r3, #0]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	0a1b      	lsrs	r3, r3, #8
 800ad30:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	1c5a      	adds	r2, r3, #1
 800ad36:	607a      	str	r2, [r7, #4]
 800ad38:	683a      	ldr	r2, [r7, #0]
 800ad3a:	b2d2      	uxtb	r2, r2
 800ad3c:	701a      	strb	r2, [r3, #0]
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	0a1b      	lsrs	r3, r3, #8
 800ad42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	1c5a      	adds	r2, r3, #1
 800ad48:	607a      	str	r2, [r7, #4]
 800ad4a:	683a      	ldr	r2, [r7, #0]
 800ad4c:	b2d2      	uxtb	r2, r2
 800ad4e:	701a      	strb	r2, [r3, #0]
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00d      	beq.n	800ad92 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ad76:	693a      	ldr	r2, [r7, #16]
 800ad78:	1c53      	adds	r3, r2, #1
 800ad7a:	613b      	str	r3, [r7, #16]
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	1c59      	adds	r1, r3, #1
 800ad80:	6179      	str	r1, [r7, #20]
 800ad82:	7812      	ldrb	r2, [r2, #0]
 800ad84:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	607b      	str	r3, [r7, #4]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1f1      	bne.n	800ad76 <mem_cpy+0x1a>
	}
}
 800ad92:	bf00      	nop
 800ad94:	371c      	adds	r7, #28
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ad9e:	b480      	push	{r7}
 800ada0:	b087      	sub	sp, #28
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	60f8      	str	r0, [r7, #12]
 800ada6:	60b9      	str	r1, [r7, #8]
 800ada8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	1c5a      	adds	r2, r3, #1
 800adb2:	617a      	str	r2, [r7, #20]
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	b2d2      	uxtb	r2, r2
 800adb8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3b01      	subs	r3, #1
 800adbe:	607b      	str	r3, [r7, #4]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1f3      	bne.n	800adae <mem_set+0x10>
}
 800adc6:	bf00      	nop
 800adc8:	bf00      	nop
 800adca:	371c      	adds	r7, #28
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800add4:	b480      	push	{r7}
 800add6:	b089      	sub	sp, #36	; 0x24
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	61fb      	str	r3, [r7, #28]
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ade8:	2300      	movs	r3, #0
 800adea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	1c5a      	adds	r2, r3, #1
 800adf0:	61fa      	str	r2, [r7, #28]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	4619      	mov	r1, r3
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	1c5a      	adds	r2, r3, #1
 800adfa:	61ba      	str	r2, [r7, #24]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	1acb      	subs	r3, r1, r3
 800ae00:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	3b01      	subs	r3, #1
 800ae06:	607b      	str	r3, [r7, #4]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d002      	beq.n	800ae14 <mem_cmp+0x40>
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d0eb      	beq.n	800adec <mem_cmp+0x18>

	return r;
 800ae14:	697b      	ldr	r3, [r7, #20]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3724      	adds	r7, #36	; 0x24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ae22:	b480      	push	{r7}
 800ae24:	b083      	sub	sp, #12
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
 800ae2a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ae2c:	e002      	b.n	800ae34 <chk_chr+0x12>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	3301      	adds	r3, #1
 800ae32:	607b      	str	r3, [r7, #4]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d005      	beq.n	800ae48 <chk_chr+0x26>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	461a      	mov	r2, r3
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d1f2      	bne.n	800ae2e <chk_chr+0xc>
	return *str;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ae62:	2300      	movs	r3, #0
 800ae64:	60bb      	str	r3, [r7, #8]
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	60fb      	str	r3, [r7, #12]
 800ae6a:	e029      	b.n	800aec0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ae6c:	4a27      	ldr	r2, [pc, #156]	; (800af0c <chk_lock+0xb4>)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	011b      	lsls	r3, r3, #4
 800ae72:	4413      	add	r3, r2
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d01d      	beq.n	800aeb6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ae7a:	4a24      	ldr	r2, [pc, #144]	; (800af0c <chk_lock+0xb4>)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	011b      	lsls	r3, r3, #4
 800ae80:	4413      	add	r3, r2
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d116      	bne.n	800aeba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ae8c:	4a1f      	ldr	r2, [pc, #124]	; (800af0c <chk_lock+0xb4>)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	011b      	lsls	r3, r3, #4
 800ae92:	4413      	add	r3, r2
 800ae94:	3304      	adds	r3, #4
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d10c      	bne.n	800aeba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aea0:	4a1a      	ldr	r2, [pc, #104]	; (800af0c <chk_lock+0xb4>)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	011b      	lsls	r3, r3, #4
 800aea6:	4413      	add	r3, r2
 800aea8:	3308      	adds	r3, #8
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d102      	bne.n	800aeba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aeb4:	e007      	b.n	800aec6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	3301      	adds	r3, #1
 800aebe:	60fb      	str	r3, [r7, #12]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d9d2      	bls.n	800ae6c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	d109      	bne.n	800aee0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d102      	bne.n	800aed8 <chk_lock+0x80>
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	d101      	bne.n	800aedc <chk_lock+0x84>
 800aed8:	2300      	movs	r3, #0
 800aeda:	e010      	b.n	800aefe <chk_lock+0xa6>
 800aedc:	2312      	movs	r3, #18
 800aede:	e00e      	b.n	800aefe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d108      	bne.n	800aef8 <chk_lock+0xa0>
 800aee6:	4a09      	ldr	r2, [pc, #36]	; (800af0c <chk_lock+0xb4>)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	011b      	lsls	r3, r3, #4
 800aeec:	4413      	add	r3, r2
 800aeee:	330c      	adds	r3, #12
 800aef0:	881b      	ldrh	r3, [r3, #0]
 800aef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aef6:	d101      	bne.n	800aefc <chk_lock+0xa4>
 800aef8:	2310      	movs	r3, #16
 800aefa:	e000      	b.n	800aefe <chk_lock+0xa6>
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	20001354 	.word	0x20001354

0800af10 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af16:	2300      	movs	r3, #0
 800af18:	607b      	str	r3, [r7, #4]
 800af1a:	e002      	b.n	800af22 <enq_lock+0x12>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	3301      	adds	r3, #1
 800af20:	607b      	str	r3, [r7, #4]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d806      	bhi.n	800af36 <enq_lock+0x26>
 800af28:	4a09      	ldr	r2, [pc, #36]	; (800af50 <enq_lock+0x40>)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	011b      	lsls	r3, r3, #4
 800af2e:	4413      	add	r3, r2
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1f2      	bne.n	800af1c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b02      	cmp	r3, #2
 800af3a:	bf14      	ite	ne
 800af3c:	2301      	movne	r3, #1
 800af3e:	2300      	moveq	r3, #0
 800af40:	b2db      	uxtb	r3, r3
}
 800af42:	4618      	mov	r0, r3
 800af44:	370c      	adds	r7, #12
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	20001354 	.word	0x20001354

0800af54 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af5e:	2300      	movs	r3, #0
 800af60:	60fb      	str	r3, [r7, #12]
 800af62:	e01f      	b.n	800afa4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800af64:	4a41      	ldr	r2, [pc, #260]	; (800b06c <inc_lock+0x118>)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	011b      	lsls	r3, r3, #4
 800af6a:	4413      	add	r3, r2
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	429a      	cmp	r2, r3
 800af74:	d113      	bne.n	800af9e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800af76:	4a3d      	ldr	r2, [pc, #244]	; (800b06c <inc_lock+0x118>)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	011b      	lsls	r3, r3, #4
 800af7c:	4413      	add	r3, r2
 800af7e:	3304      	adds	r3, #4
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800af86:	429a      	cmp	r2, r3
 800af88:	d109      	bne.n	800af9e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800af8a:	4a38      	ldr	r2, [pc, #224]	; (800b06c <inc_lock+0x118>)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	011b      	lsls	r3, r3, #4
 800af90:	4413      	add	r3, r2
 800af92:	3308      	adds	r3, #8
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d006      	beq.n	800afac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	3301      	adds	r3, #1
 800afa2:	60fb      	str	r3, [r7, #12]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d9dc      	bls.n	800af64 <inc_lock+0x10>
 800afaa:	e000      	b.n	800afae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800afac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	d132      	bne.n	800b01a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800afb4:	2300      	movs	r3, #0
 800afb6:	60fb      	str	r3, [r7, #12]
 800afb8:	e002      	b.n	800afc0 <inc_lock+0x6c>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3301      	adds	r3, #1
 800afbe:	60fb      	str	r3, [r7, #12]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d806      	bhi.n	800afd4 <inc_lock+0x80>
 800afc6:	4a29      	ldr	r2, [pc, #164]	; (800b06c <inc_lock+0x118>)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	011b      	lsls	r3, r3, #4
 800afcc:	4413      	add	r3, r2
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d1f2      	bne.n	800afba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d101      	bne.n	800afde <inc_lock+0x8a>
 800afda:	2300      	movs	r3, #0
 800afdc:	e040      	b.n	800b060 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	4922      	ldr	r1, [pc, #136]	; (800b06c <inc_lock+0x118>)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	011b      	lsls	r3, r3, #4
 800afe8:	440b      	add	r3, r1
 800afea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	689a      	ldr	r2, [r3, #8]
 800aff0:	491e      	ldr	r1, [pc, #120]	; (800b06c <inc_lock+0x118>)
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	011b      	lsls	r3, r3, #4
 800aff6:	440b      	add	r3, r1
 800aff8:	3304      	adds	r3, #4
 800affa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	695a      	ldr	r2, [r3, #20]
 800b000:	491a      	ldr	r1, [pc, #104]	; (800b06c <inc_lock+0x118>)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	011b      	lsls	r3, r3, #4
 800b006:	440b      	add	r3, r1
 800b008:	3308      	adds	r3, #8
 800b00a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b00c:	4a17      	ldr	r2, [pc, #92]	; (800b06c <inc_lock+0x118>)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	011b      	lsls	r3, r3, #4
 800b012:	4413      	add	r3, r2
 800b014:	330c      	adds	r3, #12
 800b016:	2200      	movs	r2, #0
 800b018:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d009      	beq.n	800b034 <inc_lock+0xe0>
 800b020:	4a12      	ldr	r2, [pc, #72]	; (800b06c <inc_lock+0x118>)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	011b      	lsls	r3, r3, #4
 800b026:	4413      	add	r3, r2
 800b028:	330c      	adds	r3, #12
 800b02a:	881b      	ldrh	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d001      	beq.n	800b034 <inc_lock+0xe0>
 800b030:	2300      	movs	r3, #0
 800b032:	e015      	b.n	800b060 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d108      	bne.n	800b04c <inc_lock+0xf8>
 800b03a:	4a0c      	ldr	r2, [pc, #48]	; (800b06c <inc_lock+0x118>)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	011b      	lsls	r3, r3, #4
 800b040:	4413      	add	r3, r2
 800b042:	330c      	adds	r3, #12
 800b044:	881b      	ldrh	r3, [r3, #0]
 800b046:	3301      	adds	r3, #1
 800b048:	b29a      	uxth	r2, r3
 800b04a:	e001      	b.n	800b050 <inc_lock+0xfc>
 800b04c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b050:	4906      	ldr	r1, [pc, #24]	; (800b06c <inc_lock+0x118>)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	011b      	lsls	r3, r3, #4
 800b056:	440b      	add	r3, r1
 800b058:	330c      	adds	r3, #12
 800b05a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	3301      	adds	r3, #1
}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr
 800b06c:	20001354 	.word	0x20001354

0800b070 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	3b01      	subs	r3, #1
 800b07c:	607b      	str	r3, [r7, #4]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d825      	bhi.n	800b0d0 <dec_lock+0x60>
		n = Files[i].ctr;
 800b084:	4a17      	ldr	r2, [pc, #92]	; (800b0e4 <dec_lock+0x74>)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	011b      	lsls	r3, r3, #4
 800b08a:	4413      	add	r3, r2
 800b08c:	330c      	adds	r3, #12
 800b08e:	881b      	ldrh	r3, [r3, #0]
 800b090:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b092:	89fb      	ldrh	r3, [r7, #14]
 800b094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b098:	d101      	bne.n	800b09e <dec_lock+0x2e>
 800b09a:	2300      	movs	r3, #0
 800b09c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b09e:	89fb      	ldrh	r3, [r7, #14]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d002      	beq.n	800b0aa <dec_lock+0x3a>
 800b0a4:	89fb      	ldrh	r3, [r7, #14]
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b0aa:	4a0e      	ldr	r2, [pc, #56]	; (800b0e4 <dec_lock+0x74>)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	011b      	lsls	r3, r3, #4
 800b0b0:	4413      	add	r3, r2
 800b0b2:	330c      	adds	r3, #12
 800b0b4:	89fa      	ldrh	r2, [r7, #14]
 800b0b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b0b8:	89fb      	ldrh	r3, [r7, #14]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d105      	bne.n	800b0ca <dec_lock+0x5a>
 800b0be:	4a09      	ldr	r2, [pc, #36]	; (800b0e4 <dec_lock+0x74>)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	011b      	lsls	r3, r3, #4
 800b0c4:	4413      	add	r3, r2
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	737b      	strb	r3, [r7, #13]
 800b0ce:	e001      	b.n	800b0d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b0d0:	2302      	movs	r3, #2
 800b0d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b0d4:	7b7b      	ldrb	r3, [r7, #13]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	20001354 	.word	0x20001354

0800b0e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	60fb      	str	r3, [r7, #12]
 800b0f4:	e010      	b.n	800b118 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b0f6:	4a0d      	ldr	r2, [pc, #52]	; (800b12c <clear_lock+0x44>)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	011b      	lsls	r3, r3, #4
 800b0fc:	4413      	add	r3, r2
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	429a      	cmp	r2, r3
 800b104:	d105      	bne.n	800b112 <clear_lock+0x2a>
 800b106:	4a09      	ldr	r2, [pc, #36]	; (800b12c <clear_lock+0x44>)
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	011b      	lsls	r3, r3, #4
 800b10c:	4413      	add	r3, r2
 800b10e:	2200      	movs	r2, #0
 800b110:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	3301      	adds	r3, #1
 800b116:	60fb      	str	r3, [r7, #12]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d9eb      	bls.n	800b0f6 <clear_lock+0xe>
	}
}
 800b11e:	bf00      	nop
 800b120:	bf00      	nop
 800b122:	3714      	adds	r7, #20
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr
 800b12c:	20001354 	.word	0x20001354

0800b130 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b138:	2300      	movs	r3, #0
 800b13a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	78db      	ldrb	r3, [r3, #3]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d034      	beq.n	800b1ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b148:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	7858      	ldrb	r0, [r3, #1]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b154:	2301      	movs	r3, #1
 800b156:	697a      	ldr	r2, [r7, #20]
 800b158:	f7ff fd40 	bl	800abdc <disk_write>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d002      	beq.n	800b168 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b162:	2301      	movs	r3, #1
 800b164:	73fb      	strb	r3, [r7, #15]
 800b166:	e022      	b.n	800b1ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a1b      	ldr	r3, [r3, #32]
 800b172:	697a      	ldr	r2, [r7, #20]
 800b174:	1ad2      	subs	r2, r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	699b      	ldr	r3, [r3, #24]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d217      	bcs.n	800b1ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	789b      	ldrb	r3, [r3, #2]
 800b182:	613b      	str	r3, [r7, #16]
 800b184:	e010      	b.n	800b1a8 <sync_window+0x78>
					wsect += fs->fsize;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	699b      	ldr	r3, [r3, #24]
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	4413      	add	r3, r2
 800b18e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	7858      	ldrb	r0, [r3, #1]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b19a:	2301      	movs	r3, #1
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	f7ff fd1d 	bl	800abdc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	613b      	str	r3, [r7, #16]
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d8eb      	bhi.n	800b186 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3718      	adds	r7, #24
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ca:	683a      	ldr	r2, [r7, #0]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d01b      	beq.n	800b208 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7ff ffad 	bl	800b130 <sync_window>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d113      	bne.n	800b208 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	7858      	ldrb	r0, [r3, #1]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	683a      	ldr	r2, [r7, #0]
 800b1ee:	f7ff fcd5 	bl	800ab9c <disk_read>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d004      	beq.n	800b202 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	683a      	ldr	r2, [r7, #0]
 800b206:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b208:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
	...

0800b214 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7ff ff87 	bl	800b130 <sync_window>
 800b222:	4603      	mov	r3, r0
 800b224:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b226:	7bfb      	ldrb	r3, [r7, #15]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d158      	bne.n	800b2de <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	2b03      	cmp	r3, #3
 800b232:	d148      	bne.n	800b2c6 <sync_fs+0xb2>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	791b      	ldrb	r3, [r3, #4]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d144      	bne.n	800b2c6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	3330      	adds	r3, #48	; 0x30
 800b240:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b244:	2100      	movs	r1, #0
 800b246:	4618      	mov	r0, r3
 800b248:	f7ff fda9 	bl	800ad9e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	3330      	adds	r3, #48	; 0x30
 800b250:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b254:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b258:	4618      	mov	r0, r3
 800b25a:	f7ff fd38 	bl	800acce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	3330      	adds	r3, #48	; 0x30
 800b262:	4921      	ldr	r1, [pc, #132]	; (800b2e8 <sync_fs+0xd4>)
 800b264:	4618      	mov	r0, r3
 800b266:	f7ff fd4d 	bl	800ad04 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	3330      	adds	r3, #48	; 0x30
 800b26e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b272:	491e      	ldr	r1, [pc, #120]	; (800b2ec <sync_fs+0xd8>)
 800b274:	4618      	mov	r0, r3
 800b276:	f7ff fd45 	bl	800ad04 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	3330      	adds	r3, #48	; 0x30
 800b27e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	4619      	mov	r1, r3
 800b288:	4610      	mov	r0, r2
 800b28a:	f7ff fd3b 	bl	800ad04 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	3330      	adds	r3, #48	; 0x30
 800b292:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	4619      	mov	r1, r3
 800b29c:	4610      	mov	r0, r2
 800b29e:	f7ff fd31 	bl	800ad04 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	1c5a      	adds	r2, r3, #1
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	7858      	ldrb	r0, [r3, #1]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	f7ff fc8e 	bl	800abdc <disk_write>
			fs->fsi_flag = 0;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	785b      	ldrb	r3, [r3, #1]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7ff fca4 	bl	800ac1c <disk_ioctl>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <sync_fs+0xca>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	41615252 	.word	0x41615252
 800b2ec:	61417272 	.word	0x61417272

0800b2f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	3b02      	subs	r3, #2
 800b2fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	3b02      	subs	r3, #2
 800b306:	683a      	ldr	r2, [r7, #0]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d301      	bcc.n	800b310 <clust2sect+0x20>
 800b30c:	2300      	movs	r3, #0
 800b30e:	e008      	b.n	800b322 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	895b      	ldrh	r3, [r3, #10]
 800b314:	461a      	mov	r2, r3
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	fb03 f202 	mul.w	r2, r3, r2
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b320:	4413      	add	r3, r2
}
 800b322:	4618      	mov	r0, r3
 800b324:	370c      	adds	r7, #12
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b086      	sub	sp, #24
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
 800b336:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d904      	bls.n	800b34e <get_fat+0x20>
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	695b      	ldr	r3, [r3, #20]
 800b348:	683a      	ldr	r2, [r7, #0]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d302      	bcc.n	800b354 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b34e:	2301      	movs	r3, #1
 800b350:	617b      	str	r3, [r7, #20]
 800b352:	e08f      	b.n	800b474 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b354:	f04f 33ff 	mov.w	r3, #4294967295
 800b358:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	2b03      	cmp	r3, #3
 800b360:	d062      	beq.n	800b428 <get_fat+0xfa>
 800b362:	2b03      	cmp	r3, #3
 800b364:	dc7c      	bgt.n	800b460 <get_fat+0x132>
 800b366:	2b01      	cmp	r3, #1
 800b368:	d002      	beq.n	800b370 <get_fat+0x42>
 800b36a:	2b02      	cmp	r3, #2
 800b36c:	d042      	beq.n	800b3f4 <get_fat+0xc6>
 800b36e:	e077      	b.n	800b460 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	60fb      	str	r3, [r7, #12]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	085b      	lsrs	r3, r3, #1
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	4413      	add	r3, r2
 800b37c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	6a1a      	ldr	r2, [r3, #32]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	0a5b      	lsrs	r3, r3, #9
 800b386:	4413      	add	r3, r2
 800b388:	4619      	mov	r1, r3
 800b38a:	6938      	ldr	r0, [r7, #16]
 800b38c:	f7ff ff14 	bl	800b1b8 <move_window>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d167      	bne.n	800b466 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	1c5a      	adds	r2, r3, #1
 800b39a:	60fa      	str	r2, [r7, #12]
 800b39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3a0:	693a      	ldr	r2, [r7, #16]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	6a1a      	ldr	r2, [r3, #32]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	0a5b      	lsrs	r3, r3, #9
 800b3b2:	4413      	add	r3, r2
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6938      	ldr	r0, [r7, #16]
 800b3b8:	f7ff fefe 	bl	800b1b8 <move_window>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d153      	bne.n	800b46a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3c8:	693a      	ldr	r2, [r7, #16]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3d0:	021b      	lsls	r3, r3, #8
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	f003 0301 	and.w	r3, r3, #1
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d002      	beq.n	800b3ea <get_fat+0xbc>
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	091b      	lsrs	r3, r3, #4
 800b3e8:	e002      	b.n	800b3f0 <get_fat+0xc2>
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3f0:	617b      	str	r3, [r7, #20]
			break;
 800b3f2:	e03f      	b.n	800b474 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	6a1a      	ldr	r2, [r3, #32]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	0a1b      	lsrs	r3, r3, #8
 800b3fc:	4413      	add	r3, r2
 800b3fe:	4619      	mov	r1, r3
 800b400:	6938      	ldr	r0, [r7, #16]
 800b402:	f7ff fed9 	bl	800b1b8 <move_window>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d130      	bne.n	800b46e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	005b      	lsls	r3, r3, #1
 800b416:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b41a:	4413      	add	r3, r2
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7ff fc1b 	bl	800ac58 <ld_word>
 800b422:	4603      	mov	r3, r0
 800b424:	617b      	str	r3, [r7, #20]
			break;
 800b426:	e025      	b.n	800b474 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	6a1a      	ldr	r2, [r3, #32]
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	09db      	lsrs	r3, r3, #7
 800b430:	4413      	add	r3, r2
 800b432:	4619      	mov	r1, r3
 800b434:	6938      	ldr	r0, [r7, #16]
 800b436:	f7ff febf 	bl	800b1b8 <move_window>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d118      	bne.n	800b472 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b44e:	4413      	add	r3, r2
 800b450:	4618      	mov	r0, r3
 800b452:	f7ff fc19 	bl	800ac88 <ld_dword>
 800b456:	4603      	mov	r3, r0
 800b458:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b45c:	617b      	str	r3, [r7, #20]
			break;
 800b45e:	e009      	b.n	800b474 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b460:	2301      	movs	r3, #1
 800b462:	617b      	str	r3, [r7, #20]
 800b464:	e006      	b.n	800b474 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b466:	bf00      	nop
 800b468:	e004      	b.n	800b474 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b46a:	bf00      	nop
 800b46c:	e002      	b.n	800b474 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b46e:	bf00      	nop
 800b470:	e000      	b.n	800b474 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b472:	bf00      	nop
		}
	}

	return val;
 800b474:	697b      	ldr	r3, [r7, #20]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3718      	adds	r7, #24
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b47e:	b590      	push	{r4, r7, lr}
 800b480:	b089      	sub	sp, #36	; 0x24
 800b482:	af00      	add	r7, sp, #0
 800b484:	60f8      	str	r0, [r7, #12]
 800b486:	60b9      	str	r1, [r7, #8]
 800b488:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b48a:	2302      	movs	r3, #2
 800b48c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	2b01      	cmp	r3, #1
 800b492:	f240 80d2 	bls.w	800b63a <put_fat+0x1bc>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	695b      	ldr	r3, [r3, #20]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	f080 80cc 	bcs.w	800b63a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	2b03      	cmp	r3, #3
 800b4a8:	f000 8096 	beq.w	800b5d8 <put_fat+0x15a>
 800b4ac:	2b03      	cmp	r3, #3
 800b4ae:	f300 80cd 	bgt.w	800b64c <put_fat+0x1ce>
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d002      	beq.n	800b4bc <put_fat+0x3e>
 800b4b6:	2b02      	cmp	r3, #2
 800b4b8:	d06e      	beq.n	800b598 <put_fat+0x11a>
 800b4ba:	e0c7      	b.n	800b64c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	61bb      	str	r3, [r7, #24]
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	085b      	lsrs	r3, r3, #1
 800b4c4:	69ba      	ldr	r2, [r7, #24]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6a1a      	ldr	r2, [r3, #32]
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	0a5b      	lsrs	r3, r3, #9
 800b4d2:	4413      	add	r3, r2
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f7ff fe6e 	bl	800b1b8 <move_window>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4e0:	7ffb      	ldrb	r3, [r7, #31]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f040 80ab 	bne.w	800b63e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	1c59      	adds	r1, r3, #1
 800b4f2:	61b9      	str	r1, [r7, #24]
 800b4f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4f8:	4413      	add	r3, r2
 800b4fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	f003 0301 	and.w	r3, r3, #1
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00d      	beq.n	800b522 <put_fat+0xa4>
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	b25b      	sxtb	r3, r3
 800b50c:	f003 030f 	and.w	r3, r3, #15
 800b510:	b25a      	sxtb	r2, r3
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	b2db      	uxtb	r3, r3
 800b516:	011b      	lsls	r3, r3, #4
 800b518:	b25b      	sxtb	r3, r3
 800b51a:	4313      	orrs	r3, r2
 800b51c:	b25b      	sxtb	r3, r3
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	e001      	b.n	800b526 <put_fat+0xa8>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	b2db      	uxtb	r3, r3
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2201      	movs	r2, #1
 800b52e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6a1a      	ldr	r2, [r3, #32]
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	0a5b      	lsrs	r3, r3, #9
 800b538:	4413      	add	r3, r2
 800b53a:	4619      	mov	r1, r3
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f7ff fe3b 	bl	800b1b8 <move_window>
 800b542:	4603      	mov	r3, r0
 800b544:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b546:	7ffb      	ldrb	r3, [r7, #31]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d17a      	bne.n	800b642 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b558:	4413      	add	r3, r2
 800b55a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	f003 0301 	and.w	r3, r3, #1
 800b562:	2b00      	cmp	r3, #0
 800b564:	d003      	beq.n	800b56e <put_fat+0xf0>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	091b      	lsrs	r3, r3, #4
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	e00e      	b.n	800b58c <put_fat+0x10e>
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	b25b      	sxtb	r3, r3
 800b574:	f023 030f 	bic.w	r3, r3, #15
 800b578:	b25a      	sxtb	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	0a1b      	lsrs	r3, r3, #8
 800b57e:	b25b      	sxtb	r3, r3
 800b580:	f003 030f 	and.w	r3, r3, #15
 800b584:	b25b      	sxtb	r3, r3
 800b586:	4313      	orrs	r3, r2
 800b588:	b25b      	sxtb	r3, r3
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	697a      	ldr	r2, [r7, #20]
 800b58e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2201      	movs	r2, #1
 800b594:	70da      	strb	r2, [r3, #3]
			break;
 800b596:	e059      	b.n	800b64c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6a1a      	ldr	r2, [r3, #32]
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	0a1b      	lsrs	r3, r3, #8
 800b5a0:	4413      	add	r3, r2
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f7ff fe07 	bl	800b1b8 <move_window>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5ae:	7ffb      	ldrb	r3, [r7, #31]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d148      	bne.n	800b646 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	005b      	lsls	r3, r3, #1
 800b5be:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b5c2:	4413      	add	r3, r2
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	b292      	uxth	r2, r2
 800b5c8:	4611      	mov	r1, r2
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7ff fb7f 	bl	800acce <st_word>
			fs->wflag = 1;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	70da      	strb	r2, [r3, #3]
			break;
 800b5d6:	e039      	b.n	800b64c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6a1a      	ldr	r2, [r3, #32]
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	09db      	lsrs	r3, r3, #7
 800b5e0:	4413      	add	r3, r2
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f7ff fde7 	bl	800b1b8 <move_window>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5ee:	7ffb      	ldrb	r3, [r7, #31]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d12a      	bne.n	800b64a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b608:	4413      	add	r3, r2
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7ff fb3c 	bl	800ac88 <ld_dword>
 800b610:	4603      	mov	r3, r0
 800b612:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b616:	4323      	orrs	r3, r4
 800b618:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b628:	4413      	add	r3, r2
 800b62a:	6879      	ldr	r1, [r7, #4]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7ff fb69 	bl	800ad04 <st_dword>
			fs->wflag = 1;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2201      	movs	r2, #1
 800b636:	70da      	strb	r2, [r3, #3]
			break;
 800b638:	e008      	b.n	800b64c <put_fat+0x1ce>
		}
	}
 800b63a:	bf00      	nop
 800b63c:	e006      	b.n	800b64c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b63e:	bf00      	nop
 800b640:	e004      	b.n	800b64c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b642:	bf00      	nop
 800b644:	e002      	b.n	800b64c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b646:	bf00      	nop
 800b648:	e000      	b.n	800b64c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b64a:	bf00      	nop
	return res;
 800b64c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3724      	adds	r7, #36	; 0x24
 800b652:	46bd      	mov	sp, r7
 800b654:	bd90      	pop	{r4, r7, pc}

0800b656 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b088      	sub	sp, #32
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	60f8      	str	r0, [r7, #12]
 800b65e:	60b9      	str	r1, [r7, #8]
 800b660:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b662:	2300      	movs	r3, #0
 800b664:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d904      	bls.n	800b67c <remove_chain+0x26>
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	695b      	ldr	r3, [r3, #20]
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d301      	bcc.n	800b680 <remove_chain+0x2a>
 800b67c:	2302      	movs	r3, #2
 800b67e:	e04b      	b.n	800b718 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00c      	beq.n	800b6a0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b686:	f04f 32ff 	mov.w	r2, #4294967295
 800b68a:	6879      	ldr	r1, [r7, #4]
 800b68c:	69b8      	ldr	r0, [r7, #24]
 800b68e:	f7ff fef6 	bl	800b47e <put_fat>
 800b692:	4603      	mov	r3, r0
 800b694:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b696:	7ffb      	ldrb	r3, [r7, #31]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <remove_chain+0x4a>
 800b69c:	7ffb      	ldrb	r3, [r7, #31]
 800b69e:	e03b      	b.n	800b718 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b6a0:	68b9      	ldr	r1, [r7, #8]
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f7ff fe43 	bl	800b32e <get_fat>
 800b6a8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d031      	beq.n	800b714 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d101      	bne.n	800b6ba <remove_chain+0x64>
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	e02e      	b.n	800b718 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c0:	d101      	bne.n	800b6c6 <remove_chain+0x70>
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e028      	b.n	800b718 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	68b9      	ldr	r1, [r7, #8]
 800b6ca:	69b8      	ldr	r0, [r7, #24]
 800b6cc:	f7ff fed7 	bl	800b47e <put_fat>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b6d4:	7ffb      	ldrb	r3, [r7, #31]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d001      	beq.n	800b6de <remove_chain+0x88>
 800b6da:	7ffb      	ldrb	r3, [r7, #31]
 800b6dc:	e01c      	b.n	800b718 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	691a      	ldr	r2, [r3, #16]
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	3b02      	subs	r3, #2
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d20b      	bcs.n	800b704 <remove_chain+0xae>
			fs->free_clst++;
 800b6ec:	69bb      	ldr	r3, [r7, #24]
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	1c5a      	adds	r2, r3, #1
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	791b      	ldrb	r3, [r3, #4]
 800b6fa:	f043 0301 	orr.w	r3, r3, #1
 800b6fe:	b2da      	uxtb	r2, r3
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	695b      	ldr	r3, [r3, #20]
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d3c6      	bcc.n	800b6a0 <remove_chain+0x4a>
 800b712:	e000      	b.n	800b716 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b714:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b716:	2300      	movs	r3, #0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3720      	adds	r7, #32
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b088      	sub	sp, #32
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d10d      	bne.n	800b752 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d004      	beq.n	800b74c <create_chain+0x2c>
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	695b      	ldr	r3, [r3, #20]
 800b746:	69ba      	ldr	r2, [r7, #24]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d31b      	bcc.n	800b784 <create_chain+0x64>
 800b74c:	2301      	movs	r3, #1
 800b74e:	61bb      	str	r3, [r7, #24]
 800b750:	e018      	b.n	800b784 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b752:	6839      	ldr	r1, [r7, #0]
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7ff fdea 	bl	800b32e <get_fat>
 800b75a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d801      	bhi.n	800b766 <create_chain+0x46>
 800b762:	2301      	movs	r3, #1
 800b764:	e070      	b.n	800b848 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76c:	d101      	bne.n	800b772 <create_chain+0x52>
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	e06a      	b.n	800b848 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	695b      	ldr	r3, [r3, #20]
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d201      	bcs.n	800b780 <create_chain+0x60>
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	e063      	b.n	800b848 <create_chain+0x128>
		scl = clst;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	3301      	adds	r3, #1
 800b78c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	695b      	ldr	r3, [r3, #20]
 800b792:	69fa      	ldr	r2, [r7, #28]
 800b794:	429a      	cmp	r2, r3
 800b796:	d307      	bcc.n	800b7a8 <create_chain+0x88>
				ncl = 2;
 800b798:	2302      	movs	r3, #2
 800b79a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b79c:	69fa      	ldr	r2, [r7, #28]
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d901      	bls.n	800b7a8 <create_chain+0x88>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	e04f      	b.n	800b848 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b7a8:	69f9      	ldr	r1, [r7, #28]
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f7ff fdbf 	bl	800b32e <get_fat>
 800b7b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00e      	beq.n	800b7d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d003      	beq.n	800b7c6 <create_chain+0xa6>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7c4:	d101      	bne.n	800b7ca <create_chain+0xaa>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	e03e      	b.n	800b848 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b7ca:	69fa      	ldr	r2, [r7, #28]
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d1da      	bne.n	800b788 <create_chain+0x68>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	e038      	b.n	800b848 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b7d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7dc:	69f9      	ldr	r1, [r7, #28]
 800b7de:	6938      	ldr	r0, [r7, #16]
 800b7e0:	f7ff fe4d 	bl	800b47e <put_fat>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b7e8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d109      	bne.n	800b802 <create_chain+0xe2>
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d006      	beq.n	800b802 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b7f4:	69fa      	ldr	r2, [r7, #28]
 800b7f6:	6839      	ldr	r1, [r7, #0]
 800b7f8:	6938      	ldr	r0, [r7, #16]
 800b7fa:	f7ff fe40 	bl	800b47e <put_fat>
 800b7fe:	4603      	mov	r3, r0
 800b800:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b802:	7dfb      	ldrb	r3, [r7, #23]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d116      	bne.n	800b836 <create_chain+0x116>
		fs->last_clst = ncl;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	69fa      	ldr	r2, [r7, #28]
 800b80c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	691a      	ldr	r2, [r3, #16]
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	695b      	ldr	r3, [r3, #20]
 800b816:	3b02      	subs	r3, #2
 800b818:	429a      	cmp	r2, r3
 800b81a:	d804      	bhi.n	800b826 <create_chain+0x106>
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	1e5a      	subs	r2, r3, #1
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	791b      	ldrb	r3, [r3, #4]
 800b82a:	f043 0301 	orr.w	r3, r3, #1
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	711a      	strb	r2, [r3, #4]
 800b834:	e007      	b.n	800b846 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b836:	7dfb      	ldrb	r3, [r7, #23]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d102      	bne.n	800b842 <create_chain+0x122>
 800b83c:	f04f 33ff 	mov.w	r3, #4294967295
 800b840:	e000      	b.n	800b844 <create_chain+0x124>
 800b842:	2301      	movs	r3, #1
 800b844:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b846:	69fb      	ldr	r3, [r7, #28]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3720      	adds	r7, #32
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b850:	b480      	push	{r7}
 800b852:	b087      	sub	sp, #28
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b864:	3304      	adds	r3, #4
 800b866:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	0a5b      	lsrs	r3, r3, #9
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	8952      	ldrh	r2, [r2, #10]
 800b870:	fbb3 f3f2 	udiv	r3, r3, r2
 800b874:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	1d1a      	adds	r2, r3, #4
 800b87a:	613a      	str	r2, [r7, #16]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d101      	bne.n	800b88a <clmt_clust+0x3a>
 800b886:	2300      	movs	r3, #0
 800b888:	e010      	b.n	800b8ac <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b88a:	697a      	ldr	r2, [r7, #20]
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d307      	bcc.n	800b8a2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b892:	697a      	ldr	r2, [r7, #20]
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	1ad3      	subs	r3, r2, r3
 800b898:	617b      	str	r3, [r7, #20]
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	3304      	adds	r3, #4
 800b89e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b8a0:	e7e9      	b.n	800b876 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b8a2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	4413      	add	r3, r2
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	371c      	adds	r7, #28
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b086      	sub	sp, #24
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8ce:	d204      	bcs.n	800b8da <dir_sdi+0x22>
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	f003 031f 	and.w	r3, r3, #31
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d001      	beq.n	800b8de <dir_sdi+0x26>
		return FR_INT_ERR;
 800b8da:	2302      	movs	r3, #2
 800b8dc:	e063      	b.n	800b9a6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	683a      	ldr	r2, [r7, #0]
 800b8e2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d106      	bne.n	800b8fe <dir_sdi+0x46>
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	d902      	bls.n	800b8fe <dir_sdi+0x46>
		clst = fs->dirbase;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10c      	bne.n	800b91e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	095b      	lsrs	r3, r3, #5
 800b908:	693a      	ldr	r2, [r7, #16]
 800b90a:	8912      	ldrh	r2, [r2, #8]
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d301      	bcc.n	800b914 <dir_sdi+0x5c>
 800b910:	2302      	movs	r3, #2
 800b912:	e048      	b.n	800b9a6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	61da      	str	r2, [r3, #28]
 800b91c:	e029      	b.n	800b972 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	895b      	ldrh	r3, [r3, #10]
 800b922:	025b      	lsls	r3, r3, #9
 800b924:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b926:	e019      	b.n	800b95c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6979      	ldr	r1, [r7, #20]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7ff fcfe 	bl	800b32e <get_fat>
 800b932:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b93a:	d101      	bne.n	800b940 <dir_sdi+0x88>
 800b93c:	2301      	movs	r3, #1
 800b93e:	e032      	b.n	800b9a6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	2b01      	cmp	r3, #1
 800b944:	d904      	bls.n	800b950 <dir_sdi+0x98>
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	697a      	ldr	r2, [r7, #20]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d301      	bcc.n	800b954 <dir_sdi+0x9c>
 800b950:	2302      	movs	r3, #2
 800b952:	e028      	b.n	800b9a6 <dir_sdi+0xee>
			ofs -= csz;
 800b954:	683a      	ldr	r2, [r7, #0]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	1ad3      	subs	r3, r2, r3
 800b95a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b95c:	683a      	ldr	r2, [r7, #0]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	429a      	cmp	r2, r3
 800b962:	d2e1      	bcs.n	800b928 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b964:	6979      	ldr	r1, [r7, #20]
 800b966:	6938      	ldr	r0, [r7, #16]
 800b968:	f7ff fcc2 	bl	800b2f0 <clust2sect>
 800b96c:	4602      	mov	r2, r0
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	697a      	ldr	r2, [r7, #20]
 800b976:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	69db      	ldr	r3, [r3, #28]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d101      	bne.n	800b984 <dir_sdi+0xcc>
 800b980:	2302      	movs	r3, #2
 800b982:	e010      	b.n	800b9a6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	69da      	ldr	r2, [r3, #28]
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	0a5b      	lsrs	r3, r3, #9
 800b98c:	441a      	add	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b99e:	441a      	add	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3718      	adds	r7, #24
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b086      	sub	sp, #24
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	695b      	ldr	r3, [r3, #20]
 800b9c2:	3320      	adds	r3, #32
 800b9c4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	69db      	ldr	r3, [r3, #28]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <dir_next+0x28>
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9d4:	d301      	bcc.n	800b9da <dir_next+0x2c>
 800b9d6:	2304      	movs	r3, #4
 800b9d8:	e0aa      	b.n	800bb30 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f040 8098 	bne.w	800bb16 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	69db      	ldr	r3, [r3, #28]
 800b9ea:	1c5a      	adds	r2, r3, #1
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	699b      	ldr	r3, [r3, #24]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d10b      	bne.n	800ba10 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	095b      	lsrs	r3, r3, #5
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	8912      	ldrh	r2, [r2, #8]
 800ba00:	4293      	cmp	r3, r2
 800ba02:	f0c0 8088 	bcc.w	800bb16 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	61da      	str	r2, [r3, #28]
 800ba0c:	2304      	movs	r3, #4
 800ba0e:	e08f      	b.n	800bb30 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	0a5b      	lsrs	r3, r3, #9
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	8952      	ldrh	r2, [r2, #10]
 800ba18:	3a01      	subs	r2, #1
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d17a      	bne.n	800bb16 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	699b      	ldr	r3, [r3, #24]
 800ba26:	4619      	mov	r1, r3
 800ba28:	4610      	mov	r0, r2
 800ba2a:	f7ff fc80 	bl	800b32e <get_fat>
 800ba2e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d801      	bhi.n	800ba3a <dir_next+0x8c>
 800ba36:	2302      	movs	r3, #2
 800ba38:	e07a      	b.n	800bb30 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba40:	d101      	bne.n	800ba46 <dir_next+0x98>
 800ba42:	2301      	movs	r3, #1
 800ba44:	e074      	b.n	800bb30 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d358      	bcc.n	800bb02 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d104      	bne.n	800ba60 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	61da      	str	r2, [r3, #28]
 800ba5c:	2304      	movs	r3, #4
 800ba5e:	e067      	b.n	800bb30 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	699b      	ldr	r3, [r3, #24]
 800ba66:	4619      	mov	r1, r3
 800ba68:	4610      	mov	r0, r2
 800ba6a:	f7ff fe59 	bl	800b720 <create_chain>
 800ba6e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d101      	bne.n	800ba7a <dir_next+0xcc>
 800ba76:	2307      	movs	r3, #7
 800ba78:	e05a      	b.n	800bb30 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d101      	bne.n	800ba84 <dir_next+0xd6>
 800ba80:	2302      	movs	r3, #2
 800ba82:	e055      	b.n	800bb30 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8a:	d101      	bne.n	800ba90 <dir_next+0xe2>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e04f      	b.n	800bb30 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f7ff fb4d 	bl	800b130 <sync_window>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <dir_next+0xf2>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e047      	b.n	800bb30 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	3330      	adds	r3, #48	; 0x30
 800baa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800baa8:	2100      	movs	r1, #0
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff f977 	bl	800ad9e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bab0:	2300      	movs	r3, #0
 800bab2:	613b      	str	r3, [r7, #16]
 800bab4:	6979      	ldr	r1, [r7, #20]
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f7ff fc1a 	bl	800b2f0 <clust2sect>
 800babc:	4602      	mov	r2, r0
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	62da      	str	r2, [r3, #44]	; 0x2c
 800bac2:	e012      	b.n	800baea <dir_next+0x13c>
						fs->wflag = 1;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2201      	movs	r2, #1
 800bac8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f7ff fb30 	bl	800b130 <sync_window>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d001      	beq.n	800bada <dir_next+0x12c>
 800bad6:	2301      	movs	r3, #1
 800bad8:	e02a      	b.n	800bb30 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	3301      	adds	r3, #1
 800bade:	613b      	str	r3, [r7, #16]
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae4:	1c5a      	adds	r2, r3, #1
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	62da      	str	r2, [r3, #44]	; 0x2c
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	895b      	ldrh	r3, [r3, #10]
 800baee:	461a      	mov	r2, r3
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d3e6      	bcc.n	800bac4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	1ad2      	subs	r2, r2, r3
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	697a      	ldr	r2, [r7, #20]
 800bb06:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bb08:	6979      	ldr	r1, [r7, #20]
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f7ff fbf0 	bl	800b2f0 <clust2sect>
 800bb10:	4602      	mov	r2, r0
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb28:	441a      	add	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bb2e:	2300      	movs	r3, #0
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3718      	adds	r7, #24
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bb48:	2100      	movs	r1, #0
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f7ff feb4 	bl	800b8b8 <dir_sdi>
 800bb50:	4603      	mov	r3, r0
 800bb52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb54:	7dfb      	ldrb	r3, [r7, #23]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d12b      	bne.n	800bbb2 <dir_alloc+0x7a>
		n = 0;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	69db      	ldr	r3, [r3, #28]
 800bb62:	4619      	mov	r1, r3
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f7ff fb27 	bl	800b1b8 <move_window>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb6e:	7dfb      	ldrb	r3, [r7, #23]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d11d      	bne.n	800bbb0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6a1b      	ldr	r3, [r3, #32]
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	2be5      	cmp	r3, #229	; 0xe5
 800bb7c:	d004      	beq.n	800bb88 <dir_alloc+0x50>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a1b      	ldr	r3, [r3, #32]
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d107      	bne.n	800bb98 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	613b      	str	r3, [r7, #16]
 800bb8e:	693a      	ldr	r2, [r7, #16]
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d102      	bne.n	800bb9c <dir_alloc+0x64>
 800bb96:	e00c      	b.n	800bbb2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bb98:	2300      	movs	r3, #0
 800bb9a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bb9c:	2101      	movs	r1, #1
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f7ff ff05 	bl	800b9ae <dir_next>
 800bba4:	4603      	mov	r3, r0
 800bba6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bba8:	7dfb      	ldrb	r3, [r7, #23]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d0d7      	beq.n	800bb5e <dir_alloc+0x26>
 800bbae:	e000      	b.n	800bbb2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bbb0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bbb2:	7dfb      	ldrb	r3, [r7, #23]
 800bbb4:	2b04      	cmp	r3, #4
 800bbb6:	d101      	bne.n	800bbbc <dir_alloc+0x84>
 800bbb8:	2307      	movs	r3, #7
 800bbba:	75fb      	strb	r3, [r7, #23]
	return res;
 800bbbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3718      	adds	r7, #24
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b084      	sub	sp, #16
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
 800bbce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	331a      	adds	r3, #26
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7ff f83f 	bl	800ac58 <ld_word>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	2b03      	cmp	r3, #3
 800bbe4:	d109      	bne.n	800bbfa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	3314      	adds	r3, #20
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7ff f834 	bl	800ac58 <ld_word>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	041b      	lsls	r3, r3, #16
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3710      	adds	r7, #16
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	331a      	adds	r3, #26
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	b292      	uxth	r2, r2
 800bc18:	4611      	mov	r1, r2
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7ff f857 	bl	800acce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	2b03      	cmp	r3, #3
 800bc26:	d109      	bne.n	800bc3c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	f103 0214 	add.w	r2, r3, #20
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	0c1b      	lsrs	r3, r3, #16
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	4619      	mov	r1, r3
 800bc36:	4610      	mov	r0, r2
 800bc38:	f7ff f849 	bl	800acce <st_word>
	}
}
 800bc3c:	bf00      	nop
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b086      	sub	sp, #24
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bc52:	2100      	movs	r1, #0
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f7ff fe2f 	bl	800b8b8 <dir_sdi>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bc5e:	7dfb      	ldrb	r3, [r7, #23]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d001      	beq.n	800bc68 <dir_find+0x24>
 800bc64:	7dfb      	ldrb	r3, [r7, #23]
 800bc66:	e03e      	b.n	800bce6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	69db      	ldr	r3, [r3, #28]
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	6938      	ldr	r0, [r7, #16]
 800bc70:	f7ff faa2 	bl	800b1b8 <move_window>
 800bc74:	4603      	mov	r3, r0
 800bc76:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc78:	7dfb      	ldrb	r3, [r7, #23]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d12f      	bne.n	800bcde <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bc86:	7bfb      	ldrb	r3, [r7, #15]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d102      	bne.n	800bc92 <dir_find+0x4e>
 800bc8c:	2304      	movs	r3, #4
 800bc8e:	75fb      	strb	r3, [r7, #23]
 800bc90:	e028      	b.n	800bce4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a1b      	ldr	r3, [r3, #32]
 800bc96:	330b      	adds	r3, #11
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc9e:	b2da      	uxtb	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6a1b      	ldr	r3, [r3, #32]
 800bca8:	330b      	adds	r3, #11
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	f003 0308 	and.w	r3, r3, #8
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10a      	bne.n	800bcca <dir_find+0x86>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a18      	ldr	r0, [r3, #32]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	3324      	adds	r3, #36	; 0x24
 800bcbc:	220b      	movs	r2, #11
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	f7ff f888 	bl	800add4 <mem_cmp>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00b      	beq.n	800bce2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bcca:	2100      	movs	r1, #0
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f7ff fe6e 	bl	800b9ae <dir_next>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d0c5      	beq.n	800bc68 <dir_find+0x24>
 800bcdc:	e002      	b.n	800bce4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800bcde:	bf00      	nop
 800bce0:	e000      	b.n	800bce4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bce2:	bf00      	nop

	return res;
 800bce4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3718      	adds	r7, #24
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bcfc:	2101      	movs	r1, #1
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f7ff ff1a 	bl	800bb38 <dir_alloc>
 800bd04:	4603      	mov	r3, r0
 800bd06:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bd08:	7bfb      	ldrb	r3, [r7, #15]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d11c      	bne.n	800bd48 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	69db      	ldr	r3, [r3, #28]
 800bd12:	4619      	mov	r1, r3
 800bd14:	68b8      	ldr	r0, [r7, #8]
 800bd16:	f7ff fa4f 	bl	800b1b8 <move_window>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d111      	bne.n	800bd48 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6a1b      	ldr	r3, [r3, #32]
 800bd28:	2220      	movs	r2, #32
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff f836 	bl	800ad9e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a18      	ldr	r0, [r3, #32]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	3324      	adds	r3, #36	; 0x24
 800bd3a:	220b      	movs	r2, #11
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	f7ff f80d 	bl	800ad5c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	2201      	movs	r2, #1
 800bd46:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
	...

0800bd54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b088      	sub	sp, #32
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	60fb      	str	r3, [r7, #12]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	3324      	adds	r3, #36	; 0x24
 800bd68:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bd6a:	220b      	movs	r2, #11
 800bd6c:	2120      	movs	r1, #32
 800bd6e:	68b8      	ldr	r0, [r7, #8]
 800bd70:	f7ff f815 	bl	800ad9e <mem_set>
	si = i = 0; ni = 8;
 800bd74:	2300      	movs	r3, #0
 800bd76:	613b      	str	r3, [r7, #16]
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	61fb      	str	r3, [r7, #28]
 800bd7c:	2308      	movs	r3, #8
 800bd7e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	1c5a      	adds	r2, r3, #1
 800bd84:	61fa      	str	r2, [r7, #28]
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	4413      	add	r3, r2
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bd8e:	7efb      	ldrb	r3, [r7, #27]
 800bd90:	2b20      	cmp	r3, #32
 800bd92:	d94e      	bls.n	800be32 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bd94:	7efb      	ldrb	r3, [r7, #27]
 800bd96:	2b2f      	cmp	r3, #47	; 0x2f
 800bd98:	d006      	beq.n	800bda8 <create_name+0x54>
 800bd9a:	7efb      	ldrb	r3, [r7, #27]
 800bd9c:	2b5c      	cmp	r3, #92	; 0x5c
 800bd9e:	d110      	bne.n	800bdc2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bda0:	e002      	b.n	800bda8 <create_name+0x54>
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	3301      	adds	r3, #1
 800bda6:	61fb      	str	r3, [r7, #28]
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	4413      	add	r3, r2
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	2b2f      	cmp	r3, #47	; 0x2f
 800bdb2:	d0f6      	beq.n	800bda2 <create_name+0x4e>
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	69fb      	ldr	r3, [r7, #28]
 800bdb8:	4413      	add	r3, r2
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	2b5c      	cmp	r3, #92	; 0x5c
 800bdbe:	d0f0      	beq.n	800bda2 <create_name+0x4e>
			break;
 800bdc0:	e038      	b.n	800be34 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bdc2:	7efb      	ldrb	r3, [r7, #27]
 800bdc4:	2b2e      	cmp	r3, #46	; 0x2e
 800bdc6:	d003      	beq.n	800bdd0 <create_name+0x7c>
 800bdc8:	693a      	ldr	r2, [r7, #16]
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d30c      	bcc.n	800bdea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	2b0b      	cmp	r3, #11
 800bdd4:	d002      	beq.n	800bddc <create_name+0x88>
 800bdd6:	7efb      	ldrb	r3, [r7, #27]
 800bdd8:	2b2e      	cmp	r3, #46	; 0x2e
 800bdda:	d001      	beq.n	800bde0 <create_name+0x8c>
 800bddc:	2306      	movs	r3, #6
 800bdde:	e044      	b.n	800be6a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bde0:	2308      	movs	r3, #8
 800bde2:	613b      	str	r3, [r7, #16]
 800bde4:	230b      	movs	r3, #11
 800bde6:	617b      	str	r3, [r7, #20]
			continue;
 800bde8:	e022      	b.n	800be30 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bdea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	da04      	bge.n	800bdfc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bdf2:	7efb      	ldrb	r3, [r7, #27]
 800bdf4:	3b80      	subs	r3, #128	; 0x80
 800bdf6:	4a1f      	ldr	r2, [pc, #124]	; (800be74 <create_name+0x120>)
 800bdf8:	5cd3      	ldrb	r3, [r2, r3]
 800bdfa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bdfc:	7efb      	ldrb	r3, [r7, #27]
 800bdfe:	4619      	mov	r1, r3
 800be00:	481d      	ldr	r0, [pc, #116]	; (800be78 <create_name+0x124>)
 800be02:	f7ff f80e 	bl	800ae22 <chk_chr>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d001      	beq.n	800be10 <create_name+0xbc>
 800be0c:	2306      	movs	r3, #6
 800be0e:	e02c      	b.n	800be6a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800be10:	7efb      	ldrb	r3, [r7, #27]
 800be12:	2b60      	cmp	r3, #96	; 0x60
 800be14:	d905      	bls.n	800be22 <create_name+0xce>
 800be16:	7efb      	ldrb	r3, [r7, #27]
 800be18:	2b7a      	cmp	r3, #122	; 0x7a
 800be1a:	d802      	bhi.n	800be22 <create_name+0xce>
 800be1c:	7efb      	ldrb	r3, [r7, #27]
 800be1e:	3b20      	subs	r3, #32
 800be20:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	1c5a      	adds	r2, r3, #1
 800be26:	613a      	str	r2, [r7, #16]
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	4413      	add	r3, r2
 800be2c:	7efa      	ldrb	r2, [r7, #27]
 800be2e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800be30:	e7a6      	b.n	800bd80 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800be32:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800be34:	68fa      	ldr	r2, [r7, #12]
 800be36:	69fb      	ldr	r3, [r7, #28]
 800be38:	441a      	add	r2, r3
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d101      	bne.n	800be48 <create_name+0xf4>
 800be44:	2306      	movs	r3, #6
 800be46:	e010      	b.n	800be6a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	2be5      	cmp	r3, #229	; 0xe5
 800be4e:	d102      	bne.n	800be56 <create_name+0x102>
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	2205      	movs	r2, #5
 800be54:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800be56:	7efb      	ldrb	r3, [r7, #27]
 800be58:	2b20      	cmp	r3, #32
 800be5a:	d801      	bhi.n	800be60 <create_name+0x10c>
 800be5c:	2204      	movs	r2, #4
 800be5e:	e000      	b.n	800be62 <create_name+0x10e>
 800be60:	2200      	movs	r2, #0
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	330b      	adds	r3, #11
 800be66:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800be68:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3720      	adds	r7, #32
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	0800db90 	.word	0x0800db90
 800be78:	0800dab8 	.word	0x0800dab8

0800be7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800be90:	e002      	b.n	800be98 <follow_path+0x1c>
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	3301      	adds	r3, #1
 800be96:	603b      	str	r3, [r7, #0]
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	2b2f      	cmp	r3, #47	; 0x2f
 800be9e:	d0f8      	beq.n	800be92 <follow_path+0x16>
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	2b5c      	cmp	r3, #92	; 0x5c
 800bea6:	d0f4      	beq.n	800be92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	2200      	movs	r2, #0
 800beac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	2b1f      	cmp	r3, #31
 800beb4:	d80a      	bhi.n	800becc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2280      	movs	r2, #128	; 0x80
 800beba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bebe:	2100      	movs	r1, #0
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7ff fcf9 	bl	800b8b8 <dir_sdi>
 800bec6:	4603      	mov	r3, r0
 800bec8:	75fb      	strb	r3, [r7, #23]
 800beca:	e043      	b.n	800bf54 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800becc:	463b      	mov	r3, r7
 800bece:	4619      	mov	r1, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f7ff ff3f 	bl	800bd54 <create_name>
 800bed6:	4603      	mov	r3, r0
 800bed8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800beda:	7dfb      	ldrb	r3, [r7, #23]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d134      	bne.n	800bf4a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f7ff feaf 	bl	800bc44 <dir_find>
 800bee6:	4603      	mov	r3, r0
 800bee8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bef0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bef2:	7dfb      	ldrb	r3, [r7, #23]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00a      	beq.n	800bf0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bef8:	7dfb      	ldrb	r3, [r7, #23]
 800befa:	2b04      	cmp	r3, #4
 800befc:	d127      	bne.n	800bf4e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800befe:	7afb      	ldrb	r3, [r7, #11]
 800bf00:	f003 0304 	and.w	r3, r3, #4
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d122      	bne.n	800bf4e <follow_path+0xd2>
 800bf08:	2305      	movs	r3, #5
 800bf0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bf0c:	e01f      	b.n	800bf4e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf0e:	7afb      	ldrb	r3, [r7, #11]
 800bf10:	f003 0304 	and.w	r3, r3, #4
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d11c      	bne.n	800bf52 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	799b      	ldrb	r3, [r3, #6]
 800bf1c:	f003 0310 	and.w	r3, r3, #16
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d102      	bne.n	800bf2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bf24:	2305      	movs	r3, #5
 800bf26:	75fb      	strb	r3, [r7, #23]
 800bf28:	e014      	b.n	800bf54 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	695b      	ldr	r3, [r3, #20]
 800bf34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf38:	4413      	add	r3, r2
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f7ff fe42 	bl	800bbc6 <ld_clust>
 800bf42:	4602      	mov	r2, r0
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bf48:	e7c0      	b.n	800becc <follow_path+0x50>
			if (res != FR_OK) break;
 800bf4a:	bf00      	nop
 800bf4c:	e002      	b.n	800bf54 <follow_path+0xd8>
				break;
 800bf4e:	bf00      	nop
 800bf50:	e000      	b.n	800bf54 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf52:	bf00      	nop
			}
		}
	}

	return res;
 800bf54:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3718      	adds	r7, #24
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bf5e:	b480      	push	{r7}
 800bf60:	b087      	sub	sp, #28
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bf66:	f04f 33ff 	mov.w	r3, #4294967295
 800bf6a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d031      	beq.n	800bfd8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	617b      	str	r3, [r7, #20]
 800bf7a:	e002      	b.n	800bf82 <get_ldnumber+0x24>
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	617b      	str	r3, [r7, #20]
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	2b20      	cmp	r3, #32
 800bf88:	d903      	bls.n	800bf92 <get_ldnumber+0x34>
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	2b3a      	cmp	r3, #58	; 0x3a
 800bf90:	d1f4      	bne.n	800bf7c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	2b3a      	cmp	r3, #58	; 0x3a
 800bf98:	d11c      	bne.n	800bfd4 <get_ldnumber+0x76>
			tp = *path;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	1c5a      	adds	r2, r3, #1
 800bfa4:	60fa      	str	r2, [r7, #12]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	3b30      	subs	r3, #48	; 0x30
 800bfaa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2b09      	cmp	r3, #9
 800bfb0:	d80e      	bhi.n	800bfd0 <get_ldnumber+0x72>
 800bfb2:	68fa      	ldr	r2, [r7, #12]
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d10a      	bne.n	800bfd0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d107      	bne.n	800bfd0 <get_ldnumber+0x72>
					vol = (int)i;
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	617b      	str	r3, [r7, #20]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	697a      	ldr	r2, [r7, #20]
 800bfce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	e002      	b.n	800bfda <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bfd8:	693b      	ldr	r3, [r7, #16]
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	371c      	adds	r7, #28
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr
	...

0800bfe8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	70da      	strb	r2, [r3, #3]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f04f 32ff 	mov.w	r2, #4294967295
 800bffe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c000:	6839      	ldr	r1, [r7, #0]
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7ff f8d8 	bl	800b1b8 <move_window>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d001      	beq.n	800c012 <check_fs+0x2a>
 800c00e:	2304      	movs	r3, #4
 800c010:	e038      	b.n	800c084 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	3330      	adds	r3, #48	; 0x30
 800c016:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fe fe1c 	bl	800ac58 <ld_word>
 800c020:	4603      	mov	r3, r0
 800c022:	461a      	mov	r2, r3
 800c024:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c028:	429a      	cmp	r2, r3
 800c02a:	d001      	beq.n	800c030 <check_fs+0x48>
 800c02c:	2303      	movs	r3, #3
 800c02e:	e029      	b.n	800c084 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c036:	2be9      	cmp	r3, #233	; 0xe9
 800c038:	d009      	beq.n	800c04e <check_fs+0x66>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c040:	2beb      	cmp	r3, #235	; 0xeb
 800c042:	d11e      	bne.n	800c082 <check_fs+0x9a>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c04a:	2b90      	cmp	r3, #144	; 0x90
 800c04c:	d119      	bne.n	800c082 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	3330      	adds	r3, #48	; 0x30
 800c052:	3336      	adds	r3, #54	; 0x36
 800c054:	4618      	mov	r0, r3
 800c056:	f7fe fe17 	bl	800ac88 <ld_dword>
 800c05a:	4603      	mov	r3, r0
 800c05c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c060:	4a0a      	ldr	r2, [pc, #40]	; (800c08c <check_fs+0xa4>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d101      	bne.n	800c06a <check_fs+0x82>
 800c066:	2300      	movs	r3, #0
 800c068:	e00c      	b.n	800c084 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	3330      	adds	r3, #48	; 0x30
 800c06e:	3352      	adds	r3, #82	; 0x52
 800c070:	4618      	mov	r0, r3
 800c072:	f7fe fe09 	bl	800ac88 <ld_dword>
 800c076:	4603      	mov	r3, r0
 800c078:	4a05      	ldr	r2, [pc, #20]	; (800c090 <check_fs+0xa8>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d101      	bne.n	800c082 <check_fs+0x9a>
 800c07e:	2300      	movs	r3, #0
 800c080:	e000      	b.n	800c084 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c082:	2302      	movs	r3, #2
}
 800c084:	4618      	mov	r0, r3
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	00544146 	.word	0x00544146
 800c090:	33544146 	.word	0x33544146

0800c094 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b096      	sub	sp, #88	; 0x58
 800c098:	af00      	add	r7, sp, #0
 800c09a:	60f8      	str	r0, [r7, #12]
 800c09c:	60b9      	str	r1, [r7, #8]
 800c09e:	4613      	mov	r3, r2
 800c0a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	f7ff ff58 	bl	800bf5e <get_ldnumber>
 800c0ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	da01      	bge.n	800c0ba <find_volume+0x26>
 800c0b6:	230b      	movs	r3, #11
 800c0b8:	e22e      	b.n	800c518 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c0ba:	4aa8      	ldr	r2, [pc, #672]	; (800c35c <find_volume+0x2c8>)
 800c0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <find_volume+0x3a>
 800c0ca:	230c      	movs	r3, #12
 800c0cc:	e224      	b.n	800c518 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0d2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c0d4:	79fb      	ldrb	r3, [r7, #7]
 800c0d6:	f023 0301 	bic.w	r3, r3, #1
 800c0da:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d01a      	beq.n	800c11a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e6:	785b      	ldrb	r3, [r3, #1]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7fe fd17 	bl	800ab1c <disk_status>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c0f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c0f8:	f003 0301 	and.w	r3, r3, #1
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d10c      	bne.n	800c11a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c100:	79fb      	ldrb	r3, [r7, #7]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d007      	beq.n	800c116 <find_volume+0x82>
 800c106:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c10a:	f003 0304 	and.w	r3, r3, #4
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d001      	beq.n	800c116 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c112:	230a      	movs	r3, #10
 800c114:	e200      	b.n	800c518 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800c116:	2300      	movs	r3, #0
 800c118:	e1fe      	b.n	800c518 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11c:	2200      	movs	r2, #0
 800c11e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c122:	b2da      	uxtb	r2, r3
 800c124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c126:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12a:	785b      	ldrb	r3, [r3, #1]
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7fe fd0f 	bl	800ab50 <disk_initialize>
 800c132:	4603      	mov	r3, r0
 800c134:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c138:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c13c:	f003 0301 	and.w	r3, r3, #1
 800c140:	2b00      	cmp	r3, #0
 800c142:	d001      	beq.n	800c148 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c144:	2303      	movs	r3, #3
 800c146:	e1e7      	b.n	800c518 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c148:	79fb      	ldrb	r3, [r7, #7]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d007      	beq.n	800c15e <find_volume+0xca>
 800c14e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c152:	f003 0304 	and.w	r3, r3, #4
 800c156:	2b00      	cmp	r3, #0
 800c158:	d001      	beq.n	800c15e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c15a:	230a      	movs	r3, #10
 800c15c:	e1dc      	b.n	800c518 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c15e:	2300      	movs	r3, #0
 800c160:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c162:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c164:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c166:	f7ff ff3f 	bl	800bfe8 <check_fs>
 800c16a:	4603      	mov	r3, r0
 800c16c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c170:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c174:	2b02      	cmp	r3, #2
 800c176:	d14b      	bne.n	800c210 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c178:	2300      	movs	r3, #0
 800c17a:	643b      	str	r3, [r7, #64]	; 0x40
 800c17c:	e01f      	b.n	800c1be <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c180:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c186:	011b      	lsls	r3, r3, #4
 800c188:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c18c:	4413      	add	r3, r2
 800c18e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c192:	3304      	adds	r3, #4
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d006      	beq.n	800c1a8 <find_volume+0x114>
 800c19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19c:	3308      	adds	r3, #8
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fe fd72 	bl	800ac88 <ld_dword>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	e000      	b.n	800c1aa <find_volume+0x116>
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c1b2:	440b      	add	r3, r1
 800c1b4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c1b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	643b      	str	r3, [r7, #64]	; 0x40
 800c1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1c0:	2b03      	cmp	r3, #3
 800c1c2:	d9dc      	bls.n	800c17e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c1c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d002      	beq.n	800c1d4 <find_volume+0x140>
 800c1ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c1d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c1dc:	4413      	add	r3, r2
 800c1de:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c1e2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c1e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d005      	beq.n	800c1f6 <find_volume+0x162>
 800c1ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c1ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c1ee:	f7ff fefb 	bl	800bfe8 <check_fs>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	e000      	b.n	800c1f8 <find_volume+0x164>
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c1fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c200:	2b01      	cmp	r3, #1
 800c202:	d905      	bls.n	800c210 <find_volume+0x17c>
 800c204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c206:	3301      	adds	r3, #1
 800c208:	643b      	str	r3, [r7, #64]	; 0x40
 800c20a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c20c:	2b03      	cmp	r3, #3
 800c20e:	d9e1      	bls.n	800c1d4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c210:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c214:	2b04      	cmp	r3, #4
 800c216:	d101      	bne.n	800c21c <find_volume+0x188>
 800c218:	2301      	movs	r3, #1
 800c21a:	e17d      	b.n	800c518 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c21c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c220:	2b01      	cmp	r3, #1
 800c222:	d901      	bls.n	800c228 <find_volume+0x194>
 800c224:	230d      	movs	r3, #13
 800c226:	e177      	b.n	800c518 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22a:	3330      	adds	r3, #48	; 0x30
 800c22c:	330b      	adds	r3, #11
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fe fd12 	bl	800ac58 <ld_word>
 800c234:	4603      	mov	r3, r0
 800c236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c23a:	d001      	beq.n	800c240 <find_volume+0x1ac>
 800c23c:	230d      	movs	r3, #13
 800c23e:	e16b      	b.n	800c518 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c242:	3330      	adds	r3, #48	; 0x30
 800c244:	3316      	adds	r3, #22
 800c246:	4618      	mov	r0, r3
 800c248:	f7fe fd06 	bl	800ac58 <ld_word>
 800c24c:	4603      	mov	r3, r0
 800c24e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c252:	2b00      	cmp	r3, #0
 800c254:	d106      	bne.n	800c264 <find_volume+0x1d0>
 800c256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c258:	3330      	adds	r3, #48	; 0x30
 800c25a:	3324      	adds	r3, #36	; 0x24
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7fe fd13 	bl	800ac88 <ld_dword>
 800c262:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c266:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c268:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c272:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c276:	789b      	ldrb	r3, [r3, #2]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d005      	beq.n	800c288 <find_volume+0x1f4>
 800c27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27e:	789b      	ldrb	r3, [r3, #2]
 800c280:	2b02      	cmp	r3, #2
 800c282:	d001      	beq.n	800c288 <find_volume+0x1f4>
 800c284:	230d      	movs	r3, #13
 800c286:	e147      	b.n	800c518 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28a:	789b      	ldrb	r3, [r3, #2]
 800c28c:	461a      	mov	r2, r3
 800c28e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c290:	fb02 f303 	mul.w	r3, r2, r3
 800c294:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a4:	895b      	ldrh	r3, [r3, #10]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d008      	beq.n	800c2bc <find_volume+0x228>
 800c2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ac:	895b      	ldrh	r3, [r3, #10]
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b2:	895b      	ldrh	r3, [r3, #10]
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	4013      	ands	r3, r2
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d001      	beq.n	800c2c0 <find_volume+0x22c>
 800c2bc:	230d      	movs	r3, #13
 800c2be:	e12b      	b.n	800c518 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c2:	3330      	adds	r3, #48	; 0x30
 800c2c4:	3311      	adds	r3, #17
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7fe fcc6 	bl	800ac58 <ld_word>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d6:	891b      	ldrh	r3, [r3, #8]
 800c2d8:	f003 030f 	and.w	r3, r3, #15
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d001      	beq.n	800c2e6 <find_volume+0x252>
 800c2e2:	230d      	movs	r3, #13
 800c2e4:	e118      	b.n	800c518 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e8:	3330      	adds	r3, #48	; 0x30
 800c2ea:	3313      	adds	r3, #19
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7fe fcb3 	bl	800ac58 <ld_word>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c2f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d106      	bne.n	800c30a <find_volume+0x276>
 800c2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fe:	3330      	adds	r3, #48	; 0x30
 800c300:	3320      	adds	r3, #32
 800c302:	4618      	mov	r0, r3
 800c304:	f7fe fcc0 	bl	800ac88 <ld_dword>
 800c308:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30c:	3330      	adds	r3, #48	; 0x30
 800c30e:	330e      	adds	r3, #14
 800c310:	4618      	mov	r0, r3
 800c312:	f7fe fca1 	bl	800ac58 <ld_word>
 800c316:	4603      	mov	r3, r0
 800c318:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c31a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d101      	bne.n	800c324 <find_volume+0x290>
 800c320:	230d      	movs	r3, #13
 800c322:	e0f9      	b.n	800c518 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c324:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c328:	4413      	add	r3, r2
 800c32a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c32c:	8912      	ldrh	r2, [r2, #8]
 800c32e:	0912      	lsrs	r2, r2, #4
 800c330:	b292      	uxth	r2, r2
 800c332:	4413      	add	r3, r2
 800c334:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d201      	bcs.n	800c342 <find_volume+0x2ae>
 800c33e:	230d      	movs	r3, #13
 800c340:	e0ea      	b.n	800c518 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c346:	1ad3      	subs	r3, r2, r3
 800c348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c34a:	8952      	ldrh	r2, [r2, #10]
 800c34c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c350:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c354:	2b00      	cmp	r3, #0
 800c356:	d103      	bne.n	800c360 <find_volume+0x2cc>
 800c358:	230d      	movs	r3, #13
 800c35a:	e0dd      	b.n	800c518 <find_volume+0x484>
 800c35c:	2000134c 	.word	0x2000134c
		fmt = FS_FAT32;
 800c360:	2303      	movs	r3, #3
 800c362:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c368:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d802      	bhi.n	800c376 <find_volume+0x2e2>
 800c370:	2302      	movs	r3, #2
 800c372:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c378:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d802      	bhi.n	800c386 <find_volume+0x2f2>
 800c380:	2301      	movs	r3, #1
 800c382:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c388:	1c9a      	adds	r2, r3, #2
 800c38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c390:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c392:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c394:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c398:	441a      	add	r2, r3
 800c39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c39e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a2:	441a      	add	r2, r3
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c3a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c3ac:	2b03      	cmp	r3, #3
 800c3ae:	d11e      	bne.n	800c3ee <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b2:	3330      	adds	r3, #48	; 0x30
 800c3b4:	332a      	adds	r3, #42	; 0x2a
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fe fc4e 	bl	800ac58 <ld_word>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d001      	beq.n	800c3c6 <find_volume+0x332>
 800c3c2:	230d      	movs	r3, #13
 800c3c4:	e0a8      	b.n	800c518 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c8:	891b      	ldrh	r3, [r3, #8]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <find_volume+0x33e>
 800c3ce:	230d      	movs	r3, #13
 800c3d0:	e0a2      	b.n	800c518 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d4:	3330      	adds	r3, #48	; 0x30
 800c3d6:	332c      	adds	r3, #44	; 0x2c
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fe fc55 	bl	800ac88 <ld_dword>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e6:	695b      	ldr	r3, [r3, #20]
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	647b      	str	r3, [r7, #68]	; 0x44
 800c3ec:	e01f      	b.n	800c42e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f0:	891b      	ldrh	r3, [r3, #8]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d101      	bne.n	800c3fa <find_volume+0x366>
 800c3f6:	230d      	movs	r3, #13
 800c3f8:	e08e      	b.n	800c518 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fc:	6a1a      	ldr	r2, [r3, #32]
 800c3fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c400:	441a      	add	r2, r3
 800c402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c404:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c406:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	d103      	bne.n	800c416 <find_volume+0x382>
 800c40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c410:	695b      	ldr	r3, [r3, #20]
 800c412:	005b      	lsls	r3, r3, #1
 800c414:	e00a      	b.n	800c42c <find_volume+0x398>
 800c416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c418:	695a      	ldr	r2, [r3, #20]
 800c41a:	4613      	mov	r3, r2
 800c41c:	005b      	lsls	r3, r3, #1
 800c41e:	4413      	add	r3, r2
 800c420:	085a      	lsrs	r2, r3, #1
 800c422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c424:	695b      	ldr	r3, [r3, #20]
 800c426:	f003 0301 	and.w	r3, r3, #1
 800c42a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c42c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c430:	699a      	ldr	r2, [r3, #24]
 800c432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c434:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c438:	0a5b      	lsrs	r3, r3, #9
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d201      	bcs.n	800c442 <find_volume+0x3ae>
 800c43e:	230d      	movs	r3, #13
 800c440:	e06a      	b.n	800c518 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c444:	f04f 32ff 	mov.w	r2, #4294967295
 800c448:	611a      	str	r2, [r3, #16]
 800c44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44c:	691a      	ldr	r2, [r3, #16]
 800c44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c450:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c454:	2280      	movs	r2, #128	; 0x80
 800c456:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c458:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c45c:	2b03      	cmp	r3, #3
 800c45e:	d149      	bne.n	800c4f4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c462:	3330      	adds	r3, #48	; 0x30
 800c464:	3330      	adds	r3, #48	; 0x30
 800c466:	4618      	mov	r0, r3
 800c468:	f7fe fbf6 	bl	800ac58 <ld_word>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d140      	bne.n	800c4f4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c474:	3301      	adds	r3, #1
 800c476:	4619      	mov	r1, r3
 800c478:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c47a:	f7fe fe9d 	bl	800b1b8 <move_window>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d137      	bne.n	800c4f4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800c484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c486:	2200      	movs	r2, #0
 800c488:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48c:	3330      	adds	r3, #48	; 0x30
 800c48e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c492:	4618      	mov	r0, r3
 800c494:	f7fe fbe0 	bl	800ac58 <ld_word>
 800c498:	4603      	mov	r3, r0
 800c49a:	461a      	mov	r2, r3
 800c49c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d127      	bne.n	800c4f4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a6:	3330      	adds	r3, #48	; 0x30
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7fe fbed 	bl	800ac88 <ld_dword>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	4a1b      	ldr	r2, [pc, #108]	; (800c520 <find_volume+0x48c>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d11e      	bne.n	800c4f4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b8:	3330      	adds	r3, #48	; 0x30
 800c4ba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fe fbe2 	bl	800ac88 <ld_dword>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	4a17      	ldr	r2, [pc, #92]	; (800c524 <find_volume+0x490>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d113      	bne.n	800c4f4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ce:	3330      	adds	r3, #48	; 0x30
 800c4d0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7fe fbd7 	bl	800ac88 <ld_dword>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4de:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e2:	3330      	adds	r3, #48	; 0x30
 800c4e4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7fe fbcd 	bl	800ac88 <ld_dword>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c4fa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c4fc:	4b0a      	ldr	r3, [pc, #40]	; (800c528 <find_volume+0x494>)
 800c4fe:	881b      	ldrh	r3, [r3, #0]
 800c500:	3301      	adds	r3, #1
 800c502:	b29a      	uxth	r2, r3
 800c504:	4b08      	ldr	r3, [pc, #32]	; (800c528 <find_volume+0x494>)
 800c506:	801a      	strh	r2, [r3, #0]
 800c508:	4b07      	ldr	r3, [pc, #28]	; (800c528 <find_volume+0x494>)
 800c50a:	881a      	ldrh	r2, [r3, #0]
 800c50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c510:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c512:	f7fe fde9 	bl	800b0e8 <clear_lock>
#endif
	return FR_OK;
 800c516:	2300      	movs	r3, #0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3758      	adds	r7, #88	; 0x58
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	41615252 	.word	0x41615252
 800c524:	61417272 	.word	0x61417272
 800c528:	20001350 	.word	0x20001350

0800c52c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c536:	2309      	movs	r3, #9
 800c538:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d01c      	beq.n	800c57a <validate+0x4e>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d018      	beq.n	800c57a <validate+0x4e>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d013      	beq.n	800c57a <validate+0x4e>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	889a      	ldrh	r2, [r3, #4]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	88db      	ldrh	r3, [r3, #6]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d10c      	bne.n	800c57a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	785b      	ldrb	r3, [r3, #1]
 800c566:	4618      	mov	r0, r3
 800c568:	f7fe fad8 	bl	800ab1c <disk_status>
 800c56c:	4603      	mov	r3, r0
 800c56e:	f003 0301 	and.w	r3, r3, #1
 800c572:	2b00      	cmp	r3, #0
 800c574:	d101      	bne.n	800c57a <validate+0x4e>
			res = FR_OK;
 800c576:	2300      	movs	r3, #0
 800c578:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c57a:	7bfb      	ldrb	r3, [r7, #15]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d102      	bne.n	800c586 <validate+0x5a>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	e000      	b.n	800c588 <validate+0x5c>
 800c586:	2300      	movs	r3, #0
 800c588:	683a      	ldr	r2, [r7, #0]
 800c58a:	6013      	str	r3, [r2, #0]
	return res;
 800c58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
	...

0800c598 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b088      	sub	sp, #32
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c5aa:	f107 0310 	add.w	r3, r7, #16
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7ff fcd5 	bl	800bf5e <get_ldnumber>
 800c5b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	da01      	bge.n	800c5c0 <f_mount+0x28>
 800c5bc:	230b      	movs	r3, #11
 800c5be:	e02b      	b.n	800c618 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c5c0:	4a17      	ldr	r2, [pc, #92]	; (800c620 <f_mount+0x88>)
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d005      	beq.n	800c5dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c5d0:	69b8      	ldr	r0, [r7, #24]
 800c5d2:	f7fe fd89 	bl	800b0e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d002      	beq.n	800c5e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	490d      	ldr	r1, [pc, #52]	; (800c620 <f_mount+0x88>)
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d002      	beq.n	800c5fe <f_mount+0x66>
 800c5f8:	79fb      	ldrb	r3, [r7, #7]
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d001      	beq.n	800c602 <f_mount+0x6a>
 800c5fe:	2300      	movs	r3, #0
 800c600:	e00a      	b.n	800c618 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c602:	f107 010c 	add.w	r1, r7, #12
 800c606:	f107 0308 	add.w	r3, r7, #8
 800c60a:	2200      	movs	r2, #0
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7ff fd41 	bl	800c094 <find_volume>
 800c612:	4603      	mov	r3, r0
 800c614:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c616:	7dfb      	ldrb	r3, [r7, #23]
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3720      	adds	r7, #32
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	2000134c 	.word	0x2000134c

0800c624 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b098      	sub	sp, #96	; 0x60
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	4613      	mov	r3, r2
 800c630:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d101      	bne.n	800c63c <f_open+0x18>
 800c638:	2309      	movs	r3, #9
 800c63a:	e1ad      	b.n	800c998 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c63c:	79fb      	ldrb	r3, [r7, #7]
 800c63e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c642:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c644:	79fa      	ldrb	r2, [r7, #7]
 800c646:	f107 0110 	add.w	r1, r7, #16
 800c64a:	f107 0308 	add.w	r3, r7, #8
 800c64e:	4618      	mov	r0, r3
 800c650:	f7ff fd20 	bl	800c094 <find_volume>
 800c654:	4603      	mov	r3, r0
 800c656:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c65a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f040 8191 	bne.w	800c986 <f_open+0x362>
		dj.obj.fs = fs;
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c668:	68ba      	ldr	r2, [r7, #8]
 800c66a:	f107 0314 	add.w	r3, r7, #20
 800c66e:	4611      	mov	r1, r2
 800c670:	4618      	mov	r0, r3
 800c672:	f7ff fc03 	bl	800be7c <follow_path>
 800c676:	4603      	mov	r3, r0
 800c678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c67c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c680:	2b00      	cmp	r3, #0
 800c682:	d11a      	bne.n	800c6ba <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c684:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c688:	b25b      	sxtb	r3, r3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	da03      	bge.n	800c696 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c68e:	2306      	movs	r3, #6
 800c690:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c694:	e011      	b.n	800c6ba <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c696:	79fb      	ldrb	r3, [r7, #7]
 800c698:	f023 0301 	bic.w	r3, r3, #1
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	bf14      	ite	ne
 800c6a0:	2301      	movne	r3, #1
 800c6a2:	2300      	moveq	r3, #0
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	f107 0314 	add.w	r3, r7, #20
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7fe fbd2 	bl	800ae58 <chk_lock>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c6ba:	79fb      	ldrb	r3, [r7, #7]
 800c6bc:	f003 031c 	and.w	r3, r3, #28
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d07f      	beq.n	800c7c4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c6c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d017      	beq.n	800c6fc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c6cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6d0:	2b04      	cmp	r3, #4
 800c6d2:	d10e      	bne.n	800c6f2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c6d4:	f7fe fc1c 	bl	800af10 <enq_lock>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d006      	beq.n	800c6ec <f_open+0xc8>
 800c6de:	f107 0314 	add.w	r3, r7, #20
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7ff fb03 	bl	800bcee <dir_register>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	e000      	b.n	800c6ee <f_open+0xca>
 800c6ec:	2312      	movs	r3, #18
 800c6ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c6f2:	79fb      	ldrb	r3, [r7, #7]
 800c6f4:	f043 0308 	orr.w	r3, r3, #8
 800c6f8:	71fb      	strb	r3, [r7, #7]
 800c6fa:	e010      	b.n	800c71e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c6fc:	7ebb      	ldrb	r3, [r7, #26]
 800c6fe:	f003 0311 	and.w	r3, r3, #17
 800c702:	2b00      	cmp	r3, #0
 800c704:	d003      	beq.n	800c70e <f_open+0xea>
					res = FR_DENIED;
 800c706:	2307      	movs	r3, #7
 800c708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c70c:	e007      	b.n	800c71e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c70e:	79fb      	ldrb	r3, [r7, #7]
 800c710:	f003 0304 	and.w	r3, r3, #4
 800c714:	2b00      	cmp	r3, #0
 800c716:	d002      	beq.n	800c71e <f_open+0xfa>
 800c718:	2308      	movs	r3, #8
 800c71a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c71e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c722:	2b00      	cmp	r3, #0
 800c724:	d168      	bne.n	800c7f8 <f_open+0x1d4>
 800c726:	79fb      	ldrb	r3, [r7, #7]
 800c728:	f003 0308 	and.w	r3, r3, #8
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d063      	beq.n	800c7f8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c730:	f7fb f9f8 	bl	8007b24 <get_fattime>
 800c734:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c738:	330e      	adds	r3, #14
 800c73a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7fe fae1 	bl	800ad04 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c744:	3316      	adds	r3, #22
 800c746:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c748:	4618      	mov	r0, r3
 800c74a:	f7fe fadb 	bl	800ad04 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c750:	330b      	adds	r3, #11
 800c752:	2220      	movs	r2, #32
 800c754:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c75a:	4611      	mov	r1, r2
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7ff fa32 	bl	800bbc6 <ld_clust>
 800c762:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c768:	2200      	movs	r2, #0
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7ff fa4a 	bl	800bc04 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c772:	331c      	adds	r3, #28
 800c774:	2100      	movs	r1, #0
 800c776:	4618      	mov	r0, r3
 800c778:	f7fe fac4 	bl	800ad04 <st_dword>
					fs->wflag = 1;
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	2201      	movs	r2, #1
 800c780:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c784:	2b00      	cmp	r3, #0
 800c786:	d037      	beq.n	800c7f8 <f_open+0x1d4>
						dw = fs->winsect;
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c78e:	f107 0314 	add.w	r3, r7, #20
 800c792:	2200      	movs	r2, #0
 800c794:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c796:	4618      	mov	r0, r3
 800c798:	f7fe ff5d 	bl	800b656 <remove_chain>
 800c79c:	4603      	mov	r3, r0
 800c79e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c7a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d126      	bne.n	800c7f8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7fe fd02 	bl	800b1b8 <move_window>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7be:	3a01      	subs	r2, #1
 800c7c0:	60da      	str	r2, [r3, #12]
 800c7c2:	e019      	b.n	800c7f8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c7c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d115      	bne.n	800c7f8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c7cc:	7ebb      	ldrb	r3, [r7, #26]
 800c7ce:	f003 0310 	and.w	r3, r3, #16
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d003      	beq.n	800c7de <f_open+0x1ba>
					res = FR_NO_FILE;
 800c7d6:	2304      	movs	r3, #4
 800c7d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c7dc:	e00c      	b.n	800c7f8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c7de:	79fb      	ldrb	r3, [r7, #7]
 800c7e0:	f003 0302 	and.w	r3, r3, #2
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d007      	beq.n	800c7f8 <f_open+0x1d4>
 800c7e8:	7ebb      	ldrb	r3, [r7, #26]
 800c7ea:	f003 0301 	and.w	r3, r3, #1
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d002      	beq.n	800c7f8 <f_open+0x1d4>
						res = FR_DENIED;
 800c7f2:	2307      	movs	r3, #7
 800c7f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c7f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d128      	bne.n	800c852 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c800:	79fb      	ldrb	r3, [r7, #7]
 800c802:	f003 0308 	and.w	r3, r3, #8
 800c806:	2b00      	cmp	r3, #0
 800c808:	d003      	beq.n	800c812 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c80a:	79fb      	ldrb	r3, [r7, #7]
 800c80c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c810:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c81a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c820:	79fb      	ldrb	r3, [r7, #7]
 800c822:	f023 0301 	bic.w	r3, r3, #1
 800c826:	2b00      	cmp	r3, #0
 800c828:	bf14      	ite	ne
 800c82a:	2301      	movne	r3, #1
 800c82c:	2300      	moveq	r3, #0
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	461a      	mov	r2, r3
 800c832:	f107 0314 	add.w	r3, r7, #20
 800c836:	4611      	mov	r1, r2
 800c838:	4618      	mov	r0, r3
 800c83a:	f7fe fb8b 	bl	800af54 <inc_lock>
 800c83e:	4602      	mov	r2, r0
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d102      	bne.n	800c852 <f_open+0x22e>
 800c84c:	2302      	movs	r3, #2
 800c84e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c856:	2b00      	cmp	r3, #0
 800c858:	f040 8095 	bne.w	800c986 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c860:	4611      	mov	r1, r2
 800c862:	4618      	mov	r0, r3
 800c864:	f7ff f9af 	bl	800bbc6 <ld_clust>
 800c868:	4602      	mov	r2, r0
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c870:	331c      	adds	r3, #28
 800c872:	4618      	mov	r0, r3
 800c874:	f7fe fa08 	bl	800ac88 <ld_dword>
 800c878:	4602      	mov	r2, r0
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2200      	movs	r2, #0
 800c882:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c884:	693a      	ldr	r2, [r7, #16]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	88da      	ldrh	r2, [r3, #6]
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	79fa      	ldrb	r2, [r7, #7]
 800c896:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2200      	movs	r2, #0
 800c89c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	3330      	adds	r3, #48	; 0x30
 800c8ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8b2:	2100      	movs	r1, #0
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7fe fa72 	bl	800ad9e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c8ba:	79fb      	ldrb	r3, [r7, #7]
 800c8bc:	f003 0320 	and.w	r3, r3, #32
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d060      	beq.n	800c986 <f_open+0x362>
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d05c      	beq.n	800c986 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	68da      	ldr	r2, [r3, #12]
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	895b      	ldrh	r3, [r3, #10]
 800c8d8:	025b      	lsls	r3, r3, #9
 800c8da:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	689b      	ldr	r3, [r3, #8]
 800c8e0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	657b      	str	r3, [r7, #84]	; 0x54
 800c8e8:	e016      	b.n	800c918 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7fe fd1d 	bl	800b32e <get_fat>
 800c8f4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c8f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d802      	bhi.n	800c902 <f_open+0x2de>
 800c8fc:	2302      	movs	r3, #2
 800c8fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c908:	d102      	bne.n	800c910 <f_open+0x2ec>
 800c90a:	2301      	movs	r3, #1
 800c90c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c910:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c914:	1ad3      	subs	r3, r2, r3
 800c916:	657b      	str	r3, [r7, #84]	; 0x54
 800c918:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d103      	bne.n	800c928 <f_open+0x304>
 800c920:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c924:	429a      	cmp	r2, r3
 800c926:	d8e0      	bhi.n	800c8ea <f_open+0x2c6>
				}
				fp->clust = clst;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c92c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c92e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c932:	2b00      	cmp	r3, #0
 800c934:	d127      	bne.n	800c986 <f_open+0x362>
 800c936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d022      	beq.n	800c986 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c944:	4618      	mov	r0, r3
 800c946:	f7fe fcd3 	bl	800b2f0 <clust2sect>
 800c94a:	6478      	str	r0, [r7, #68]	; 0x44
 800c94c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d103      	bne.n	800c95a <f_open+0x336>
						res = FR_INT_ERR;
 800c952:	2302      	movs	r3, #2
 800c954:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c958:	e015      	b.n	800c986 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c95a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c95c:	0a5a      	lsrs	r2, r3, #9
 800c95e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c960:	441a      	add	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	7858      	ldrb	r0, [r3, #1]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	6a1a      	ldr	r2, [r3, #32]
 800c974:	2301      	movs	r3, #1
 800c976:	f7fe f911 	bl	800ab9c <disk_read>
 800c97a:	4603      	mov	r3, r0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d002      	beq.n	800c986 <f_open+0x362>
 800c980:	2301      	movs	r3, #1
 800c982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c986:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d002      	beq.n	800c994 <f_open+0x370>
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2200      	movs	r2, #0
 800c992:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c994:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3760      	adds	r7, #96	; 0x60
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b08e      	sub	sp, #56	; 0x38
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	607a      	str	r2, [r7, #4]
 800c9ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f107 0214 	add.w	r2, r7, #20
 800c9be:	4611      	mov	r1, r2
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7ff fdb3 	bl	800c52c <validate>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c9cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d107      	bne.n	800c9e4 <f_read+0x44>
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	7d5b      	ldrb	r3, [r3, #21]
 800c9d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c9dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d002      	beq.n	800c9ea <f_read+0x4a>
 800c9e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9e8:	e115      	b.n	800cc16 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	7d1b      	ldrb	r3, [r3, #20]
 800c9ee:	f003 0301 	and.w	r3, r3, #1
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d101      	bne.n	800c9fa <f_read+0x5a>
 800c9f6:	2307      	movs	r3, #7
 800c9f8:	e10d      	b.n	800cc16 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	68da      	ldr	r2, [r3, #12]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	699b      	ldr	r3, [r3, #24]
 800ca02:	1ad3      	subs	r3, r2, r3
 800ca04:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	6a3b      	ldr	r3, [r7, #32]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	f240 80fe 	bls.w	800cc0c <f_read+0x26c>
 800ca10:	6a3b      	ldr	r3, [r7, #32]
 800ca12:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ca14:	e0fa      	b.n	800cc0c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	699b      	ldr	r3, [r3, #24]
 800ca1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f040 80c6 	bne.w	800cbb0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	699b      	ldr	r3, [r3, #24]
 800ca28:	0a5b      	lsrs	r3, r3, #9
 800ca2a:	697a      	ldr	r2, [r7, #20]
 800ca2c:	8952      	ldrh	r2, [r2, #10]
 800ca2e:	3a01      	subs	r2, #1
 800ca30:	4013      	ands	r3, r2
 800ca32:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d12f      	bne.n	800ca9a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	699b      	ldr	r3, [r3, #24]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d103      	bne.n	800ca4a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	633b      	str	r3, [r7, #48]	; 0x30
 800ca48:	e013      	b.n	800ca72 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d007      	beq.n	800ca62 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	699b      	ldr	r3, [r3, #24]
 800ca56:	4619      	mov	r1, r3
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f7fe fef9 	bl	800b850 <clmt_clust>
 800ca5e:	6338      	str	r0, [r7, #48]	; 0x30
 800ca60:	e007      	b.n	800ca72 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ca62:	68fa      	ldr	r2, [r7, #12]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	69db      	ldr	r3, [r3, #28]
 800ca68:	4619      	mov	r1, r3
 800ca6a:	4610      	mov	r0, r2
 800ca6c:	f7fe fc5f 	bl	800b32e <get_fat>
 800ca70:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ca72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d804      	bhi.n	800ca82 <f_read+0xe2>
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2202      	movs	r2, #2
 800ca7c:	755a      	strb	r2, [r3, #21]
 800ca7e:	2302      	movs	r3, #2
 800ca80:	e0c9      	b.n	800cc16 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca88:	d104      	bne.n	800ca94 <f_read+0xf4>
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	755a      	strb	r2, [r3, #21]
 800ca90:	2301      	movs	r3, #1
 800ca92:	e0c0      	b.n	800cc16 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca98:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ca9a:	697a      	ldr	r2, [r7, #20]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	69db      	ldr	r3, [r3, #28]
 800caa0:	4619      	mov	r1, r3
 800caa2:	4610      	mov	r0, r2
 800caa4:	f7fe fc24 	bl	800b2f0 <clust2sect>
 800caa8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d104      	bne.n	800caba <f_read+0x11a>
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2202      	movs	r2, #2
 800cab4:	755a      	strb	r2, [r3, #21]
 800cab6:	2302      	movs	r3, #2
 800cab8:	e0ad      	b.n	800cc16 <f_read+0x276>
			sect += csect;
 800caba:	69ba      	ldr	r2, [r7, #24]
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	4413      	add	r3, r2
 800cac0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	0a5b      	lsrs	r3, r3, #9
 800cac6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d039      	beq.n	800cb42 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cace:	69fa      	ldr	r2, [r7, #28]
 800cad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad2:	4413      	add	r3, r2
 800cad4:	697a      	ldr	r2, [r7, #20]
 800cad6:	8952      	ldrh	r2, [r2, #10]
 800cad8:	4293      	cmp	r3, r2
 800cada:	d905      	bls.n	800cae8 <f_read+0x148>
					cc = fs->csize - csect;
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	895b      	ldrh	r3, [r3, #10]
 800cae0:	461a      	mov	r2, r3
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	1ad3      	subs	r3, r2, r3
 800cae6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	7858      	ldrb	r0, [r3, #1]
 800caec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caee:	69ba      	ldr	r2, [r7, #24]
 800caf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800caf2:	f7fe f853 	bl	800ab9c <disk_read>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d004      	beq.n	800cb06 <f_read+0x166>
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2201      	movs	r2, #1
 800cb00:	755a      	strb	r2, [r3, #21]
 800cb02:	2301      	movs	r3, #1
 800cb04:	e087      	b.n	800cc16 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	7d1b      	ldrb	r3, [r3, #20]
 800cb0a:	b25b      	sxtb	r3, r3
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	da14      	bge.n	800cb3a <f_read+0x19a>
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	6a1a      	ldr	r2, [r3, #32]
 800cb14:	69bb      	ldr	r3, [r7, #24]
 800cb16:	1ad3      	subs	r3, r2, r3
 800cb18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d90d      	bls.n	800cb3a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6a1a      	ldr	r2, [r3, #32]
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	1ad3      	subs	r3, r2, r3
 800cb26:	025b      	lsls	r3, r3, #9
 800cb28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb2a:	18d0      	adds	r0, r2, r3
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	3330      	adds	r3, #48	; 0x30
 800cb30:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb34:	4619      	mov	r1, r3
 800cb36:	f7fe f911 	bl	800ad5c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3c:	025b      	lsls	r3, r3, #9
 800cb3e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800cb40:	e050      	b.n	800cbe4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6a1b      	ldr	r3, [r3, #32]
 800cb46:	69ba      	ldr	r2, [r7, #24]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d02e      	beq.n	800cbaa <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	7d1b      	ldrb	r3, [r3, #20]
 800cb50:	b25b      	sxtb	r3, r3
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	da18      	bge.n	800cb88 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	7858      	ldrb	r0, [r3, #1]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6a1a      	ldr	r2, [r3, #32]
 800cb64:	2301      	movs	r3, #1
 800cb66:	f7fe f839 	bl	800abdc <disk_write>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d004      	beq.n	800cb7a <f_read+0x1da>
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2201      	movs	r2, #1
 800cb74:	755a      	strb	r2, [r3, #21]
 800cb76:	2301      	movs	r3, #1
 800cb78:	e04d      	b.n	800cc16 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	7d1b      	ldrb	r3, [r3, #20]
 800cb7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	7858      	ldrb	r0, [r3, #1]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb92:	2301      	movs	r3, #1
 800cb94:	69ba      	ldr	r2, [r7, #24]
 800cb96:	f7fe f801 	bl	800ab9c <disk_read>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d004      	beq.n	800cbaa <f_read+0x20a>
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2201      	movs	r2, #1
 800cba4:	755a      	strb	r2, [r3, #21]
 800cba6:	2301      	movs	r3, #1
 800cba8:	e035      	b.n	800cc16 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	69ba      	ldr	r2, [r7, #24]
 800cbae:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	699b      	ldr	r3, [r3, #24]
 800cbb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbb8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cbbc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cbbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d901      	bls.n	800cbca <f_read+0x22a>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	699b      	ldr	r3, [r3, #24]
 800cbd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbd8:	4413      	add	r3, r2
 800cbda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbdc:	4619      	mov	r1, r3
 800cbde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbe0:	f7fe f8bc 	bl	800ad5c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cbe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe8:	4413      	add	r3, r2
 800cbea:	627b      	str	r3, [r7, #36]	; 0x24
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	699a      	ldr	r2, [r3, #24]
 800cbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf2:	441a      	add	r2, r3
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	619a      	str	r2, [r3, #24]
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfe:	441a      	add	r2, r3
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	601a      	str	r2, [r3, #0]
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc08:	1ad3      	subs	r3, r2, r3
 800cc0a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f47f af01 	bne.w	800ca16 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3738      	adds	r7, #56	; 0x38
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b086      	sub	sp, #24
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f107 0208 	add.w	r2, r7, #8
 800cc2c:	4611      	mov	r1, r2
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7ff fc7c 	bl	800c52c <validate>
 800cc34:	4603      	mov	r3, r0
 800cc36:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc38:	7dfb      	ldrb	r3, [r7, #23]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d168      	bne.n	800cd10 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	7d1b      	ldrb	r3, [r3, #20]
 800cc42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d062      	beq.n	800cd10 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	7d1b      	ldrb	r3, [r3, #20]
 800cc4e:	b25b      	sxtb	r3, r3
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	da15      	bge.n	800cc80 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	7858      	ldrb	r0, [r3, #1]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6a1a      	ldr	r2, [r3, #32]
 800cc62:	2301      	movs	r3, #1
 800cc64:	f7fd ffba 	bl	800abdc <disk_write>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d001      	beq.n	800cc72 <f_sync+0x54>
 800cc6e:	2301      	movs	r3, #1
 800cc70:	e04f      	b.n	800cd12 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	7d1b      	ldrb	r3, [r3, #20]
 800cc76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc7a:	b2da      	uxtb	r2, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cc80:	f7fa ff50 	bl	8007b24 <get_fattime>
 800cc84:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	4610      	mov	r0, r2
 800cc90:	f7fe fa92 	bl	800b1b8 <move_window>
 800cc94:	4603      	mov	r3, r0
 800cc96:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cc98:	7dfb      	ldrb	r3, [r7, #23]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d138      	bne.n	800cd10 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	330b      	adds	r3, #11
 800cca8:	781a      	ldrb	r2, [r3, #0]
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	330b      	adds	r3, #11
 800ccae:	f042 0220 	orr.w	r2, r2, #32
 800ccb2:	b2d2      	uxtb	r2, r2
 800ccb4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6818      	ldr	r0, [r3, #0]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	68f9      	ldr	r1, [r7, #12]
 800ccc2:	f7fe ff9f 	bl	800bc04 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	f103 021c 	add.w	r2, r3, #28
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	4610      	mov	r0, r2
 800ccd4:	f7fe f816 	bl	800ad04 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	3316      	adds	r3, #22
 800ccdc:	6939      	ldr	r1, [r7, #16]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7fe f810 	bl	800ad04 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	3312      	adds	r3, #18
 800cce8:	2100      	movs	r1, #0
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fd ffef 	bl	800acce <st_word>
					fs->wflag = 1;
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7fe fa8b 	bl	800b214 <sync_fs>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	7d1b      	ldrb	r3, [r3, #20]
 800cd06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd0a:	b2da      	uxtb	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cd10:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3718      	adds	r7, #24
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b084      	sub	sp, #16
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f7ff ff7b 	bl	800cc1e <f_sync>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cd2c:	7bfb      	ldrb	r3, [r7, #15]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d118      	bne.n	800cd64 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f107 0208 	add.w	r2, r7, #8
 800cd38:	4611      	mov	r1, r2
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7ff fbf6 	bl	800c52c <validate>
 800cd40:	4603      	mov	r3, r0
 800cd42:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d10c      	bne.n	800cd64 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	691b      	ldr	r3, [r3, #16]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7fe f98e 	bl	800b070 <dec_lock>
 800cd54:	4603      	mov	r3, r0
 800cd56:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cd58:	7bfb      	ldrb	r3, [r7, #15]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d102      	bne.n	800cd64 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2200      	movs	r2, #0
 800cd62:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cd64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b090      	sub	sp, #64	; 0x40
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
 800cd76:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f107 0208 	add.w	r2, r7, #8
 800cd7e:	4611      	mov	r1, r2
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7ff fbd3 	bl	800c52c <validate>
 800cd86:	4603      	mov	r3, r0
 800cd88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cd8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d103      	bne.n	800cd9c <f_lseek+0x2e>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	7d5b      	ldrb	r3, [r3, #21]
 800cd98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cd9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d002      	beq.n	800cdaa <f_lseek+0x3c>
 800cda4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cda8:	e1e6      	b.n	800d178 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	f000 80d1 	beq.w	800cf56 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdba:	d15a      	bne.n	800ce72 <f_lseek+0x104>
			tbl = fp->cltbl;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc4:	1d1a      	adds	r2, r3, #4
 800cdc6:	627a      	str	r2, [r7, #36]	; 0x24
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	617b      	str	r3, [r7, #20]
 800cdcc:	2302      	movs	r3, #2
 800cdce:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d03a      	beq.n	800ce52 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdde:	613b      	str	r3, [r7, #16]
 800cde0:	2300      	movs	r3, #0
 800cde2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde6:	3302      	adds	r3, #2
 800cde8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800cdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdec:	60fb      	str	r3, [r7, #12]
 800cdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7fe fa98 	bl	800b32e <get_fat>
 800cdfe:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ce00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d804      	bhi.n	800ce10 <f_lseek+0xa2>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2202      	movs	r2, #2
 800ce0a:	755a      	strb	r2, [r3, #21]
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	e1b3      	b.n	800d178 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce16:	d104      	bne.n	800ce22 <f_lseek+0xb4>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	755a      	strb	r2, [r3, #21]
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e1aa      	b.n	800d178 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	3301      	adds	r3, #1
 800ce26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d0de      	beq.n	800cdea <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ce2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d809      	bhi.n	800ce48 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ce34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce36:	1d1a      	adds	r2, r3, #4
 800ce38:	627a      	str	r2, [r7, #36]	; 0x24
 800ce3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce3c:	601a      	str	r2, [r3, #0]
 800ce3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce40:	1d1a      	adds	r2, r3, #4
 800ce42:	627a      	str	r2, [r7, #36]	; 0x24
 800ce44:	693a      	ldr	r2, [r7, #16]
 800ce46:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	695b      	ldr	r3, [r3, #20]
 800ce4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d3c4      	bcc.n	800cddc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce58:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ce5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d803      	bhi.n	800ce6a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ce62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce64:	2200      	movs	r2, #0
 800ce66:	601a      	str	r2, [r3, #0]
 800ce68:	e184      	b.n	800d174 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ce6a:	2311      	movs	r3, #17
 800ce6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ce70:	e180      	b.n	800d174 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	68db      	ldr	r3, [r3, #12]
 800ce76:	683a      	ldr	r2, [r7, #0]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d902      	bls.n	800ce82 <f_lseek+0x114>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	683a      	ldr	r2, [r7, #0]
 800ce86:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	f000 8172 	beq.w	800d174 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	3b01      	subs	r3, #1
 800ce94:	4619      	mov	r1, r3
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f7fe fcda 	bl	800b850 <clmt_clust>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800cea2:	68ba      	ldr	r2, [r7, #8]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	69db      	ldr	r3, [r3, #28]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	4610      	mov	r0, r2
 800ceac:	f7fe fa20 	bl	800b2f0 <clust2sect>
 800ceb0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d104      	bne.n	800cec2 <f_lseek+0x154>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2202      	movs	r2, #2
 800cebc:	755a      	strb	r2, [r3, #21]
 800cebe:	2302      	movs	r3, #2
 800cec0:	e15a      	b.n	800d178 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	3b01      	subs	r3, #1
 800cec6:	0a5b      	lsrs	r3, r3, #9
 800cec8:	68ba      	ldr	r2, [r7, #8]
 800ceca:	8952      	ldrh	r2, [r2, #10]
 800cecc:	3a01      	subs	r2, #1
 800cece:	4013      	ands	r3, r2
 800ced0:	69ba      	ldr	r2, [r7, #24]
 800ced2:	4413      	add	r3, r2
 800ced4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	699b      	ldr	r3, [r3, #24]
 800ceda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f000 8148 	beq.w	800d174 <f_lseek+0x406>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6a1b      	ldr	r3, [r3, #32]
 800cee8:	69ba      	ldr	r2, [r7, #24]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	f000 8142 	beq.w	800d174 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	7d1b      	ldrb	r3, [r3, #20]
 800cef4:	b25b      	sxtb	r3, r3
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	da18      	bge.n	800cf2c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	7858      	ldrb	r0, [r3, #1]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6a1a      	ldr	r2, [r3, #32]
 800cf08:	2301      	movs	r3, #1
 800cf0a:	f7fd fe67 	bl	800abdc <disk_write>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d004      	beq.n	800cf1e <f_lseek+0x1b0>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2201      	movs	r2, #1
 800cf18:	755a      	strb	r2, [r3, #21]
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e12c      	b.n	800d178 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	7d1b      	ldrb	r3, [r3, #20]
 800cf22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf26:	b2da      	uxtb	r2, r3
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	7858      	ldrb	r0, [r3, #1]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf36:	2301      	movs	r3, #1
 800cf38:	69ba      	ldr	r2, [r7, #24]
 800cf3a:	f7fd fe2f 	bl	800ab9c <disk_read>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d004      	beq.n	800cf4e <f_lseek+0x1e0>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2201      	movs	r2, #1
 800cf48:	755a      	strb	r2, [r3, #21]
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	e114      	b.n	800d178 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	69ba      	ldr	r2, [r7, #24]
 800cf52:	621a      	str	r2, [r3, #32]
 800cf54:	e10e      	b.n	800d174 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	683a      	ldr	r2, [r7, #0]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d908      	bls.n	800cf72 <f_lseek+0x204>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	7d1b      	ldrb	r3, [r3, #20]
 800cf64:	f003 0302 	and.w	r3, r3, #2
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d102      	bne.n	800cf72 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	699b      	ldr	r3, [r3, #24]
 800cf76:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	637b      	str	r3, [r7, #52]	; 0x34
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf80:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f000 80a7 	beq.w	800d0d8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	895b      	ldrh	r3, [r3, #10]
 800cf8e:	025b      	lsls	r3, r3, #9
 800cf90:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800cf92:	6a3b      	ldr	r3, [r7, #32]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d01b      	beq.n	800cfd0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	1e5a      	subs	r2, r3, #1
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	fbb2 f2f3 	udiv	r2, r2, r3
 800cfa2:	6a3b      	ldr	r3, [r7, #32]
 800cfa4:	1e59      	subs	r1, r3, #1
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d30f      	bcc.n	800cfd0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cfb0:	6a3b      	ldr	r3, [r7, #32]
 800cfb2:	1e5a      	subs	r2, r3, #1
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	425b      	negs	r3, r3
 800cfb8:	401a      	ands	r2, r3
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	699b      	ldr	r3, [r3, #24]
 800cfc2:	683a      	ldr	r2, [r7, #0]
 800cfc4:	1ad3      	subs	r3, r2, r3
 800cfc6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	69db      	ldr	r3, [r3, #28]
 800cfcc:	63bb      	str	r3, [r7, #56]	; 0x38
 800cfce:	e022      	b.n	800d016 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d119      	bne.n	800d010 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2100      	movs	r1, #0
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7fe fb9d 	bl	800b720 <create_chain>
 800cfe6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d104      	bne.n	800cff8 <f_lseek+0x28a>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2202      	movs	r2, #2
 800cff2:	755a      	strb	r2, [r3, #21]
 800cff4:	2302      	movs	r3, #2
 800cff6:	e0bf      	b.n	800d178 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cffe:	d104      	bne.n	800d00a <f_lseek+0x29c>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	755a      	strb	r2, [r3, #21]
 800d006:	2301      	movs	r3, #1
 800d008:	e0b6      	b.n	800d178 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d00e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d014:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d05d      	beq.n	800d0d8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d01c:	e03a      	b.n	800d094 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	69fb      	ldr	r3, [r7, #28]
 800d022:	1ad3      	subs	r3, r2, r3
 800d024:	603b      	str	r3, [r7, #0]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	699a      	ldr	r2, [r3, #24]
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	441a      	add	r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	7d1b      	ldrb	r3, [r3, #20]
 800d036:	f003 0302 	and.w	r3, r3, #2
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00b      	beq.n	800d056 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d042:	4618      	mov	r0, r3
 800d044:	f7fe fb6c 	bl	800b720 <create_chain>
 800d048:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d108      	bne.n	800d062 <f_lseek+0x2f4>
							ofs = 0; break;
 800d050:	2300      	movs	r3, #0
 800d052:	603b      	str	r3, [r7, #0]
 800d054:	e022      	b.n	800d09c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7fe f967 	bl	800b32e <get_fat>
 800d060:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d068:	d104      	bne.n	800d074 <f_lseek+0x306>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2201      	movs	r2, #1
 800d06e:	755a      	strb	r2, [r3, #21]
 800d070:	2301      	movs	r3, #1
 800d072:	e081      	b.n	800d178 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d076:	2b01      	cmp	r3, #1
 800d078:	d904      	bls.n	800d084 <f_lseek+0x316>
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	695b      	ldr	r3, [r3, #20]
 800d07e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d080:	429a      	cmp	r2, r3
 800d082:	d304      	bcc.n	800d08e <f_lseek+0x320>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2202      	movs	r2, #2
 800d088:	755a      	strb	r2, [r3, #21]
 800d08a:	2302      	movs	r3, #2
 800d08c:	e074      	b.n	800d178 <f_lseek+0x40a>
					fp->clust = clst;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d092:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d094:	683a      	ldr	r2, [r7, #0]
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d8c0      	bhi.n	800d01e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	699a      	ldr	r2, [r3, #24]
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	441a      	add	r2, r3
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d012      	beq.n	800d0d8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7fe f91a 	bl	800b2f0 <clust2sect>
 800d0bc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d104      	bne.n	800d0ce <f_lseek+0x360>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2202      	movs	r2, #2
 800d0c8:	755a      	strb	r2, [r3, #21]
 800d0ca:	2302      	movs	r3, #2
 800d0cc:	e054      	b.n	800d178 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	0a5b      	lsrs	r3, r3, #9
 800d0d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0d4:	4413      	add	r3, r2
 800d0d6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	699a      	ldr	r2, [r3, #24]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d90a      	bls.n	800d0fa <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	699a      	ldr	r2, [r3, #24]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	7d1b      	ldrb	r3, [r3, #20]
 800d0f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0f4:	b2da      	uxtb	r2, r3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	699b      	ldr	r3, [r3, #24]
 800d0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d102:	2b00      	cmp	r3, #0
 800d104:	d036      	beq.n	800d174 <f_lseek+0x406>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6a1b      	ldr	r3, [r3, #32]
 800d10a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d031      	beq.n	800d174 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	7d1b      	ldrb	r3, [r3, #20]
 800d114:	b25b      	sxtb	r3, r3
 800d116:	2b00      	cmp	r3, #0
 800d118:	da18      	bge.n	800d14c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	7858      	ldrb	r0, [r3, #1]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6a1a      	ldr	r2, [r3, #32]
 800d128:	2301      	movs	r3, #1
 800d12a:	f7fd fd57 	bl	800abdc <disk_write>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d004      	beq.n	800d13e <f_lseek+0x3d0>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2201      	movs	r2, #1
 800d138:	755a      	strb	r2, [r3, #21]
 800d13a:	2301      	movs	r3, #1
 800d13c:	e01c      	b.n	800d178 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	7d1b      	ldrb	r3, [r3, #20]
 800d142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d146:	b2da      	uxtb	r2, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	7858      	ldrb	r0, [r3, #1]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d156:	2301      	movs	r3, #1
 800d158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d15a:	f7fd fd1f 	bl	800ab9c <disk_read>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d004      	beq.n	800d16e <f_lseek+0x400>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	755a      	strb	r2, [r3, #21]
 800d16a:	2301      	movs	r3, #1
 800d16c:	e004      	b.n	800d178 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d172:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d174:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3740      	adds	r7, #64	; 0x40
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d180:	b480      	push	{r7}
 800d182:	b087      	sub	sp, #28
 800d184:	af00      	add	r7, sp, #0
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	4613      	mov	r3, r2
 800d18c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d18e:	2301      	movs	r3, #1
 800d190:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d192:	2300      	movs	r3, #0
 800d194:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d196:	4b1f      	ldr	r3, [pc, #124]	; (800d214 <FATFS_LinkDriverEx+0x94>)
 800d198:	7a5b      	ldrb	r3, [r3, #9]
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d131      	bne.n	800d204 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d1a0:	4b1c      	ldr	r3, [pc, #112]	; (800d214 <FATFS_LinkDriverEx+0x94>)
 800d1a2:	7a5b      	ldrb	r3, [r3, #9]
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	4b1a      	ldr	r3, [pc, #104]	; (800d214 <FATFS_LinkDriverEx+0x94>)
 800d1aa:	2100      	movs	r1, #0
 800d1ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d1ae:	4b19      	ldr	r3, [pc, #100]	; (800d214 <FATFS_LinkDriverEx+0x94>)
 800d1b0:	7a5b      	ldrb	r3, [r3, #9]
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	4a17      	ldr	r2, [pc, #92]	; (800d214 <FATFS_LinkDriverEx+0x94>)
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	4413      	add	r3, r2
 800d1ba:	68fa      	ldr	r2, [r7, #12]
 800d1bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d1be:	4b15      	ldr	r3, [pc, #84]	; (800d214 <FATFS_LinkDriverEx+0x94>)
 800d1c0:	7a5b      	ldrb	r3, [r3, #9]
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	4b13      	ldr	r3, [pc, #76]	; (800d214 <FATFS_LinkDriverEx+0x94>)
 800d1c8:	4413      	add	r3, r2
 800d1ca:	79fa      	ldrb	r2, [r7, #7]
 800d1cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d1ce:	4b11      	ldr	r3, [pc, #68]	; (800d214 <FATFS_LinkDriverEx+0x94>)
 800d1d0:	7a5b      	ldrb	r3, [r3, #9]
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	1c5a      	adds	r2, r3, #1
 800d1d6:	b2d1      	uxtb	r1, r2
 800d1d8:	4a0e      	ldr	r2, [pc, #56]	; (800d214 <FATFS_LinkDriverEx+0x94>)
 800d1da:	7251      	strb	r1, [r2, #9]
 800d1dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d1de:	7dbb      	ldrb	r3, [r7, #22]
 800d1e0:	3330      	adds	r3, #48	; 0x30
 800d1e2:	b2da      	uxtb	r2, r3
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	223a      	movs	r2, #58	; 0x3a
 800d1ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	3302      	adds	r3, #2
 800d1f4:	222f      	movs	r2, #47	; 0x2f
 800d1f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	3303      	adds	r3, #3
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d200:	2300      	movs	r3, #0
 800d202:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d204:	7dfb      	ldrb	r3, [r7, #23]
}
 800d206:	4618      	mov	r0, r3
 800d208:	371c      	adds	r7, #28
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr
 800d212:	bf00      	nop
 800d214:	20001374 	.word	0x20001374

0800d218 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d222:	2200      	movs	r2, #0
 800d224:	6839      	ldr	r1, [r7, #0]
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f7ff ffaa 	bl	800d180 <FATFS_LinkDriverEx>
 800d22c:	4603      	mov	r3, r0
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3708      	adds	r7, #8
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
	...

0800d238 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d23c:	2201      	movs	r2, #1
 800d23e:	490e      	ldr	r1, [pc, #56]	; (800d278 <MX_USB_HOST_Init+0x40>)
 800d240:	480e      	ldr	r0, [pc, #56]	; (800d27c <MX_USB_HOST_Init+0x44>)
 800d242:	f7fc f913 	bl	800946c <USBH_Init>
 800d246:	4603      	mov	r3, r0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d001      	beq.n	800d250 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d24c:	f7f3 fff8 	bl	8001240 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d250:	490b      	ldr	r1, [pc, #44]	; (800d280 <MX_USB_HOST_Init+0x48>)
 800d252:	480a      	ldr	r0, [pc, #40]	; (800d27c <MX_USB_HOST_Init+0x44>)
 800d254:	f7fc f998 	bl	8009588 <USBH_RegisterClass>
 800d258:	4603      	mov	r3, r0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d001      	beq.n	800d262 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d25e:	f7f3 ffef 	bl	8001240 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d262:	4806      	ldr	r0, [pc, #24]	; (800d27c <MX_USB_HOST_Init+0x44>)
 800d264:	f7fc fa1c 	bl	80096a0 <USBH_Start>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d001      	beq.n	800d272 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d26e:	f7f3 ffe7 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d272:	bf00      	nop
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop
 800d278:	0800d299 	.word	0x0800d299
 800d27c:	200018f4 	.word	0x200018f4
 800d280:	2000000c 	.word	0x2000000c

0800d284 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d288:	4802      	ldr	r0, [pc, #8]	; (800d294 <MX_USB_HOST_Process+0x10>)
 800d28a:	f7fc fa19 	bl	80096c0 <USBH_Process>
}
 800d28e:	bf00      	nop
 800d290:	bd80      	pop	{r7, pc}
 800d292:	bf00      	nop
 800d294:	200018f4 	.word	0x200018f4

0800d298 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d298:	b480      	push	{r7}
 800d29a:	b083      	sub	sp, #12
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	460b      	mov	r3, r1
 800d2a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d2a4:	78fb      	ldrb	r3, [r7, #3]
 800d2a6:	3b01      	subs	r3, #1
 800d2a8:	2b04      	cmp	r3, #4
 800d2aa:	d819      	bhi.n	800d2e0 <USBH_UserProcess+0x48>
 800d2ac:	a201      	add	r2, pc, #4	; (adr r2, 800d2b4 <USBH_UserProcess+0x1c>)
 800d2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b2:	bf00      	nop
 800d2b4:	0800d2e1 	.word	0x0800d2e1
 800d2b8:	0800d2d1 	.word	0x0800d2d1
 800d2bc:	0800d2e1 	.word	0x0800d2e1
 800d2c0:	0800d2d9 	.word	0x0800d2d9
 800d2c4:	0800d2c9 	.word	0x0800d2c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d2c8:	4b09      	ldr	r3, [pc, #36]	; (800d2f0 <USBH_UserProcess+0x58>)
 800d2ca:	2203      	movs	r2, #3
 800d2cc:	701a      	strb	r2, [r3, #0]
  break;
 800d2ce:	e008      	b.n	800d2e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d2d0:	4b07      	ldr	r3, [pc, #28]	; (800d2f0 <USBH_UserProcess+0x58>)
 800d2d2:	2202      	movs	r2, #2
 800d2d4:	701a      	strb	r2, [r3, #0]
  break;
 800d2d6:	e004      	b.n	800d2e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d2d8:	4b05      	ldr	r3, [pc, #20]	; (800d2f0 <USBH_UserProcess+0x58>)
 800d2da:	2201      	movs	r2, #1
 800d2dc:	701a      	strb	r2, [r3, #0]
  break;
 800d2de:	e000      	b.n	800d2e2 <USBH_UserProcess+0x4a>

  default:
  break;
 800d2e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d2e2:	bf00      	nop
 800d2e4:	370c      	adds	r7, #12
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr
 800d2ee:	bf00      	nop
 800d2f0:	20001380 	.word	0x20001380

0800d2f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b08a      	sub	sp, #40	; 0x28
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2fc:	f107 0314 	add.w	r3, r7, #20
 800d300:	2200      	movs	r2, #0
 800d302:	601a      	str	r2, [r3, #0]
 800d304:	605a      	str	r2, [r3, #4]
 800d306:	609a      	str	r2, [r3, #8]
 800d308:	60da      	str	r2, [r3, #12]
 800d30a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d314:	d147      	bne.n	800d3a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d316:	2300      	movs	r3, #0
 800d318:	613b      	str	r3, [r7, #16]
 800d31a:	4b25      	ldr	r3, [pc, #148]	; (800d3b0 <HAL_HCD_MspInit+0xbc>)
 800d31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d31e:	4a24      	ldr	r2, [pc, #144]	; (800d3b0 <HAL_HCD_MspInit+0xbc>)
 800d320:	f043 0301 	orr.w	r3, r3, #1
 800d324:	6313      	str	r3, [r2, #48]	; 0x30
 800d326:	4b22      	ldr	r3, [pc, #136]	; (800d3b0 <HAL_HCD_MspInit+0xbc>)
 800d328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d32a:	f003 0301 	and.w	r3, r3, #1
 800d32e:	613b      	str	r3, [r7, #16]
 800d330:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d332:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d338:	2300      	movs	r3, #0
 800d33a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d33c:	2300      	movs	r3, #0
 800d33e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d340:	f107 0314 	add.w	r3, r7, #20
 800d344:	4619      	mov	r1, r3
 800d346:	481b      	ldr	r0, [pc, #108]	; (800d3b4 <HAL_HCD_MspInit+0xc0>)
 800d348:	f7f4 fee6 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d34c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d352:	2302      	movs	r3, #2
 800d354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d356:	2300      	movs	r3, #0
 800d358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d35a:	2303      	movs	r3, #3
 800d35c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d35e:	230a      	movs	r3, #10
 800d360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d362:	f107 0314 	add.w	r3, r7, #20
 800d366:	4619      	mov	r1, r3
 800d368:	4812      	ldr	r0, [pc, #72]	; (800d3b4 <HAL_HCD_MspInit+0xc0>)
 800d36a:	f7f4 fed5 	bl	8002118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d36e:	4b10      	ldr	r3, [pc, #64]	; (800d3b0 <HAL_HCD_MspInit+0xbc>)
 800d370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d372:	4a0f      	ldr	r2, [pc, #60]	; (800d3b0 <HAL_HCD_MspInit+0xbc>)
 800d374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d378:	6353      	str	r3, [r2, #52]	; 0x34
 800d37a:	2300      	movs	r3, #0
 800d37c:	60fb      	str	r3, [r7, #12]
 800d37e:	4b0c      	ldr	r3, [pc, #48]	; (800d3b0 <HAL_HCD_MspInit+0xbc>)
 800d380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d382:	4a0b      	ldr	r2, [pc, #44]	; (800d3b0 <HAL_HCD_MspInit+0xbc>)
 800d384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d388:	6453      	str	r3, [r2, #68]	; 0x44
 800d38a:	4b09      	ldr	r3, [pc, #36]	; (800d3b0 <HAL_HCD_MspInit+0xbc>)
 800d38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d38e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d392:	60fb      	str	r3, [r7, #12]
 800d394:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d396:	2200      	movs	r2, #0
 800d398:	2100      	movs	r1, #0
 800d39a:	2043      	movs	r0, #67	; 0x43
 800d39c:	f7f4 faa5 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d3a0:	2043      	movs	r0, #67	; 0x43
 800d3a2:	f7f4 fabe 	bl	8001922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d3a6:	bf00      	nop
 800d3a8:	3728      	adds	r7, #40	; 0x28
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	40023800 	.word	0x40023800
 800d3b4:	40020000 	.word	0x40020000

0800d3b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7fc fd4d 	bl	8009e66 <USBH_LL_IncTimer>
}
 800d3cc:	bf00      	nop
 800d3ce:	3708      	adds	r7, #8
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7fc fd85 	bl	8009ef2 <USBH_LL_Connect>
}
 800d3e8:	bf00      	nop
 800d3ea:	3708      	adds	r7, #8
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fc fd8e 	bl	8009f20 <USBH_LL_Disconnect>
}
 800d404:	bf00      	nop
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	70fb      	strb	r3, [r7, #3]
 800d418:	4613      	mov	r3, r2
 800d41a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d41c:	bf00      	nop
 800d41e:	370c      	adds	r7, #12
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr

0800d428 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d436:	4618      	mov	r0, r3
 800d438:	f7fc fd3f 	bl	8009eba <USBH_LL_PortEnabled>
}
 800d43c:	bf00      	nop
 800d43e:	3708      	adds	r7, #8
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d452:	4618      	mov	r0, r3
 800d454:	f7fc fd3f 	bl	8009ed6 <USBH_LL_PortDisabled>
}
 800d458:	bf00      	nop
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d12a      	bne.n	800d4c8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d472:	4a18      	ldr	r2, [pc, #96]	; (800d4d4 <USBH_LL_Init+0x74>)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4a15      	ldr	r2, [pc, #84]	; (800d4d4 <USBH_LL_Init+0x74>)
 800d47e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d482:	4b14      	ldr	r3, [pc, #80]	; (800d4d4 <USBH_LL_Init+0x74>)
 800d484:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d488:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d48a:	4b12      	ldr	r3, [pc, #72]	; (800d4d4 <USBH_LL_Init+0x74>)
 800d48c:	2208      	movs	r2, #8
 800d48e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d490:	4b10      	ldr	r3, [pc, #64]	; (800d4d4 <USBH_LL_Init+0x74>)
 800d492:	2201      	movs	r2, #1
 800d494:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d496:	4b0f      	ldr	r3, [pc, #60]	; (800d4d4 <USBH_LL_Init+0x74>)
 800d498:	2200      	movs	r2, #0
 800d49a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d49c:	4b0d      	ldr	r3, [pc, #52]	; (800d4d4 <USBH_LL_Init+0x74>)
 800d49e:	2202      	movs	r2, #2
 800d4a0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d4a2:	4b0c      	ldr	r3, [pc, #48]	; (800d4d4 <USBH_LL_Init+0x74>)
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d4a8:	480a      	ldr	r0, [pc, #40]	; (800d4d4 <USBH_LL_Init+0x74>)
 800d4aa:	f7f5 f802 	bl	80024b2 <HAL_HCD_Init>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d001      	beq.n	800d4b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d4b4:	f7f3 fec4 	bl	8001240 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d4b8:	4806      	ldr	r0, [pc, #24]	; (800d4d4 <USBH_LL_Init+0x74>)
 800d4ba:	f7f5 fbe6 	bl	8002c8a <HAL_HCD_GetCurrentFrame>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f7fc fcc0 	bl	8009e48 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3708      	adds	r7, #8
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	20001ccc 	.word	0x20001ccc

0800d4d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7f5 fb55 	bl	8002b9e <HAL_HCD_Start>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d4f8:	7bfb      	ldrb	r3, [r7, #15]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f000 f982 	bl	800d804 <USBH_Get_USB_Status>
 800d500:	4603      	mov	r3, r0
 800d502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d504:	7bbb      	ldrb	r3, [r7, #14]
}
 800d506:	4618      	mov	r0, r3
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b084      	sub	sp, #16
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d516:	2300      	movs	r3, #0
 800d518:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d51a:	2300      	movs	r3, #0
 800d51c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d524:	4618      	mov	r0, r3
 800d526:	f7f5 fb5d 	bl	8002be4 <HAL_HCD_Stop>
 800d52a:	4603      	mov	r3, r0
 800d52c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d52e:	7bfb      	ldrb	r3, [r7, #15]
 800d530:	4618      	mov	r0, r3
 800d532:	f000 f967 	bl	800d804 <USBH_Get_USB_Status>
 800d536:	4603      	mov	r3, r0
 800d538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d53a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3710      	adds	r7, #16
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d54c:	2301      	movs	r3, #1
 800d54e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d556:	4618      	mov	r0, r3
 800d558:	f7f5 fba5 	bl	8002ca6 <HAL_HCD_GetCurrentSpeed>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b02      	cmp	r3, #2
 800d560:	d00c      	beq.n	800d57c <USBH_LL_GetSpeed+0x38>
 800d562:	2b02      	cmp	r3, #2
 800d564:	d80d      	bhi.n	800d582 <USBH_LL_GetSpeed+0x3e>
 800d566:	2b00      	cmp	r3, #0
 800d568:	d002      	beq.n	800d570 <USBH_LL_GetSpeed+0x2c>
 800d56a:	2b01      	cmp	r3, #1
 800d56c:	d003      	beq.n	800d576 <USBH_LL_GetSpeed+0x32>
 800d56e:	e008      	b.n	800d582 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d570:	2300      	movs	r3, #0
 800d572:	73fb      	strb	r3, [r7, #15]
    break;
 800d574:	e008      	b.n	800d588 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d576:	2301      	movs	r3, #1
 800d578:	73fb      	strb	r3, [r7, #15]
    break;
 800d57a:	e005      	b.n	800d588 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d57c:	2302      	movs	r3, #2
 800d57e:	73fb      	strb	r3, [r7, #15]
    break;
 800d580:	e002      	b.n	800d588 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d582:	2301      	movs	r3, #1
 800d584:	73fb      	strb	r3, [r7, #15]
    break;
 800d586:	bf00      	nop
  }
  return  speed;
 800d588:	7bfb      	ldrb	r3, [r7, #15]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3710      	adds	r7, #16
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d592:	b580      	push	{r7, lr}
 800d594:	b084      	sub	sp, #16
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d59a:	2300      	movs	r3, #0
 800d59c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7f5 fb38 	bl	8002c1e <HAL_HCD_ResetPort>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d5b2:	7bfb      	ldrb	r3, [r7, #15]
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f000 f925 	bl	800d804 <USBH_Get_USB_Status>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5be:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d5da:	78fa      	ldrb	r2, [r7, #3]
 800d5dc:	4611      	mov	r1, r2
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7f5 fb3f 	bl	8002c62 <HAL_HCD_HC_GetXferCount>
 800d5e4:	4603      	mov	r3, r0
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3708      	adds	r7, #8
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}

0800d5ee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d5ee:	b590      	push	{r4, r7, lr}
 800d5f0:	b089      	sub	sp, #36	; 0x24
 800d5f2:	af04      	add	r7, sp, #16
 800d5f4:	6078      	str	r0, [r7, #4]
 800d5f6:	4608      	mov	r0, r1
 800d5f8:	4611      	mov	r1, r2
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	70fb      	strb	r3, [r7, #3]
 800d600:	460b      	mov	r3, r1
 800d602:	70bb      	strb	r3, [r7, #2]
 800d604:	4613      	mov	r3, r2
 800d606:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d608:	2300      	movs	r3, #0
 800d60a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d60c:	2300      	movs	r3, #0
 800d60e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d616:	787c      	ldrb	r4, [r7, #1]
 800d618:	78ba      	ldrb	r2, [r7, #2]
 800d61a:	78f9      	ldrb	r1, [r7, #3]
 800d61c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d61e:	9302      	str	r3, [sp, #8]
 800d620:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d624:	9301      	str	r3, [sp, #4]
 800d626:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d62a:	9300      	str	r3, [sp, #0]
 800d62c:	4623      	mov	r3, r4
 800d62e:	f7f4 ffa2 	bl	8002576 <HAL_HCD_HC_Init>
 800d632:	4603      	mov	r3, r0
 800d634:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d636:	7bfb      	ldrb	r3, [r7, #15]
 800d638:	4618      	mov	r0, r3
 800d63a:	f000 f8e3 	bl	800d804 <USBH_Get_USB_Status>
 800d63e:	4603      	mov	r3, r0
 800d640:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d642:	7bbb      	ldrb	r3, [r7, #14]
}
 800d644:	4618      	mov	r0, r3
 800d646:	3714      	adds	r7, #20
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd90      	pop	{r4, r7, pc}

0800d64c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b084      	sub	sp, #16
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	460b      	mov	r3, r1
 800d656:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d658:	2300      	movs	r3, #0
 800d65a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d65c:	2300      	movs	r3, #0
 800d65e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d666:	78fa      	ldrb	r2, [r7, #3]
 800d668:	4611      	mov	r1, r2
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7f5 f812 	bl	8002694 <HAL_HCD_HC_Halt>
 800d670:	4603      	mov	r3, r0
 800d672:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d674:	7bfb      	ldrb	r3, [r7, #15]
 800d676:	4618      	mov	r0, r3
 800d678:	f000 f8c4 	bl	800d804 <USBH_Get_USB_Status>
 800d67c:	4603      	mov	r3, r0
 800d67e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d680:	7bbb      	ldrb	r3, [r7, #14]
}
 800d682:	4618      	mov	r0, r3
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d68a:	b590      	push	{r4, r7, lr}
 800d68c:	b089      	sub	sp, #36	; 0x24
 800d68e:	af04      	add	r7, sp, #16
 800d690:	6078      	str	r0, [r7, #4]
 800d692:	4608      	mov	r0, r1
 800d694:	4611      	mov	r1, r2
 800d696:	461a      	mov	r2, r3
 800d698:	4603      	mov	r3, r0
 800d69a:	70fb      	strb	r3, [r7, #3]
 800d69c:	460b      	mov	r3, r1
 800d69e:	70bb      	strb	r3, [r7, #2]
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d6b2:	787c      	ldrb	r4, [r7, #1]
 800d6b4:	78ba      	ldrb	r2, [r7, #2]
 800d6b6:	78f9      	ldrb	r1, [r7, #3]
 800d6b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d6bc:	9303      	str	r3, [sp, #12]
 800d6be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d6c0:	9302      	str	r3, [sp, #8]
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c4:	9301      	str	r3, [sp, #4]
 800d6c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d6ca:	9300      	str	r3, [sp, #0]
 800d6cc:	4623      	mov	r3, r4
 800d6ce:	f7f5 f805 	bl	80026dc <HAL_HCD_HC_SubmitRequest>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d6d6:	7bfb      	ldrb	r3, [r7, #15]
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f000 f893 	bl	800d804 <USBH_Get_USB_Status>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3714      	adds	r7, #20
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd90      	pop	{r4, r7, pc}

0800d6ec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d6fe:	78fa      	ldrb	r2, [r7, #3]
 800d700:	4611      	mov	r1, r2
 800d702:	4618      	mov	r0, r3
 800d704:	f7f5 fa99 	bl	8002c3a <HAL_HCD_HC_GetURBState>
 800d708:	4603      	mov	r3, r0
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3708      	adds	r7, #8
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}

0800d712 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d712:	b580      	push	{r7, lr}
 800d714:	b082      	sub	sp, #8
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
 800d71a:	460b      	mov	r3, r1
 800d71c:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800d71e:	20c8      	movs	r0, #200	; 0xc8
 800d720:	f7f3 ffe4 	bl	80016ec <HAL_Delay>
  return USBH_OK;
 800d724:	2300      	movs	r3, #0
}
 800d726:	4618      	mov	r0, r3
 800d728:	3708      	adds	r7, #8
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d72e:	b480      	push	{r7}
 800d730:	b085      	sub	sp, #20
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
 800d736:	460b      	mov	r3, r1
 800d738:	70fb      	strb	r3, [r7, #3]
 800d73a:	4613      	mov	r3, r2
 800d73c:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d744:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d746:	78fb      	ldrb	r3, [r7, #3]
 800d748:	68fa      	ldr	r2, [r7, #12]
 800d74a:	212c      	movs	r1, #44	; 0x2c
 800d74c:	fb01 f303 	mul.w	r3, r1, r3
 800d750:	4413      	add	r3, r2
 800d752:	333b      	adds	r3, #59	; 0x3b
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d009      	beq.n	800d76e <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d75a:	78fb      	ldrb	r3, [r7, #3]
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	212c      	movs	r1, #44	; 0x2c
 800d760:	fb01 f303 	mul.w	r3, r1, r3
 800d764:	4413      	add	r3, r2
 800d766:	3354      	adds	r3, #84	; 0x54
 800d768:	78ba      	ldrb	r2, [r7, #2]
 800d76a:	701a      	strb	r2, [r3, #0]
 800d76c:	e008      	b.n	800d780 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d76e:	78fb      	ldrb	r3, [r7, #3]
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	212c      	movs	r1, #44	; 0x2c
 800d774:	fb01 f303 	mul.w	r3, r1, r3
 800d778:	4413      	add	r3, r2
 800d77a:	3355      	adds	r3, #85	; 0x55
 800d77c:	78ba      	ldrb	r2, [r7, #2]
 800d77e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d780:	2300      	movs	r3, #0
}
 800d782:	4618      	mov	r0, r3
 800d784:	3714      	adds	r7, #20
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr

0800d78e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d78e:	b480      	push	{r7}
 800d790:	b085      	sub	sp, #20
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
 800d796:	460b      	mov	r3, r1
 800d798:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d79a:	2300      	movs	r3, #0
 800d79c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d7a4:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d7a6:	78fb      	ldrb	r3, [r7, #3]
 800d7a8:	68ba      	ldr	r2, [r7, #8]
 800d7aa:	212c      	movs	r1, #44	; 0x2c
 800d7ac:	fb01 f303 	mul.w	r3, r1, r3
 800d7b0:	4413      	add	r3, r2
 800d7b2:	333b      	adds	r3, #59	; 0x3b
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d009      	beq.n	800d7ce <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d7ba:	78fb      	ldrb	r3, [r7, #3]
 800d7bc:	68ba      	ldr	r2, [r7, #8]
 800d7be:	212c      	movs	r1, #44	; 0x2c
 800d7c0:	fb01 f303 	mul.w	r3, r1, r3
 800d7c4:	4413      	add	r3, r2
 800d7c6:	3354      	adds	r3, #84	; 0x54
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	73fb      	strb	r3, [r7, #15]
 800d7cc:	e008      	b.n	800d7e0 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d7ce:	78fb      	ldrb	r3, [r7, #3]
 800d7d0:	68ba      	ldr	r2, [r7, #8]
 800d7d2:	212c      	movs	r1, #44	; 0x2c
 800d7d4:	fb01 f303 	mul.w	r3, r1, r3
 800d7d8:	4413      	add	r3, r2
 800d7da:	3355      	adds	r3, #85	; 0x55
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3714      	adds	r7, #20
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr

0800d7ee <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b082      	sub	sp, #8
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f7f3 ff78 	bl	80016ec <HAL_Delay>
}
 800d7fc:	bf00      	nop
 800d7fe:	3708      	adds	r7, #8
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d804:	b480      	push	{r7}
 800d806:	b085      	sub	sp, #20
 800d808:	af00      	add	r7, sp, #0
 800d80a:	4603      	mov	r3, r0
 800d80c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d80e:	2300      	movs	r3, #0
 800d810:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d812:	79fb      	ldrb	r3, [r7, #7]
 800d814:	2b03      	cmp	r3, #3
 800d816:	d817      	bhi.n	800d848 <USBH_Get_USB_Status+0x44>
 800d818:	a201      	add	r2, pc, #4	; (adr r2, 800d820 <USBH_Get_USB_Status+0x1c>)
 800d81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d81e:	bf00      	nop
 800d820:	0800d831 	.word	0x0800d831
 800d824:	0800d837 	.word	0x0800d837
 800d828:	0800d83d 	.word	0x0800d83d
 800d82c:	0800d843 	.word	0x0800d843
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d830:	2300      	movs	r3, #0
 800d832:	73fb      	strb	r3, [r7, #15]
    break;
 800d834:	e00b      	b.n	800d84e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d836:	2302      	movs	r3, #2
 800d838:	73fb      	strb	r3, [r7, #15]
    break;
 800d83a:	e008      	b.n	800d84e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d83c:	2301      	movs	r3, #1
 800d83e:	73fb      	strb	r3, [r7, #15]
    break;
 800d840:	e005      	b.n	800d84e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d842:	2302      	movs	r3, #2
 800d844:	73fb      	strb	r3, [r7, #15]
    break;
 800d846:	e002      	b.n	800d84e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d848:	2302      	movs	r3, #2
 800d84a:	73fb      	strb	r3, [r7, #15]
    break;
 800d84c:	bf00      	nop
  }
  return usb_status;
 800d84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d850:	4618      	mov	r0, r3
 800d852:	3714      	adds	r7, #20
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <__errno>:
 800d85c:	4b01      	ldr	r3, [pc, #4]	; (800d864 <__errno+0x8>)
 800d85e:	6818      	ldr	r0, [r3, #0]
 800d860:	4770      	bx	lr
 800d862:	bf00      	nop
 800d864:	2000002c 	.word	0x2000002c

0800d868 <__libc_init_array>:
 800d868:	b570      	push	{r4, r5, r6, lr}
 800d86a:	4d0d      	ldr	r5, [pc, #52]	; (800d8a0 <__libc_init_array+0x38>)
 800d86c:	4c0d      	ldr	r4, [pc, #52]	; (800d8a4 <__libc_init_array+0x3c>)
 800d86e:	1b64      	subs	r4, r4, r5
 800d870:	10a4      	asrs	r4, r4, #2
 800d872:	2600      	movs	r6, #0
 800d874:	42a6      	cmp	r6, r4
 800d876:	d109      	bne.n	800d88c <__libc_init_array+0x24>
 800d878:	4d0b      	ldr	r5, [pc, #44]	; (800d8a8 <__libc_init_array+0x40>)
 800d87a:	4c0c      	ldr	r4, [pc, #48]	; (800d8ac <__libc_init_array+0x44>)
 800d87c:	f000 f906 	bl	800da8c <_init>
 800d880:	1b64      	subs	r4, r4, r5
 800d882:	10a4      	asrs	r4, r4, #2
 800d884:	2600      	movs	r6, #0
 800d886:	42a6      	cmp	r6, r4
 800d888:	d105      	bne.n	800d896 <__libc_init_array+0x2e>
 800d88a:	bd70      	pop	{r4, r5, r6, pc}
 800d88c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d890:	4798      	blx	r3
 800d892:	3601      	adds	r6, #1
 800d894:	e7ee      	b.n	800d874 <__libc_init_array+0xc>
 800d896:	f855 3b04 	ldr.w	r3, [r5], #4
 800d89a:	4798      	blx	r3
 800d89c:	3601      	adds	r6, #1
 800d89e:	e7f2      	b.n	800d886 <__libc_init_array+0x1e>
 800d8a0:	0800dc18 	.word	0x0800dc18
 800d8a4:	0800dc18 	.word	0x0800dc18
 800d8a8:	0800dc18 	.word	0x0800dc18
 800d8ac:	0800dc1c 	.word	0x0800dc1c

0800d8b0 <malloc>:
 800d8b0:	4b02      	ldr	r3, [pc, #8]	; (800d8bc <malloc+0xc>)
 800d8b2:	4601      	mov	r1, r0
 800d8b4:	6818      	ldr	r0, [r3, #0]
 800d8b6:	f000 b871 	b.w	800d99c <_malloc_r>
 800d8ba:	bf00      	nop
 800d8bc:	2000002c 	.word	0x2000002c

0800d8c0 <free>:
 800d8c0:	4b02      	ldr	r3, [pc, #8]	; (800d8cc <free+0xc>)
 800d8c2:	4601      	mov	r1, r0
 800d8c4:	6818      	ldr	r0, [r3, #0]
 800d8c6:	f000 b819 	b.w	800d8fc <_free_r>
 800d8ca:	bf00      	nop
 800d8cc:	2000002c 	.word	0x2000002c

0800d8d0 <memcpy>:
 800d8d0:	440a      	add	r2, r1
 800d8d2:	4291      	cmp	r1, r2
 800d8d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8d8:	d100      	bne.n	800d8dc <memcpy+0xc>
 800d8da:	4770      	bx	lr
 800d8dc:	b510      	push	{r4, lr}
 800d8de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8e6:	4291      	cmp	r1, r2
 800d8e8:	d1f9      	bne.n	800d8de <memcpy+0xe>
 800d8ea:	bd10      	pop	{r4, pc}

0800d8ec <memset>:
 800d8ec:	4402      	add	r2, r0
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d100      	bne.n	800d8f6 <memset+0xa>
 800d8f4:	4770      	bx	lr
 800d8f6:	f803 1b01 	strb.w	r1, [r3], #1
 800d8fa:	e7f9      	b.n	800d8f0 <memset+0x4>

0800d8fc <_free_r>:
 800d8fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8fe:	2900      	cmp	r1, #0
 800d900:	d048      	beq.n	800d994 <_free_r+0x98>
 800d902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d906:	9001      	str	r0, [sp, #4]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	f1a1 0404 	sub.w	r4, r1, #4
 800d90e:	bfb8      	it	lt
 800d910:	18e4      	addlt	r4, r4, r3
 800d912:	f000 f8ad 	bl	800da70 <__malloc_lock>
 800d916:	4a20      	ldr	r2, [pc, #128]	; (800d998 <_free_r+0x9c>)
 800d918:	9801      	ldr	r0, [sp, #4]
 800d91a:	6813      	ldr	r3, [r2, #0]
 800d91c:	4615      	mov	r5, r2
 800d91e:	b933      	cbnz	r3, 800d92e <_free_r+0x32>
 800d920:	6063      	str	r3, [r4, #4]
 800d922:	6014      	str	r4, [r2, #0]
 800d924:	b003      	add	sp, #12
 800d926:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d92a:	f000 b8a7 	b.w	800da7c <__malloc_unlock>
 800d92e:	42a3      	cmp	r3, r4
 800d930:	d90b      	bls.n	800d94a <_free_r+0x4e>
 800d932:	6821      	ldr	r1, [r4, #0]
 800d934:	1862      	adds	r2, r4, r1
 800d936:	4293      	cmp	r3, r2
 800d938:	bf04      	itt	eq
 800d93a:	681a      	ldreq	r2, [r3, #0]
 800d93c:	685b      	ldreq	r3, [r3, #4]
 800d93e:	6063      	str	r3, [r4, #4]
 800d940:	bf04      	itt	eq
 800d942:	1852      	addeq	r2, r2, r1
 800d944:	6022      	streq	r2, [r4, #0]
 800d946:	602c      	str	r4, [r5, #0]
 800d948:	e7ec      	b.n	800d924 <_free_r+0x28>
 800d94a:	461a      	mov	r2, r3
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	b10b      	cbz	r3, 800d954 <_free_r+0x58>
 800d950:	42a3      	cmp	r3, r4
 800d952:	d9fa      	bls.n	800d94a <_free_r+0x4e>
 800d954:	6811      	ldr	r1, [r2, #0]
 800d956:	1855      	adds	r5, r2, r1
 800d958:	42a5      	cmp	r5, r4
 800d95a:	d10b      	bne.n	800d974 <_free_r+0x78>
 800d95c:	6824      	ldr	r4, [r4, #0]
 800d95e:	4421      	add	r1, r4
 800d960:	1854      	adds	r4, r2, r1
 800d962:	42a3      	cmp	r3, r4
 800d964:	6011      	str	r1, [r2, #0]
 800d966:	d1dd      	bne.n	800d924 <_free_r+0x28>
 800d968:	681c      	ldr	r4, [r3, #0]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	6053      	str	r3, [r2, #4]
 800d96e:	4421      	add	r1, r4
 800d970:	6011      	str	r1, [r2, #0]
 800d972:	e7d7      	b.n	800d924 <_free_r+0x28>
 800d974:	d902      	bls.n	800d97c <_free_r+0x80>
 800d976:	230c      	movs	r3, #12
 800d978:	6003      	str	r3, [r0, #0]
 800d97a:	e7d3      	b.n	800d924 <_free_r+0x28>
 800d97c:	6825      	ldr	r5, [r4, #0]
 800d97e:	1961      	adds	r1, r4, r5
 800d980:	428b      	cmp	r3, r1
 800d982:	bf04      	itt	eq
 800d984:	6819      	ldreq	r1, [r3, #0]
 800d986:	685b      	ldreq	r3, [r3, #4]
 800d988:	6063      	str	r3, [r4, #4]
 800d98a:	bf04      	itt	eq
 800d98c:	1949      	addeq	r1, r1, r5
 800d98e:	6021      	streq	r1, [r4, #0]
 800d990:	6054      	str	r4, [r2, #4]
 800d992:	e7c7      	b.n	800d924 <_free_r+0x28>
 800d994:	b003      	add	sp, #12
 800d996:	bd30      	pop	{r4, r5, pc}
 800d998:	20001384 	.word	0x20001384

0800d99c <_malloc_r>:
 800d99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d99e:	1ccd      	adds	r5, r1, #3
 800d9a0:	f025 0503 	bic.w	r5, r5, #3
 800d9a4:	3508      	adds	r5, #8
 800d9a6:	2d0c      	cmp	r5, #12
 800d9a8:	bf38      	it	cc
 800d9aa:	250c      	movcc	r5, #12
 800d9ac:	2d00      	cmp	r5, #0
 800d9ae:	4606      	mov	r6, r0
 800d9b0:	db01      	blt.n	800d9b6 <_malloc_r+0x1a>
 800d9b2:	42a9      	cmp	r1, r5
 800d9b4:	d903      	bls.n	800d9be <_malloc_r+0x22>
 800d9b6:	230c      	movs	r3, #12
 800d9b8:	6033      	str	r3, [r6, #0]
 800d9ba:	2000      	movs	r0, #0
 800d9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9be:	f000 f857 	bl	800da70 <__malloc_lock>
 800d9c2:	4921      	ldr	r1, [pc, #132]	; (800da48 <_malloc_r+0xac>)
 800d9c4:	680a      	ldr	r2, [r1, #0]
 800d9c6:	4614      	mov	r4, r2
 800d9c8:	b99c      	cbnz	r4, 800d9f2 <_malloc_r+0x56>
 800d9ca:	4f20      	ldr	r7, [pc, #128]	; (800da4c <_malloc_r+0xb0>)
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	b923      	cbnz	r3, 800d9da <_malloc_r+0x3e>
 800d9d0:	4621      	mov	r1, r4
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	f000 f83c 	bl	800da50 <_sbrk_r>
 800d9d8:	6038      	str	r0, [r7, #0]
 800d9da:	4629      	mov	r1, r5
 800d9dc:	4630      	mov	r0, r6
 800d9de:	f000 f837 	bl	800da50 <_sbrk_r>
 800d9e2:	1c43      	adds	r3, r0, #1
 800d9e4:	d123      	bne.n	800da2e <_malloc_r+0x92>
 800d9e6:	230c      	movs	r3, #12
 800d9e8:	6033      	str	r3, [r6, #0]
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	f000 f846 	bl	800da7c <__malloc_unlock>
 800d9f0:	e7e3      	b.n	800d9ba <_malloc_r+0x1e>
 800d9f2:	6823      	ldr	r3, [r4, #0]
 800d9f4:	1b5b      	subs	r3, r3, r5
 800d9f6:	d417      	bmi.n	800da28 <_malloc_r+0x8c>
 800d9f8:	2b0b      	cmp	r3, #11
 800d9fa:	d903      	bls.n	800da04 <_malloc_r+0x68>
 800d9fc:	6023      	str	r3, [r4, #0]
 800d9fe:	441c      	add	r4, r3
 800da00:	6025      	str	r5, [r4, #0]
 800da02:	e004      	b.n	800da0e <_malloc_r+0x72>
 800da04:	6863      	ldr	r3, [r4, #4]
 800da06:	42a2      	cmp	r2, r4
 800da08:	bf0c      	ite	eq
 800da0a:	600b      	streq	r3, [r1, #0]
 800da0c:	6053      	strne	r3, [r2, #4]
 800da0e:	4630      	mov	r0, r6
 800da10:	f000 f834 	bl	800da7c <__malloc_unlock>
 800da14:	f104 000b 	add.w	r0, r4, #11
 800da18:	1d23      	adds	r3, r4, #4
 800da1a:	f020 0007 	bic.w	r0, r0, #7
 800da1e:	1ac2      	subs	r2, r0, r3
 800da20:	d0cc      	beq.n	800d9bc <_malloc_r+0x20>
 800da22:	1a1b      	subs	r3, r3, r0
 800da24:	50a3      	str	r3, [r4, r2]
 800da26:	e7c9      	b.n	800d9bc <_malloc_r+0x20>
 800da28:	4622      	mov	r2, r4
 800da2a:	6864      	ldr	r4, [r4, #4]
 800da2c:	e7cc      	b.n	800d9c8 <_malloc_r+0x2c>
 800da2e:	1cc4      	adds	r4, r0, #3
 800da30:	f024 0403 	bic.w	r4, r4, #3
 800da34:	42a0      	cmp	r0, r4
 800da36:	d0e3      	beq.n	800da00 <_malloc_r+0x64>
 800da38:	1a21      	subs	r1, r4, r0
 800da3a:	4630      	mov	r0, r6
 800da3c:	f000 f808 	bl	800da50 <_sbrk_r>
 800da40:	3001      	adds	r0, #1
 800da42:	d1dd      	bne.n	800da00 <_malloc_r+0x64>
 800da44:	e7cf      	b.n	800d9e6 <_malloc_r+0x4a>
 800da46:	bf00      	nop
 800da48:	20001384 	.word	0x20001384
 800da4c:	20001388 	.word	0x20001388

0800da50 <_sbrk_r>:
 800da50:	b538      	push	{r3, r4, r5, lr}
 800da52:	4d06      	ldr	r5, [pc, #24]	; (800da6c <_sbrk_r+0x1c>)
 800da54:	2300      	movs	r3, #0
 800da56:	4604      	mov	r4, r0
 800da58:	4608      	mov	r0, r1
 800da5a:	602b      	str	r3, [r5, #0]
 800da5c:	f7f3 fd62 	bl	8001524 <_sbrk>
 800da60:	1c43      	adds	r3, r0, #1
 800da62:	d102      	bne.n	800da6a <_sbrk_r+0x1a>
 800da64:	682b      	ldr	r3, [r5, #0]
 800da66:	b103      	cbz	r3, 800da6a <_sbrk_r+0x1a>
 800da68:	6023      	str	r3, [r4, #0]
 800da6a:	bd38      	pop	{r3, r4, r5, pc}
 800da6c:	20001fd0 	.word	0x20001fd0

0800da70 <__malloc_lock>:
 800da70:	4801      	ldr	r0, [pc, #4]	; (800da78 <__malloc_lock+0x8>)
 800da72:	f000 b809 	b.w	800da88 <__retarget_lock_acquire_recursive>
 800da76:	bf00      	nop
 800da78:	20001fd8 	.word	0x20001fd8

0800da7c <__malloc_unlock>:
 800da7c:	4801      	ldr	r0, [pc, #4]	; (800da84 <__malloc_unlock+0x8>)
 800da7e:	f000 b804 	b.w	800da8a <__retarget_lock_release_recursive>
 800da82:	bf00      	nop
 800da84:	20001fd8 	.word	0x20001fd8

0800da88 <__retarget_lock_acquire_recursive>:
 800da88:	4770      	bx	lr

0800da8a <__retarget_lock_release_recursive>:
 800da8a:	4770      	bx	lr

0800da8c <_init>:
 800da8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8e:	bf00      	nop
 800da90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da92:	bc08      	pop	{r3}
 800da94:	469e      	mov	lr, r3
 800da96:	4770      	bx	lr

0800da98 <_fini>:
 800da98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da9a:	bf00      	nop
 800da9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da9e:	bc08      	pop	{r3}
 800daa0:	469e      	mov	lr, r3
 800daa2:	4770      	bx	lr
